// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: cmd_detail.proto

package connectivity

import (
	bytes "bytes"
	fmt "fmt"
	_ "github.com/gogo/protobuf/gogoproto"
	proto "github.com/gogo/protobuf/proto"
	io "io"
	math "math"
	reflect "reflect"
	strconv "strconv"
	strings "strings"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion2 // please upgrade the proto package

type PodAction int32

const (
	// Create a new pod in device
	Create PodAction = 0
	// Delete a existing pod in device
	Delete PodAction = 1
	// List all managed pod in device
	List PodAction = 3
	// Execute commands in existing container
	Exec PodAction = 11
	// Attach to existing container
	Attach PodAction = 12
	// Get container/node log
	Log PodAction = 13
	// Port forward in pod
	PortForward PodAction = 14
	// user input or application data to
	// usually this action happens in Exec, Attach, PortForward session
	Input PodAction = 15
	// user tty resize
	// usually this action happens in Exec, Attach session when tty is enabled
	ResizeTty PodAction = 16
)

var PodAction_name = map[int32]string{
	0:  "Create",
	1:  "Delete",
	3:  "List",
	11: "Exec",
	12: "Attach",
	13: "Log",
	14: "PortForward",
	15: "Input",
	16: "ResizeTty",
}

var PodAction_value = map[string]int32{
	"Create":      0,
	"Delete":      1,
	"List":        3,
	"Exec":        11,
	"Attach":      12,
	"Log":         13,
	"PortForward": 14,
	"Input":       15,
	"ResizeTty":   16,
}

func (PodAction) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_1571bcd24e248579, []int{0}
}

type NodeCmd struct {
}

func (m *NodeCmd) Reset()      { *m = NodeCmd{} }
func (*NodeCmd) ProtoMessage() {}
func (*NodeCmd) Descriptor() ([]byte, []int) {
	return fileDescriptor_1571bcd24e248579, []int{0}
}
func (m *NodeCmd) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *NodeCmd) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_NodeCmd.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *NodeCmd) XXX_Merge(src proto.Message) {
	xxx_messageInfo_NodeCmd.Merge(m, src)
}
func (m *NodeCmd) XXX_Size() int {
	return m.Size()
}
func (m *NodeCmd) XXX_DiscardUnknown() {
	xxx_messageInfo_NodeCmd.DiscardUnknown(m)
}

var xxx_messageInfo_NodeCmd proto.InternalMessageInfo

func (*NodeCmd) XXX_MessageName() string {
	return "connectivity.NodeCmd"
}

type PodCmd struct {
	// pod namespace
	Namespace string `protobuf:"bytes,1,opt,name=namespace,proto3" json:"namespace,omitempty"`
	// pod name
	Name string `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`
	// action type
	Action PodAction `protobuf:"varint,3,opt,name=action,proto3,enum=connectivity.PodAction" json:"action,omitempty"`
	// options for action
	//
	// Types that are valid to be assigned to Options:
	//	*PodCmd_CreateOptions
	//	*PodCmd_DeleteOptions
	//	*PodCmd_ListOptions
	//	*PodCmd_LogOptions
	//	*PodCmd_ExecOptions
	//	*PodCmd_PortForwardOptions
	//	*PodCmd_InputOptions
	//	*PodCmd_ResizeOptions
	Options isPodCmd_Options `protobuf_oneof:"options"`
}

func (m *PodCmd) Reset()      { *m = PodCmd{} }
func (*PodCmd) ProtoMessage() {}
func (*PodCmd) Descriptor() ([]byte, []int) {
	return fileDescriptor_1571bcd24e248579, []int{1}
}
func (m *PodCmd) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *PodCmd) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_PodCmd.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *PodCmd) XXX_Merge(src proto.Message) {
	xxx_messageInfo_PodCmd.Merge(m, src)
}
func (m *PodCmd) XXX_Size() int {
	return m.Size()
}
func (m *PodCmd) XXX_DiscardUnknown() {
	xxx_messageInfo_PodCmd.DiscardUnknown(m)
}

var xxx_messageInfo_PodCmd proto.InternalMessageInfo

type isPodCmd_Options interface {
	isPodCmd_Options()
	Equal(interface{}) bool
	MarshalTo([]byte) (int, error)
	Size() int
}

type PodCmd_CreateOptions struct {
	CreateOptions *CreateOptions `protobuf:"bytes,11,opt,name=create_options,json=createOptions,proto3,oneof"`
}
type PodCmd_DeleteOptions struct {
	DeleteOptions *DeleteOptions `protobuf:"bytes,12,opt,name=delete_options,json=deleteOptions,proto3,oneof"`
}
type PodCmd_ListOptions struct {
	ListOptions *ListOptions `protobuf:"bytes,13,opt,name=list_options,json=listOptions,proto3,oneof"`
}
type PodCmd_LogOptions struct {
	LogOptions *LogOptions `protobuf:"bytes,14,opt,name=log_options,json=logOptions,proto3,oneof"`
}
type PodCmd_ExecOptions struct {
	ExecOptions *ExecOptions `protobuf:"bytes,15,opt,name=exec_options,json=execOptions,proto3,oneof"`
}
type PodCmd_PortForwardOptions struct {
	PortForwardOptions *PortForwardOptions `protobuf:"bytes,16,opt,name=port_forward_options,json=portForwardOptions,proto3,oneof"`
}
type PodCmd_InputOptions struct {
	InputOptions *InputOptions `protobuf:"bytes,17,opt,name=input_options,json=inputOptions,proto3,oneof"`
}
type PodCmd_ResizeOptions struct {
	ResizeOptions *TtyResizeOptions `protobuf:"bytes,18,opt,name=resize_options,json=resizeOptions,proto3,oneof"`
}

func (*PodCmd_CreateOptions) isPodCmd_Options()      {}
func (*PodCmd_DeleteOptions) isPodCmd_Options()      {}
func (*PodCmd_ListOptions) isPodCmd_Options()        {}
func (*PodCmd_LogOptions) isPodCmd_Options()         {}
func (*PodCmd_ExecOptions) isPodCmd_Options()        {}
func (*PodCmd_PortForwardOptions) isPodCmd_Options() {}
func (*PodCmd_InputOptions) isPodCmd_Options()       {}
func (*PodCmd_ResizeOptions) isPodCmd_Options()      {}

func (m *PodCmd) GetOptions() isPodCmd_Options {
	if m != nil {
		return m.Options
	}
	return nil
}

func (m *PodCmd) GetNamespace() string {
	if m != nil {
		return m.Namespace
	}
	return ""
}

func (m *PodCmd) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *PodCmd) GetAction() PodAction {
	if m != nil {
		return m.Action
	}
	return Create
}

func (m *PodCmd) GetCreateOptions() *CreateOptions {
	if x, ok := m.GetOptions().(*PodCmd_CreateOptions); ok {
		return x.CreateOptions
	}
	return nil
}

func (m *PodCmd) GetDeleteOptions() *DeleteOptions {
	if x, ok := m.GetOptions().(*PodCmd_DeleteOptions); ok {
		return x.DeleteOptions
	}
	return nil
}

func (m *PodCmd) GetListOptions() *ListOptions {
	if x, ok := m.GetOptions().(*PodCmd_ListOptions); ok {
		return x.ListOptions
	}
	return nil
}

func (m *PodCmd) GetLogOptions() *LogOptions {
	if x, ok := m.GetOptions().(*PodCmd_LogOptions); ok {
		return x.LogOptions
	}
	return nil
}

func (m *PodCmd) GetExecOptions() *ExecOptions {
	if x, ok := m.GetOptions().(*PodCmd_ExecOptions); ok {
		return x.ExecOptions
	}
	return nil
}

func (m *PodCmd) GetPortForwardOptions() *PortForwardOptions {
	if x, ok := m.GetOptions().(*PodCmd_PortForwardOptions); ok {
		return x.PortForwardOptions
	}
	return nil
}

func (m *PodCmd) GetInputOptions() *InputOptions {
	if x, ok := m.GetOptions().(*PodCmd_InputOptions); ok {
		return x.InputOptions
	}
	return nil
}

func (m *PodCmd) GetResizeOptions() *TtyResizeOptions {
	if x, ok := m.GetOptions().(*PodCmd_ResizeOptions); ok {
		return x.ResizeOptions
	}
	return nil
}

// XXX_OneofFuncs is for the internal use of the proto package.
func (*PodCmd) XXX_OneofFuncs() (func(msg proto.Message, b *proto.Buffer) error, func(msg proto.Message, tag, wire int, b *proto.Buffer) (bool, error), func(msg proto.Message) (n int), []interface{}) {
	return _PodCmd_OneofMarshaler, _PodCmd_OneofUnmarshaler, _PodCmd_OneofSizer, []interface{}{
		(*PodCmd_CreateOptions)(nil),
		(*PodCmd_DeleteOptions)(nil),
		(*PodCmd_ListOptions)(nil),
		(*PodCmd_LogOptions)(nil),
		(*PodCmd_ExecOptions)(nil),
		(*PodCmd_PortForwardOptions)(nil),
		(*PodCmd_InputOptions)(nil),
		(*PodCmd_ResizeOptions)(nil),
	}
}

func _PodCmd_OneofMarshaler(msg proto.Message, b *proto.Buffer) error {
	m := msg.(*PodCmd)
	// options
	switch x := m.Options.(type) {
	case *PodCmd_CreateOptions:
		_ = b.EncodeVarint(11<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.CreateOptions); err != nil {
			return err
		}
	case *PodCmd_DeleteOptions:
		_ = b.EncodeVarint(12<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.DeleteOptions); err != nil {
			return err
		}
	case *PodCmd_ListOptions:
		_ = b.EncodeVarint(13<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.ListOptions); err != nil {
			return err
		}
	case *PodCmd_LogOptions:
		_ = b.EncodeVarint(14<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.LogOptions); err != nil {
			return err
		}
	case *PodCmd_ExecOptions:
		_ = b.EncodeVarint(15<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.ExecOptions); err != nil {
			return err
		}
	case *PodCmd_PortForwardOptions:
		_ = b.EncodeVarint(16<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.PortForwardOptions); err != nil {
			return err
		}
	case *PodCmd_InputOptions:
		_ = b.EncodeVarint(17<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.InputOptions); err != nil {
			return err
		}
	case *PodCmd_ResizeOptions:
		_ = b.EncodeVarint(18<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.ResizeOptions); err != nil {
			return err
		}
	case nil:
	default:
		return fmt.Errorf("PodCmd.Options has unexpected type %T", x)
	}
	return nil
}

func _PodCmd_OneofUnmarshaler(msg proto.Message, tag, wire int, b *proto.Buffer) (bool, error) {
	m := msg.(*PodCmd)
	switch tag {
	case 11: // options.create_options
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(CreateOptions)
		err := b.DecodeMessage(msg)
		m.Options = &PodCmd_CreateOptions{msg}
		return true, err
	case 12: // options.delete_options
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(DeleteOptions)
		err := b.DecodeMessage(msg)
		m.Options = &PodCmd_DeleteOptions{msg}
		return true, err
	case 13: // options.list_options
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(ListOptions)
		err := b.DecodeMessage(msg)
		m.Options = &PodCmd_ListOptions{msg}
		return true, err
	case 14: // options.log_options
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(LogOptions)
		err := b.DecodeMessage(msg)
		m.Options = &PodCmd_LogOptions{msg}
		return true, err
	case 15: // options.exec_options
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(ExecOptions)
		err := b.DecodeMessage(msg)
		m.Options = &PodCmd_ExecOptions{msg}
		return true, err
	case 16: // options.port_forward_options
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(PortForwardOptions)
		err := b.DecodeMessage(msg)
		m.Options = &PodCmd_PortForwardOptions{msg}
		return true, err
	case 17: // options.input_options
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(InputOptions)
		err := b.DecodeMessage(msg)
		m.Options = &PodCmd_InputOptions{msg}
		return true, err
	case 18: // options.resize_options
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(TtyResizeOptions)
		err := b.DecodeMessage(msg)
		m.Options = &PodCmd_ResizeOptions{msg}
		return true, err
	default:
		return false, nil
	}
}

func _PodCmd_OneofSizer(msg proto.Message) (n int) {
	m := msg.(*PodCmd)
	// options
	switch x := m.Options.(type) {
	case *PodCmd_CreateOptions:
		s := proto.Size(x.CreateOptions)
		n += 1 // tag and wire
		n += proto.SizeVarint(uint64(s))
		n += s
	case *PodCmd_DeleteOptions:
		s := proto.Size(x.DeleteOptions)
		n += 1 // tag and wire
		n += proto.SizeVarint(uint64(s))
		n += s
	case *PodCmd_ListOptions:
		s := proto.Size(x.ListOptions)
		n += 1 // tag and wire
		n += proto.SizeVarint(uint64(s))
		n += s
	case *PodCmd_LogOptions:
		s := proto.Size(x.LogOptions)
		n += 1 // tag and wire
		n += proto.SizeVarint(uint64(s))
		n += s
	case *PodCmd_ExecOptions:
		s := proto.Size(x.ExecOptions)
		n += 1 // tag and wire
		n += proto.SizeVarint(uint64(s))
		n += s
	case *PodCmd_PortForwardOptions:
		s := proto.Size(x.PortForwardOptions)
		n += 2 // tag and wire
		n += proto.SizeVarint(uint64(s))
		n += s
	case *PodCmd_InputOptions:
		s := proto.Size(x.InputOptions)
		n += 2 // tag and wire
		n += proto.SizeVarint(uint64(s))
		n += s
	case *PodCmd_ResizeOptions:
		s := proto.Size(x.ResizeOptions)
		n += 2 // tag and wire
		n += proto.SizeVarint(uint64(s))
		n += s
	case nil:
	default:
		panic(fmt.Sprintf("proto: unexpected type %T in oneof", x))
	}
	return n
}

func (*PodCmd) XXX_MessageName() string {
	return "connectivity.PodCmd"
}

type PodV1 struct {
	// protobuf bytes of corev1.Pod
	Pod []byte `protobuf:"bytes,1,opt,name=pod,proto3" json:"pod,omitempty"`
	// protobuf []bytes of []corev1.Secret
	PullSecret [][]byte `protobuf:"bytes,2,rep,name=pull_secret,json=pullSecret,proto3" json:"pull_secret,omitempty"`
}

func (m *PodV1) Reset()      { *m = PodV1{} }
func (*PodV1) ProtoMessage() {}
func (*PodV1) Descriptor() ([]byte, []int) {
	return fileDescriptor_1571bcd24e248579, []int{2}
}
func (m *PodV1) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *PodV1) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_PodV1.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *PodV1) XXX_Merge(src proto.Message) {
	xxx_messageInfo_PodV1.Merge(m, src)
}
func (m *PodV1) XXX_Size() int {
	return m.Size()
}
func (m *PodV1) XXX_DiscardUnknown() {
	xxx_messageInfo_PodV1.DiscardUnknown(m)
}

var xxx_messageInfo_PodV1 proto.InternalMessageInfo

func (m *PodV1) GetPod() []byte {
	if m != nil {
		return m.Pod
	}
	return nil
}

func (m *PodV1) GetPullSecret() [][]byte {
	if m != nil {
		return m.PullSecret
	}
	return nil
}

func (*PodV1) XXX_MessageName() string {
	return "connectivity.PodV1"
}

type CreateOptions struct {
	// Types that are valid to be assigned to Pod:
	//	*CreateOptions_PodV1
	Pod isCreateOptions_Pod `protobuf_oneof:"pod"`
}

func (m *CreateOptions) Reset()      { *m = CreateOptions{} }
func (*CreateOptions) ProtoMessage() {}
func (*CreateOptions) Descriptor() ([]byte, []int) {
	return fileDescriptor_1571bcd24e248579, []int{3}
}
func (m *CreateOptions) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *CreateOptions) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_CreateOptions.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *CreateOptions) XXX_Merge(src proto.Message) {
	xxx_messageInfo_CreateOptions.Merge(m, src)
}
func (m *CreateOptions) XXX_Size() int {
	return m.Size()
}
func (m *CreateOptions) XXX_DiscardUnknown() {
	xxx_messageInfo_CreateOptions.DiscardUnknown(m)
}

var xxx_messageInfo_CreateOptions proto.InternalMessageInfo

type isCreateOptions_Pod interface {
	isCreateOptions_Pod()
	Equal(interface{}) bool
	MarshalTo([]byte) (int, error)
	Size() int
}

type CreateOptions_PodV1 struct {
	PodV1 *PodV1 `protobuf:"bytes,1,opt,name=pod_v1,json=podV1,proto3,oneof"`
}

func (*CreateOptions_PodV1) isCreateOptions_Pod() {}

func (m *CreateOptions) GetPod() isCreateOptions_Pod {
	if m != nil {
		return m.Pod
	}
	return nil
}

func (m *CreateOptions) GetPodV1() *PodV1 {
	if x, ok := m.GetPod().(*CreateOptions_PodV1); ok {
		return x.PodV1
	}
	return nil
}

// XXX_OneofFuncs is for the internal use of the proto package.
func (*CreateOptions) XXX_OneofFuncs() (func(msg proto.Message, b *proto.Buffer) error, func(msg proto.Message, tag, wire int, b *proto.Buffer) (bool, error), func(msg proto.Message) (n int), []interface{}) {
	return _CreateOptions_OneofMarshaler, _CreateOptions_OneofUnmarshaler, _CreateOptions_OneofSizer, []interface{}{
		(*CreateOptions_PodV1)(nil),
	}
}

func _CreateOptions_OneofMarshaler(msg proto.Message, b *proto.Buffer) error {
	m := msg.(*CreateOptions)
	// pod
	switch x := m.Pod.(type) {
	case *CreateOptions_PodV1:
		_ = b.EncodeVarint(1<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.PodV1); err != nil {
			return err
		}
	case nil:
	default:
		return fmt.Errorf("CreateOptions.Pod has unexpected type %T", x)
	}
	return nil
}

func _CreateOptions_OneofUnmarshaler(msg proto.Message, tag, wire int, b *proto.Buffer) (bool, error) {
	m := msg.(*CreateOptions)
	switch tag {
	case 1: // pod.pod_v1
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(PodV1)
		err := b.DecodeMessage(msg)
		m.Pod = &CreateOptions_PodV1{msg}
		return true, err
	default:
		return false, nil
	}
}

func _CreateOptions_OneofSizer(msg proto.Message) (n int) {
	m := msg.(*CreateOptions)
	// pod
	switch x := m.Pod.(type) {
	case *CreateOptions_PodV1:
		s := proto.Size(x.PodV1)
		n += 1 // tag and wire
		n += proto.SizeVarint(uint64(s))
		n += s
	case nil:
	default:
		panic(fmt.Sprintf("proto: unexpected type %T in oneof", x))
	}
	return n
}

func (*CreateOptions) XXX_MessageName() string {
	return "connectivity.CreateOptions"
}

type DeleteOptions struct {
	GraceTime int64 `protobuf:"varint,1,opt,name=grace_time,json=graceTime,proto3" json:"grace_time,omitempty"`
}

func (m *DeleteOptions) Reset()      { *m = DeleteOptions{} }
func (*DeleteOptions) ProtoMessage() {}
func (*DeleteOptions) Descriptor() ([]byte, []int) {
	return fileDescriptor_1571bcd24e248579, []int{4}
}
func (m *DeleteOptions) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *DeleteOptions) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_DeleteOptions.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *DeleteOptions) XXX_Merge(src proto.Message) {
	xxx_messageInfo_DeleteOptions.Merge(m, src)
}
func (m *DeleteOptions) XXX_Size() int {
	return m.Size()
}
func (m *DeleteOptions) XXX_DiscardUnknown() {
	xxx_messageInfo_DeleteOptions.DiscardUnknown(m)
}

var xxx_messageInfo_DeleteOptions proto.InternalMessageInfo

func (m *DeleteOptions) GetGraceTime() int64 {
	if m != nil {
		return m.GraceTime
	}
	return 0
}

func (*DeleteOptions) XXX_MessageName() string {
	return "connectivity.DeleteOptions"
}

type ListOptions struct {
}

func (m *ListOptions) Reset()      { *m = ListOptions{} }
func (*ListOptions) ProtoMessage() {}
func (*ListOptions) Descriptor() ([]byte, []int) {
	return fileDescriptor_1571bcd24e248579, []int{5}
}
func (m *ListOptions) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ListOptions) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ListOptions.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ListOptions) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ListOptions.Merge(m, src)
}
func (m *ListOptions) XXX_Size() int {
	return m.Size()
}
func (m *ListOptions) XXX_DiscardUnknown() {
	xxx_messageInfo_ListOptions.DiscardUnknown(m)
}

var xxx_messageInfo_ListOptions proto.InternalMessageInfo

func (*ListOptions) XXX_MessageName() string {
	return "connectivity.ListOptions"
}

type LogOptions struct {
	// Types that are valid to be assigned to Options:
	//	*LogOptions_OptionsV1
	Options isLogOptions_Options `protobuf_oneof:"options"`
}

func (m *LogOptions) Reset()      { *m = LogOptions{} }
func (*LogOptions) ProtoMessage() {}
func (*LogOptions) Descriptor() ([]byte, []int) {
	return fileDescriptor_1571bcd24e248579, []int{6}
}
func (m *LogOptions) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *LogOptions) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_LogOptions.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *LogOptions) XXX_Merge(src proto.Message) {
	xxx_messageInfo_LogOptions.Merge(m, src)
}
func (m *LogOptions) XXX_Size() int {
	return m.Size()
}
func (m *LogOptions) XXX_DiscardUnknown() {
	xxx_messageInfo_LogOptions.DiscardUnknown(m)
}

var xxx_messageInfo_LogOptions proto.InternalMessageInfo

type isLogOptions_Options interface {
	isLogOptions_Options()
	Equal(interface{}) bool
	MarshalTo([]byte) (int, error)
	Size() int
}

type LogOptions_OptionsV1 struct {
	OptionsV1 []byte `protobuf:"bytes,1,opt,name=options_v1,json=optionsV1,proto3,oneof"`
}

func (*LogOptions_OptionsV1) isLogOptions_Options() {}

func (m *LogOptions) GetOptions() isLogOptions_Options {
	if m != nil {
		return m.Options
	}
	return nil
}

func (m *LogOptions) GetOptionsV1() []byte {
	if x, ok := m.GetOptions().(*LogOptions_OptionsV1); ok {
		return x.OptionsV1
	}
	return nil
}

// XXX_OneofFuncs is for the internal use of the proto package.
func (*LogOptions) XXX_OneofFuncs() (func(msg proto.Message, b *proto.Buffer) error, func(msg proto.Message, tag, wire int, b *proto.Buffer) (bool, error), func(msg proto.Message) (n int), []interface{}) {
	return _LogOptions_OneofMarshaler, _LogOptions_OneofUnmarshaler, _LogOptions_OneofSizer, []interface{}{
		(*LogOptions_OptionsV1)(nil),
	}
}

func _LogOptions_OneofMarshaler(msg proto.Message, b *proto.Buffer) error {
	m := msg.(*LogOptions)
	// options
	switch x := m.Options.(type) {
	case *LogOptions_OptionsV1:
		_ = b.EncodeVarint(1<<3 | proto.WireBytes)
		_ = b.EncodeRawBytes(x.OptionsV1)
	case nil:
	default:
		return fmt.Errorf("LogOptions.Options has unexpected type %T", x)
	}
	return nil
}

func _LogOptions_OneofUnmarshaler(msg proto.Message, tag, wire int, b *proto.Buffer) (bool, error) {
	m := msg.(*LogOptions)
	switch tag {
	case 1: // options.options_v1
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		x, err := b.DecodeRawBytes(true)
		m.Options = &LogOptions_OptionsV1{x}
		return true, err
	default:
		return false, nil
	}
}

func _LogOptions_OneofSizer(msg proto.Message) (n int) {
	m := msg.(*LogOptions)
	// options
	switch x := m.Options.(type) {
	case *LogOptions_OptionsV1:
		n += 1 // tag and wire
		n += proto.SizeVarint(uint64(len(x.OptionsV1)))
		n += len(x.OptionsV1)
	case nil:
	default:
		panic(fmt.Sprintf("proto: unexpected type %T in oneof", x))
	}
	return n
}

func (*LogOptions) XXX_MessageName() string {
	return "connectivity.LogOptions"
}

type ExecOptions struct {
	// Types that are valid to be assigned to Options:
	//	*ExecOptions_OptionsV1
	Options isExecOptions_Options `protobuf_oneof:"options"`
}

func (m *ExecOptions) Reset()      { *m = ExecOptions{} }
func (*ExecOptions) ProtoMessage() {}
func (*ExecOptions) Descriptor() ([]byte, []int) {
	return fileDescriptor_1571bcd24e248579, []int{7}
}
func (m *ExecOptions) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ExecOptions) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ExecOptions.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ExecOptions) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ExecOptions.Merge(m, src)
}
func (m *ExecOptions) XXX_Size() int {
	return m.Size()
}
func (m *ExecOptions) XXX_DiscardUnknown() {
	xxx_messageInfo_ExecOptions.DiscardUnknown(m)
}

var xxx_messageInfo_ExecOptions proto.InternalMessageInfo

type isExecOptions_Options interface {
	isExecOptions_Options()
	Equal(interface{}) bool
	MarshalTo([]byte) (int, error)
	Size() int
}

type ExecOptions_OptionsV1 struct {
	OptionsV1 []byte `protobuf:"bytes,1,opt,name=options_v1,json=optionsV1,proto3,oneof"`
}

func (*ExecOptions_OptionsV1) isExecOptions_Options() {}

func (m *ExecOptions) GetOptions() isExecOptions_Options {
	if m != nil {
		return m.Options
	}
	return nil
}

func (m *ExecOptions) GetOptionsV1() []byte {
	if x, ok := m.GetOptions().(*ExecOptions_OptionsV1); ok {
		return x.OptionsV1
	}
	return nil
}

// XXX_OneofFuncs is for the internal use of the proto package.
func (*ExecOptions) XXX_OneofFuncs() (func(msg proto.Message, b *proto.Buffer) error, func(msg proto.Message, tag, wire int, b *proto.Buffer) (bool, error), func(msg proto.Message) (n int), []interface{}) {
	return _ExecOptions_OneofMarshaler, _ExecOptions_OneofUnmarshaler, _ExecOptions_OneofSizer, []interface{}{
		(*ExecOptions_OptionsV1)(nil),
	}
}

func _ExecOptions_OneofMarshaler(msg proto.Message, b *proto.Buffer) error {
	m := msg.(*ExecOptions)
	// options
	switch x := m.Options.(type) {
	case *ExecOptions_OptionsV1:
		_ = b.EncodeVarint(1<<3 | proto.WireBytes)
		_ = b.EncodeRawBytes(x.OptionsV1)
	case nil:
	default:
		return fmt.Errorf("ExecOptions.Options has unexpected type %T", x)
	}
	return nil
}

func _ExecOptions_OneofUnmarshaler(msg proto.Message, tag, wire int, b *proto.Buffer) (bool, error) {
	m := msg.(*ExecOptions)
	switch tag {
	case 1: // options.options_v1
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		x, err := b.DecodeRawBytes(true)
		m.Options = &ExecOptions_OptionsV1{x}
		return true, err
	default:
		return false, nil
	}
}

func _ExecOptions_OneofSizer(msg proto.Message) (n int) {
	m := msg.(*ExecOptions)
	// options
	switch x := m.Options.(type) {
	case *ExecOptions_OptionsV1:
		n += 1 // tag and wire
		n += proto.SizeVarint(uint64(len(x.OptionsV1)))
		n += len(x.OptionsV1)
	case nil:
	default:
		panic(fmt.Sprintf("proto: unexpected type %T in oneof", x))
	}
	return n
}

func (*ExecOptions) XXX_MessageName() string {
	return "connectivity.ExecOptions"
}

type PortForwardOptions struct {
	// Types that are valid to be assigned to Options:
	//	*PortForwardOptions_OptionsV1
	Options isPortForwardOptions_Options `protobuf_oneof:"options"`
}

func (m *PortForwardOptions) Reset()      { *m = PortForwardOptions{} }
func (*PortForwardOptions) ProtoMessage() {}
func (*PortForwardOptions) Descriptor() ([]byte, []int) {
	return fileDescriptor_1571bcd24e248579, []int{8}
}
func (m *PortForwardOptions) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *PortForwardOptions) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_PortForwardOptions.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *PortForwardOptions) XXX_Merge(src proto.Message) {
	xxx_messageInfo_PortForwardOptions.Merge(m, src)
}
func (m *PortForwardOptions) XXX_Size() int {
	return m.Size()
}
func (m *PortForwardOptions) XXX_DiscardUnknown() {
	xxx_messageInfo_PortForwardOptions.DiscardUnknown(m)
}

var xxx_messageInfo_PortForwardOptions proto.InternalMessageInfo

type isPortForwardOptions_Options interface {
	isPortForwardOptions_Options()
	Equal(interface{}) bool
	MarshalTo([]byte) (int, error)
	Size() int
}

type PortForwardOptions_OptionsV1 struct {
	OptionsV1 []byte `protobuf:"bytes,1,opt,name=options_v1,json=optionsV1,proto3,oneof"`
}

func (*PortForwardOptions_OptionsV1) isPortForwardOptions_Options() {}

func (m *PortForwardOptions) GetOptions() isPortForwardOptions_Options {
	if m != nil {
		return m.Options
	}
	return nil
}

func (m *PortForwardOptions) GetOptionsV1() []byte {
	if x, ok := m.GetOptions().(*PortForwardOptions_OptionsV1); ok {
		return x.OptionsV1
	}
	return nil
}

// XXX_OneofFuncs is for the internal use of the proto package.
func (*PortForwardOptions) XXX_OneofFuncs() (func(msg proto.Message, b *proto.Buffer) error, func(msg proto.Message, tag, wire int, b *proto.Buffer) (bool, error), func(msg proto.Message) (n int), []interface{}) {
	return _PortForwardOptions_OneofMarshaler, _PortForwardOptions_OneofUnmarshaler, _PortForwardOptions_OneofSizer, []interface{}{
		(*PortForwardOptions_OptionsV1)(nil),
	}
}

func _PortForwardOptions_OneofMarshaler(msg proto.Message, b *proto.Buffer) error {
	m := msg.(*PortForwardOptions)
	// options
	switch x := m.Options.(type) {
	case *PortForwardOptions_OptionsV1:
		_ = b.EncodeVarint(1<<3 | proto.WireBytes)
		_ = b.EncodeRawBytes(x.OptionsV1)
	case nil:
	default:
		return fmt.Errorf("PortForwardOptions.Options has unexpected type %T", x)
	}
	return nil
}

func _PortForwardOptions_OneofUnmarshaler(msg proto.Message, tag, wire int, b *proto.Buffer) (bool, error) {
	m := msg.(*PortForwardOptions)
	switch tag {
	case 1: // options.options_v1
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		x, err := b.DecodeRawBytes(true)
		m.Options = &PortForwardOptions_OptionsV1{x}
		return true, err
	default:
		return false, nil
	}
}

func _PortForwardOptions_OneofSizer(msg proto.Message) (n int) {
	m := msg.(*PortForwardOptions)
	// options
	switch x := m.Options.(type) {
	case *PortForwardOptions_OptionsV1:
		n += 1 // tag and wire
		n += proto.SizeVarint(uint64(len(x.OptionsV1)))
		n += len(x.OptionsV1)
	case nil:
	default:
		panic(fmt.Sprintf("proto: unexpected type %T in oneof", x))
	}
	return n
}

func (*PortForwardOptions) XXX_MessageName() string {
	return "connectivity.PortForwardOptions"
}

type InputOptions struct {
	Data []byte `protobuf:"bytes,1,opt,name=data,proto3" json:"data,omitempty"`
}

func (m *InputOptions) Reset()      { *m = InputOptions{} }
func (*InputOptions) ProtoMessage() {}
func (*InputOptions) Descriptor() ([]byte, []int) {
	return fileDescriptor_1571bcd24e248579, []int{9}
}
func (m *InputOptions) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *InputOptions) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_InputOptions.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *InputOptions) XXX_Merge(src proto.Message) {
	xxx_messageInfo_InputOptions.Merge(m, src)
}
func (m *InputOptions) XXX_Size() int {
	return m.Size()
}
func (m *InputOptions) XXX_DiscardUnknown() {
	xxx_messageInfo_InputOptions.DiscardUnknown(m)
}

var xxx_messageInfo_InputOptions proto.InternalMessageInfo

func (m *InputOptions) GetData() []byte {
	if m != nil {
		return m.Data
	}
	return nil
}

func (*InputOptions) XXX_MessageName() string {
	return "connectivity.InputOptions"
}

type TtyResizeOptions struct {
	Cols uint32 `protobuf:"varint,1,opt,name=cols,proto3" json:"cols,omitempty"`
	Rows uint32 `protobuf:"varint,2,opt,name=rows,proto3" json:"rows,omitempty"`
}

func (m *TtyResizeOptions) Reset()      { *m = TtyResizeOptions{} }
func (*TtyResizeOptions) ProtoMessage() {}
func (*TtyResizeOptions) Descriptor() ([]byte, []int) {
	return fileDescriptor_1571bcd24e248579, []int{10}
}
func (m *TtyResizeOptions) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *TtyResizeOptions) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_TtyResizeOptions.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *TtyResizeOptions) XXX_Merge(src proto.Message) {
	xxx_messageInfo_TtyResizeOptions.Merge(m, src)
}
func (m *TtyResizeOptions) XXX_Size() int {
	return m.Size()
}
func (m *TtyResizeOptions) XXX_DiscardUnknown() {
	xxx_messageInfo_TtyResizeOptions.DiscardUnknown(m)
}

var xxx_messageInfo_TtyResizeOptions proto.InternalMessageInfo

func (m *TtyResizeOptions) GetCols() uint32 {
	if m != nil {
		return m.Cols
	}
	return 0
}

func (m *TtyResizeOptions) GetRows() uint32 {
	if m != nil {
		return m.Rows
	}
	return 0
}

func (*TtyResizeOptions) XXX_MessageName() string {
	return "connectivity.TtyResizeOptions"
}
func init() {
	proto.RegisterEnum("connectivity.PodAction", PodAction_name, PodAction_value)
	proto.RegisterType((*NodeCmd)(nil), "connectivity.NodeCmd")
	proto.RegisterType((*PodCmd)(nil), "connectivity.PodCmd")
	proto.RegisterType((*PodV1)(nil), "connectivity.PodV1")
	proto.RegisterType((*CreateOptions)(nil), "connectivity.CreateOptions")
	proto.RegisterType((*DeleteOptions)(nil), "connectivity.DeleteOptions")
	proto.RegisterType((*ListOptions)(nil), "connectivity.ListOptions")
	proto.RegisterType((*LogOptions)(nil), "connectivity.LogOptions")
	proto.RegisterType((*ExecOptions)(nil), "connectivity.ExecOptions")
	proto.RegisterType((*PortForwardOptions)(nil), "connectivity.PortForwardOptions")
	proto.RegisterType((*InputOptions)(nil), "connectivity.InputOptions")
	proto.RegisterType((*TtyResizeOptions)(nil), "connectivity.TtyResizeOptions")
}

func init() { proto.RegisterFile("cmd_detail.proto", fileDescriptor_1571bcd24e248579) }

var fileDescriptor_1571bcd24e248579 = []byte{
	// 695 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x94, 0x94, 0xcb, 0x6e, 0xd3, 0x4c,
	0x14, 0xc7, 0xed, 0xa6, 0x49, 0x3f, 0x1f, 0xdb, 0xe9, 0x7c, 0x03, 0x12, 0xa1, 0xc0, 0x34, 0xf2,
	0x2a, 0x42, 0x90, 0x2a, 0x65, 0x53, 0x8a, 0x84, 0xe8, 0x05, 0x28, 0x52, 0x05, 0x95, 0x89, 0xba,
	0x8d, 0xdc, 0x99, 0x69, 0x6a, 0xc9, 0xc9, 0x58, 0xf6, 0xa4, 0x17, 0x56, 0x3c, 0x02, 0xaf, 0xc0,
	0x8e, 0x47, 0xe9, 0xb2, 0xcb, 0x2e, 0x69, 0xb2, 0x61, 0xd9, 0x47, 0x40, 0x33, 0x09, 0xf1, 0xa4,
	0xed, 0xa6, 0xbb, 0x73, 0xfe, 0xfe, 0x9f, 0xdf, 0x5c, 0xce, 0xf1, 0x00, 0xa2, 0x3d, 0xd6, 0x61,
	0x5c, 0x46, 0x71, 0xd2, 0x4c, 0x33, 0x21, 0x05, 0xf6, 0xa8, 0xe8, 0xf7, 0x39, 0x95, 0xf1, 0x71,
	0x2c, 0xcf, 0x96, 0x5e, 0x76, 0x63, 0x79, 0x34, 0x38, 0x68, 0x52, 0xd1, 0x5b, 0xe9, 0x8a, 0xae,
	0x58, 0xd1, 0xa6, 0x83, 0xc1, 0xa1, 0xce, 0x74, 0xa2, 0xa3, 0x71, 0x71, 0xe0, 0xc0, 0xc2, 0x67,
	0xc1, 0xf8, 0x56, 0x8f, 0x05, 0x3f, 0xcb, 0x50, 0xd9, 0x13, 0x6c, 0xab, 0xc7, 0xf0, 0x53, 0x70,
	0xfa, 0x51, 0x8f, 0xe7, 0x69, 0x44, 0x79, 0xcd, 0xae, 0xdb, 0x0d, 0x27, 0x2c, 0x04, 0x8c, 0x61,
	0x5e, 0x25, 0xb5, 0x39, 0xfd, 0x41, 0xc7, 0x78, 0x05, 0x2a, 0x11, 0x95, 0xb1, 0xe8, 0xd7, 0x4a,
	0x75, 0xbb, 0x51, 0x5d, 0x7d, 0xd4, 0x34, 0x77, 0xd5, 0xdc, 0x13, 0x6c, 0x43, 0x7f, 0x0e, 0x27,
	0x36, 0xbc, 0x0d, 0x55, 0x9a, 0xf1, 0x48, 0xf2, 0x8e, 0x48, 0x95, 0x90, 0xd7, 0xdc, 0xba, 0xdd,
	0x70, 0x57, 0x9f, 0xcc, 0x16, 0x6e, 0x69, 0xcf, 0x97, 0xb1, 0x65, 0xc7, 0x0a, 0x7d, 0x6a, 0x0a,
	0x8a, 0xc2, 0x78, 0xc2, 0x0d, 0x8a, 0x77, 0x17, 0x65, 0x5b, 0x7b, 0x0c, 0x0a, 0x33, 0x05, 0xfc,
	0x16, 0xbc, 0x24, 0xce, 0xe5, 0x94, 0xe1, 0x6b, 0xc6, 0xe3, 0x59, 0xc6, 0x6e, 0x9c, 0xcb, 0x82,
	0xe0, 0x26, 0x45, 0x8a, 0xdf, 0x80, 0x9b, 0x88, 0xee, 0xb4, 0xbc, 0xaa, 0xcb, 0x6b, 0x37, 0xca,
	0x45, 0xb7, 0xa8, 0x86, 0x64, 0x9a, 0xa9, 0xc5, 0xf9, 0x29, 0xa7, 0xd3, 0xea, 0xc5, 0xbb, 0x16,
	0x7f, 0x7f, 0xca, 0xa9, 0xb1, 0x38, 0x2f, 0x52, 0xdc, 0x86, 0x87, 0xa9, 0xc8, 0x64, 0xe7, 0x50,
	0x64, 0x27, 0x51, 0xc6, 0xa6, 0x1c, 0xa4, 0x39, 0xf5, 0x9b, 0x7d, 0xc8, 0xe4, 0x87, 0xb1, 0xb1,
	0xc0, 0xe1, 0xf4, 0x96, 0x8a, 0x37, 0xc0, 0x8f, 0xfb, 0xe9, 0xa0, 0xb8, 0x93, 0xff, 0x35, 0x6e,
	0x69, 0x16, 0xf7, 0x49, 0x59, 0x0a, 0x90, 0x17, 0x1b, 0x39, 0xfe, 0x08, 0xd5, 0x8c, 0xe7, 0xf1,
	0xb7, 0xa2, 0x37, 0x58, 0x33, 0xc8, 0x2c, 0xa3, 0x2d, 0xcf, 0x42, 0x6d, 0x33, 0xda, 0x93, 0x99,
	0xc2, 0xa6, 0x03, 0x0b, 0x13, 0x42, 0xb0, 0x0e, 0xe5, 0x3d, 0xc1, 0xf6, 0x5b, 0x18, 0x41, 0x29,
	0x15, 0x4c, 0xcf, 0xa6, 0x17, 0xaa, 0x10, 0x2f, 0x83, 0x9b, 0x0e, 0x92, 0xa4, 0x93, 0x73, 0x9a,
	0x71, 0x59, 0x9b, 0xab, 0x97, 0x1a, 0x5e, 0x08, 0x4a, 0xfa, 0xaa, 0x95, 0x60, 0x1b, 0xfc, 0x99,
	0x69, 0xc2, 0x2f, 0xa0, 0x92, 0x0a, 0xd6, 0x39, 0x6e, 0x69, 0x8c, 0xbb, 0xfa, 0xe0, 0xd6, 0xcc,
	0xee, 0xb7, 0x76, 0xac, 0xb0, 0x9c, 0xaa, 0x60, 0xb3, 0xac, 0x57, 0x0c, 0x9a, 0xe0, 0xcf, 0x4c,
	0x13, 0x7e, 0x06, 0xd0, 0xcd, 0x22, 0xca, 0x3b, 0x32, 0xee, 0x8d, 0x7f, 0x96, 0x52, 0xe8, 0x68,
	0xa5, 0x1d, 0xf7, 0x78, 0xe0, 0x83, 0x6b, 0x4c, 0x4e, 0xb0, 0x06, 0x50, 0x4c, 0x02, 0x5e, 0x06,
	0x98, 0x9c, 0xec, 0xdf, 0x2e, 0xbc, 0x1d, 0x2b, 0x74, 0x26, 0xda, 0x7e, 0xcb, 0x3c, 0xfa, 0x6b,
	0x70, 0x8d, 0x29, 0xb8, 0x57, 0xe9, 0x3b, 0xc0, 0xb7, 0x1b, 0x7f, 0x2f, 0x42, 0x00, 0x9e, 0xd9,
	0x6b, 0xf5, 0x04, 0xb0, 0x48, 0x46, 0x93, 0xfb, 0xd7, 0x71, 0xb0, 0x0e, 0xe8, 0x66, 0x2f, 0x95,
	0x8f, 0x8a, 0x24, 0xd7, 0x3e, 0x3f, 0xd4, 0xb1, 0xd2, 0x32, 0x71, 0x92, 0xeb, 0xe7, 0xc3, 0x0f,
	0x75, 0xfc, 0xfc, 0x04, 0x9c, 0xe9, 0x13, 0x81, 0x01, 0x2a, 0xe3, 0x46, 0x21, 0x4b, 0xc5, 0xe3,
	0xeb, 0x46, 0x36, 0xfe, 0x0f, 0xe6, 0xd5, 0x55, 0xa2, 0x92, 0x8a, 0xd4, 0x5d, 0x20, 0x57, 0x7d,
	0xdf, 0x90, 0x32, 0xa2, 0x47, 0xc8, 0xc3, 0x0b, 0x50, 0xda, 0x15, 0x5d, 0xe4, 0xe3, 0x45, 0x70,
	0x8d, 0xf3, 0xa2, 0x2a, 0x76, 0xa0, 0xac, 0xb7, 0x8f, 0x16, 0xb1, 0x0f, 0xce, 0x78, 0x8b, 0x6d,
	0x79, 0x86, 0xd0, 0xe6, 0xda, 0xc5, 0x15, 0xb1, 0x2e, 0xaf, 0x88, 0x75, 0x7d, 0x45, 0xec, 0xef,
	0x43, 0x62, 0xff, 0x1a, 0x12, 0xfb, 0x7c, 0x48, 0xec, 0x8b, 0x21, 0xb1, 0x7f, 0x0f, 0x89, 0xfd,
	0x67, 0x48, 0xac, 0xeb, 0x21, 0xb1, 0x7f, 0x8c, 0x88, 0x75, 0x3e, 0x22, 0xf6, 0xc5, 0x88, 0x58,
	0x97, 0x23, 0x62, 0x1d, 0x54, 0xf4, 0x03, 0xfa, 0xea, 0x6f, 0x00, 0x00, 0x00, 0xff, 0xff, 0x14,
	0x4d, 0xfb, 0x9d, 0x91, 0x05, 0x00, 0x00,
}

func (x PodAction) String() string {
	s, ok := PodAction_name[int32(x)]
	if ok {
		return s
	}
	return strconv.Itoa(int(x))
}
func (this *NodeCmd) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*NodeCmd)
	if !ok {
		that2, ok := that.(NodeCmd)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	return true
}
func (this *PodCmd) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*PodCmd)
	if !ok {
		that2, ok := that.(PodCmd)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.Namespace != that1.Namespace {
		return false
	}
	if this.Name != that1.Name {
		return false
	}
	if this.Action != that1.Action {
		return false
	}
	if that1.Options == nil {
		if this.Options != nil {
			return false
		}
	} else if this.Options == nil {
		return false
	} else if !this.Options.Equal(that1.Options) {
		return false
	}
	return true
}
func (this *PodCmd_CreateOptions) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*PodCmd_CreateOptions)
	if !ok {
		that2, ok := that.(PodCmd_CreateOptions)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.CreateOptions.Equal(that1.CreateOptions) {
		return false
	}
	return true
}
func (this *PodCmd_DeleteOptions) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*PodCmd_DeleteOptions)
	if !ok {
		that2, ok := that.(PodCmd_DeleteOptions)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.DeleteOptions.Equal(that1.DeleteOptions) {
		return false
	}
	return true
}
func (this *PodCmd_ListOptions) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*PodCmd_ListOptions)
	if !ok {
		that2, ok := that.(PodCmd_ListOptions)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.ListOptions.Equal(that1.ListOptions) {
		return false
	}
	return true
}
func (this *PodCmd_LogOptions) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*PodCmd_LogOptions)
	if !ok {
		that2, ok := that.(PodCmd_LogOptions)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.LogOptions.Equal(that1.LogOptions) {
		return false
	}
	return true
}
func (this *PodCmd_ExecOptions) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*PodCmd_ExecOptions)
	if !ok {
		that2, ok := that.(PodCmd_ExecOptions)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.ExecOptions.Equal(that1.ExecOptions) {
		return false
	}
	return true
}
func (this *PodCmd_PortForwardOptions) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*PodCmd_PortForwardOptions)
	if !ok {
		that2, ok := that.(PodCmd_PortForwardOptions)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.PortForwardOptions.Equal(that1.PortForwardOptions) {
		return false
	}
	return true
}
func (this *PodCmd_InputOptions) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*PodCmd_InputOptions)
	if !ok {
		that2, ok := that.(PodCmd_InputOptions)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.InputOptions.Equal(that1.InputOptions) {
		return false
	}
	return true
}
func (this *PodCmd_ResizeOptions) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*PodCmd_ResizeOptions)
	if !ok {
		that2, ok := that.(PodCmd_ResizeOptions)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.ResizeOptions.Equal(that1.ResizeOptions) {
		return false
	}
	return true
}
func (this *PodV1) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*PodV1)
	if !ok {
		that2, ok := that.(PodV1)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !bytes.Equal(this.Pod, that1.Pod) {
		return false
	}
	if len(this.PullSecret) != len(that1.PullSecret) {
		return false
	}
	for i := range this.PullSecret {
		if !bytes.Equal(this.PullSecret[i], that1.PullSecret[i]) {
			return false
		}
	}
	return true
}
func (this *CreateOptions) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*CreateOptions)
	if !ok {
		that2, ok := that.(CreateOptions)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if that1.Pod == nil {
		if this.Pod != nil {
			return false
		}
	} else if this.Pod == nil {
		return false
	} else if !this.Pod.Equal(that1.Pod) {
		return false
	}
	return true
}
func (this *CreateOptions_PodV1) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*CreateOptions_PodV1)
	if !ok {
		that2, ok := that.(CreateOptions_PodV1)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.PodV1.Equal(that1.PodV1) {
		return false
	}
	return true
}
func (this *DeleteOptions) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*DeleteOptions)
	if !ok {
		that2, ok := that.(DeleteOptions)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.GraceTime != that1.GraceTime {
		return false
	}
	return true
}
func (this *ListOptions) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*ListOptions)
	if !ok {
		that2, ok := that.(ListOptions)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	return true
}
func (this *LogOptions) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*LogOptions)
	if !ok {
		that2, ok := that.(LogOptions)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if that1.Options == nil {
		if this.Options != nil {
			return false
		}
	} else if this.Options == nil {
		return false
	} else if !this.Options.Equal(that1.Options) {
		return false
	}
	return true
}
func (this *LogOptions_OptionsV1) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*LogOptions_OptionsV1)
	if !ok {
		that2, ok := that.(LogOptions_OptionsV1)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !bytes.Equal(this.OptionsV1, that1.OptionsV1) {
		return false
	}
	return true
}
func (this *ExecOptions) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*ExecOptions)
	if !ok {
		that2, ok := that.(ExecOptions)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if that1.Options == nil {
		if this.Options != nil {
			return false
		}
	} else if this.Options == nil {
		return false
	} else if !this.Options.Equal(that1.Options) {
		return false
	}
	return true
}
func (this *ExecOptions_OptionsV1) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*ExecOptions_OptionsV1)
	if !ok {
		that2, ok := that.(ExecOptions_OptionsV1)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !bytes.Equal(this.OptionsV1, that1.OptionsV1) {
		return false
	}
	return true
}
func (this *PortForwardOptions) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*PortForwardOptions)
	if !ok {
		that2, ok := that.(PortForwardOptions)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if that1.Options == nil {
		if this.Options != nil {
			return false
		}
	} else if this.Options == nil {
		return false
	} else if !this.Options.Equal(that1.Options) {
		return false
	}
	return true
}
func (this *PortForwardOptions_OptionsV1) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*PortForwardOptions_OptionsV1)
	if !ok {
		that2, ok := that.(PortForwardOptions_OptionsV1)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !bytes.Equal(this.OptionsV1, that1.OptionsV1) {
		return false
	}
	return true
}
func (this *InputOptions) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*InputOptions)
	if !ok {
		that2, ok := that.(InputOptions)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !bytes.Equal(this.Data, that1.Data) {
		return false
	}
	return true
}
func (this *TtyResizeOptions) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*TtyResizeOptions)
	if !ok {
		that2, ok := that.(TtyResizeOptions)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.Cols != that1.Cols {
		return false
	}
	if this.Rows != that1.Rows {
		return false
	}
	return true
}
func (this *NodeCmd) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 4)
	s = append(s, "&connectivity.NodeCmd{")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *PodCmd) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 15)
	s = append(s, "&connectivity.PodCmd{")
	s = append(s, "Namespace: "+fmt.Sprintf("%#v", this.Namespace)+",\n")
	s = append(s, "Name: "+fmt.Sprintf("%#v", this.Name)+",\n")
	s = append(s, "Action: "+fmt.Sprintf("%#v", this.Action)+",\n")
	if this.Options != nil {
		s = append(s, "Options: "+fmt.Sprintf("%#v", this.Options)+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *PodCmd_CreateOptions) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&connectivity.PodCmd_CreateOptions{` +
		`CreateOptions:` + fmt.Sprintf("%#v", this.CreateOptions) + `}`}, ", ")
	return s
}
func (this *PodCmd_DeleteOptions) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&connectivity.PodCmd_DeleteOptions{` +
		`DeleteOptions:` + fmt.Sprintf("%#v", this.DeleteOptions) + `}`}, ", ")
	return s
}
func (this *PodCmd_ListOptions) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&connectivity.PodCmd_ListOptions{` +
		`ListOptions:` + fmt.Sprintf("%#v", this.ListOptions) + `}`}, ", ")
	return s
}
func (this *PodCmd_LogOptions) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&connectivity.PodCmd_LogOptions{` +
		`LogOptions:` + fmt.Sprintf("%#v", this.LogOptions) + `}`}, ", ")
	return s
}
func (this *PodCmd_ExecOptions) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&connectivity.PodCmd_ExecOptions{` +
		`ExecOptions:` + fmt.Sprintf("%#v", this.ExecOptions) + `}`}, ", ")
	return s
}
func (this *PodCmd_PortForwardOptions) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&connectivity.PodCmd_PortForwardOptions{` +
		`PortForwardOptions:` + fmt.Sprintf("%#v", this.PortForwardOptions) + `}`}, ", ")
	return s
}
func (this *PodCmd_InputOptions) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&connectivity.PodCmd_InputOptions{` +
		`InputOptions:` + fmt.Sprintf("%#v", this.InputOptions) + `}`}, ", ")
	return s
}
func (this *PodCmd_ResizeOptions) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&connectivity.PodCmd_ResizeOptions{` +
		`ResizeOptions:` + fmt.Sprintf("%#v", this.ResizeOptions) + `}`}, ", ")
	return s
}
func (this *PodV1) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 6)
	s = append(s, "&connectivity.PodV1{")
	s = append(s, "Pod: "+fmt.Sprintf("%#v", this.Pod)+",\n")
	s = append(s, "PullSecret: "+fmt.Sprintf("%#v", this.PullSecret)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *CreateOptions) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 5)
	s = append(s, "&connectivity.CreateOptions{")
	if this.Pod != nil {
		s = append(s, "Pod: "+fmt.Sprintf("%#v", this.Pod)+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *CreateOptions_PodV1) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&connectivity.CreateOptions_PodV1{` +
		`PodV1:` + fmt.Sprintf("%#v", this.PodV1) + `}`}, ", ")
	return s
}
func (this *DeleteOptions) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 5)
	s = append(s, "&connectivity.DeleteOptions{")
	s = append(s, "GraceTime: "+fmt.Sprintf("%#v", this.GraceTime)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *ListOptions) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 4)
	s = append(s, "&connectivity.ListOptions{")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *LogOptions) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 5)
	s = append(s, "&connectivity.LogOptions{")
	if this.Options != nil {
		s = append(s, "Options: "+fmt.Sprintf("%#v", this.Options)+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *LogOptions_OptionsV1) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&connectivity.LogOptions_OptionsV1{` +
		`OptionsV1:` + fmt.Sprintf("%#v", this.OptionsV1) + `}`}, ", ")
	return s
}
func (this *ExecOptions) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 5)
	s = append(s, "&connectivity.ExecOptions{")
	if this.Options != nil {
		s = append(s, "Options: "+fmt.Sprintf("%#v", this.Options)+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *ExecOptions_OptionsV1) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&connectivity.ExecOptions_OptionsV1{` +
		`OptionsV1:` + fmt.Sprintf("%#v", this.OptionsV1) + `}`}, ", ")
	return s
}
func (this *PortForwardOptions) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 5)
	s = append(s, "&connectivity.PortForwardOptions{")
	if this.Options != nil {
		s = append(s, "Options: "+fmt.Sprintf("%#v", this.Options)+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *PortForwardOptions_OptionsV1) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&connectivity.PortForwardOptions_OptionsV1{` +
		`OptionsV1:` + fmt.Sprintf("%#v", this.OptionsV1) + `}`}, ", ")
	return s
}
func (this *InputOptions) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 5)
	s = append(s, "&connectivity.InputOptions{")
	s = append(s, "Data: "+fmt.Sprintf("%#v", this.Data)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *TtyResizeOptions) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 6)
	s = append(s, "&connectivity.TtyResizeOptions{")
	s = append(s, "Cols: "+fmt.Sprintf("%#v", this.Cols)+",\n")
	s = append(s, "Rows: "+fmt.Sprintf("%#v", this.Rows)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func valueToGoStringCmdDetail(v interface{}, typ string) string {
	rv := reflect.ValueOf(v)
	if rv.IsNil() {
		return "nil"
	}
	pv := reflect.Indirect(rv).Interface()
	return fmt.Sprintf("func(v %v) *%v { return &v } ( %#v )", typ, typ, pv)
}
func (m *NodeCmd) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *NodeCmd) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	return i, nil
}

func (m *PodCmd) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *PodCmd) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Namespace) > 0 {
		dAtA[i] = 0xa
		i++
		i = encodeVarintCmdDetail(dAtA, i, uint64(len(m.Namespace)))
		i += copy(dAtA[i:], m.Namespace)
	}
	if len(m.Name) > 0 {
		dAtA[i] = 0x12
		i++
		i = encodeVarintCmdDetail(dAtA, i, uint64(len(m.Name)))
		i += copy(dAtA[i:], m.Name)
	}
	if m.Action != 0 {
		dAtA[i] = 0x18
		i++
		i = encodeVarintCmdDetail(dAtA, i, uint64(m.Action))
	}
	if m.Options != nil {
		nn1, err := m.Options.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += nn1
	}
	return i, nil
}

func (m *PodCmd_CreateOptions) MarshalTo(dAtA []byte) (int, error) {
	i := 0
	if m.CreateOptions != nil {
		dAtA[i] = 0x5a
		i++
		i = encodeVarintCmdDetail(dAtA, i, uint64(m.CreateOptions.Size()))
		n2, err := m.CreateOptions.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n2
	}
	return i, nil
}
func (m *PodCmd_DeleteOptions) MarshalTo(dAtA []byte) (int, error) {
	i := 0
	if m.DeleteOptions != nil {
		dAtA[i] = 0x62
		i++
		i = encodeVarintCmdDetail(dAtA, i, uint64(m.DeleteOptions.Size()))
		n3, err := m.DeleteOptions.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n3
	}
	return i, nil
}
func (m *PodCmd_ListOptions) MarshalTo(dAtA []byte) (int, error) {
	i := 0
	if m.ListOptions != nil {
		dAtA[i] = 0x6a
		i++
		i = encodeVarintCmdDetail(dAtA, i, uint64(m.ListOptions.Size()))
		n4, err := m.ListOptions.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n4
	}
	return i, nil
}
func (m *PodCmd_LogOptions) MarshalTo(dAtA []byte) (int, error) {
	i := 0
	if m.LogOptions != nil {
		dAtA[i] = 0x72
		i++
		i = encodeVarintCmdDetail(dAtA, i, uint64(m.LogOptions.Size()))
		n5, err := m.LogOptions.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n5
	}
	return i, nil
}
func (m *PodCmd_ExecOptions) MarshalTo(dAtA []byte) (int, error) {
	i := 0
	if m.ExecOptions != nil {
		dAtA[i] = 0x7a
		i++
		i = encodeVarintCmdDetail(dAtA, i, uint64(m.ExecOptions.Size()))
		n6, err := m.ExecOptions.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n6
	}
	return i, nil
}
func (m *PodCmd_PortForwardOptions) MarshalTo(dAtA []byte) (int, error) {
	i := 0
	if m.PortForwardOptions != nil {
		dAtA[i] = 0x82
		i++
		dAtA[i] = 0x1
		i++
		i = encodeVarintCmdDetail(dAtA, i, uint64(m.PortForwardOptions.Size()))
		n7, err := m.PortForwardOptions.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n7
	}
	return i, nil
}
func (m *PodCmd_InputOptions) MarshalTo(dAtA []byte) (int, error) {
	i := 0
	if m.InputOptions != nil {
		dAtA[i] = 0x8a
		i++
		dAtA[i] = 0x1
		i++
		i = encodeVarintCmdDetail(dAtA, i, uint64(m.InputOptions.Size()))
		n8, err := m.InputOptions.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n8
	}
	return i, nil
}
func (m *PodCmd_ResizeOptions) MarshalTo(dAtA []byte) (int, error) {
	i := 0
	if m.ResizeOptions != nil {
		dAtA[i] = 0x92
		i++
		dAtA[i] = 0x1
		i++
		i = encodeVarintCmdDetail(dAtA, i, uint64(m.ResizeOptions.Size()))
		n9, err := m.ResizeOptions.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n9
	}
	return i, nil
}
func (m *PodV1) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *PodV1) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Pod) > 0 {
		dAtA[i] = 0xa
		i++
		i = encodeVarintCmdDetail(dAtA, i, uint64(len(m.Pod)))
		i += copy(dAtA[i:], m.Pod)
	}
	if len(m.PullSecret) > 0 {
		for _, b := range m.PullSecret {
			dAtA[i] = 0x12
			i++
			i = encodeVarintCmdDetail(dAtA, i, uint64(len(b)))
			i += copy(dAtA[i:], b)
		}
	}
	return i, nil
}

func (m *CreateOptions) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *CreateOptions) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Pod != nil {
		nn10, err := m.Pod.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += nn10
	}
	return i, nil
}

func (m *CreateOptions_PodV1) MarshalTo(dAtA []byte) (int, error) {
	i := 0
	if m.PodV1 != nil {
		dAtA[i] = 0xa
		i++
		i = encodeVarintCmdDetail(dAtA, i, uint64(m.PodV1.Size()))
		n11, err := m.PodV1.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n11
	}
	return i, nil
}
func (m *DeleteOptions) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *DeleteOptions) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.GraceTime != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintCmdDetail(dAtA, i, uint64(m.GraceTime))
	}
	return i, nil
}

func (m *ListOptions) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ListOptions) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	return i, nil
}

func (m *LogOptions) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *LogOptions) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Options != nil {
		nn12, err := m.Options.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += nn12
	}
	return i, nil
}

func (m *LogOptions_OptionsV1) MarshalTo(dAtA []byte) (int, error) {
	i := 0
	if m.OptionsV1 != nil {
		dAtA[i] = 0xa
		i++
		i = encodeVarintCmdDetail(dAtA, i, uint64(len(m.OptionsV1)))
		i += copy(dAtA[i:], m.OptionsV1)
	}
	return i, nil
}
func (m *ExecOptions) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ExecOptions) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Options != nil {
		nn13, err := m.Options.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += nn13
	}
	return i, nil
}

func (m *ExecOptions_OptionsV1) MarshalTo(dAtA []byte) (int, error) {
	i := 0
	if m.OptionsV1 != nil {
		dAtA[i] = 0xa
		i++
		i = encodeVarintCmdDetail(dAtA, i, uint64(len(m.OptionsV1)))
		i += copy(dAtA[i:], m.OptionsV1)
	}
	return i, nil
}
func (m *PortForwardOptions) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *PortForwardOptions) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Options != nil {
		nn14, err := m.Options.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += nn14
	}
	return i, nil
}

func (m *PortForwardOptions_OptionsV1) MarshalTo(dAtA []byte) (int, error) {
	i := 0
	if m.OptionsV1 != nil {
		dAtA[i] = 0xa
		i++
		i = encodeVarintCmdDetail(dAtA, i, uint64(len(m.OptionsV1)))
		i += copy(dAtA[i:], m.OptionsV1)
	}
	return i, nil
}
func (m *InputOptions) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *InputOptions) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Data) > 0 {
		dAtA[i] = 0xa
		i++
		i = encodeVarintCmdDetail(dAtA, i, uint64(len(m.Data)))
		i += copy(dAtA[i:], m.Data)
	}
	return i, nil
}

func (m *TtyResizeOptions) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *TtyResizeOptions) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Cols != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintCmdDetail(dAtA, i, uint64(m.Cols))
	}
	if m.Rows != 0 {
		dAtA[i] = 0x10
		i++
		i = encodeVarintCmdDetail(dAtA, i, uint64(m.Rows))
	}
	return i, nil
}

func encodeVarintCmdDetail(dAtA []byte, offset int, v uint64) int {
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return offset + 1
}
func (m *NodeCmd) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func (m *PodCmd) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Namespace)
	if l > 0 {
		n += 1 + l + sovCmdDetail(uint64(l))
	}
	l = len(m.Name)
	if l > 0 {
		n += 1 + l + sovCmdDetail(uint64(l))
	}
	if m.Action != 0 {
		n += 1 + sovCmdDetail(uint64(m.Action))
	}
	if m.Options != nil {
		n += m.Options.Size()
	}
	return n
}

func (m *PodCmd_CreateOptions) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.CreateOptions != nil {
		l = m.CreateOptions.Size()
		n += 1 + l + sovCmdDetail(uint64(l))
	}
	return n
}
func (m *PodCmd_DeleteOptions) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.DeleteOptions != nil {
		l = m.DeleteOptions.Size()
		n += 1 + l + sovCmdDetail(uint64(l))
	}
	return n
}
func (m *PodCmd_ListOptions) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.ListOptions != nil {
		l = m.ListOptions.Size()
		n += 1 + l + sovCmdDetail(uint64(l))
	}
	return n
}
func (m *PodCmd_LogOptions) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.LogOptions != nil {
		l = m.LogOptions.Size()
		n += 1 + l + sovCmdDetail(uint64(l))
	}
	return n
}
func (m *PodCmd_ExecOptions) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.ExecOptions != nil {
		l = m.ExecOptions.Size()
		n += 1 + l + sovCmdDetail(uint64(l))
	}
	return n
}
func (m *PodCmd_PortForwardOptions) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.PortForwardOptions != nil {
		l = m.PortForwardOptions.Size()
		n += 2 + l + sovCmdDetail(uint64(l))
	}
	return n
}
func (m *PodCmd_InputOptions) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.InputOptions != nil {
		l = m.InputOptions.Size()
		n += 2 + l + sovCmdDetail(uint64(l))
	}
	return n
}
func (m *PodCmd_ResizeOptions) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.ResizeOptions != nil {
		l = m.ResizeOptions.Size()
		n += 2 + l + sovCmdDetail(uint64(l))
	}
	return n
}
func (m *PodV1) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Pod)
	if l > 0 {
		n += 1 + l + sovCmdDetail(uint64(l))
	}
	if len(m.PullSecret) > 0 {
		for _, b := range m.PullSecret {
			l = len(b)
			n += 1 + l + sovCmdDetail(uint64(l))
		}
	}
	return n
}

func (m *CreateOptions) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Pod != nil {
		n += m.Pod.Size()
	}
	return n
}

func (m *CreateOptions_PodV1) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.PodV1 != nil {
		l = m.PodV1.Size()
		n += 1 + l + sovCmdDetail(uint64(l))
	}
	return n
}
func (m *DeleteOptions) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.GraceTime != 0 {
		n += 1 + sovCmdDetail(uint64(m.GraceTime))
	}
	return n
}

func (m *ListOptions) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func (m *LogOptions) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Options != nil {
		n += m.Options.Size()
	}
	return n
}

func (m *LogOptions_OptionsV1) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.OptionsV1 != nil {
		l = len(m.OptionsV1)
		n += 1 + l + sovCmdDetail(uint64(l))
	}
	return n
}
func (m *ExecOptions) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Options != nil {
		n += m.Options.Size()
	}
	return n
}

func (m *ExecOptions_OptionsV1) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.OptionsV1 != nil {
		l = len(m.OptionsV1)
		n += 1 + l + sovCmdDetail(uint64(l))
	}
	return n
}
func (m *PortForwardOptions) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Options != nil {
		n += m.Options.Size()
	}
	return n
}

func (m *PortForwardOptions_OptionsV1) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.OptionsV1 != nil {
		l = len(m.OptionsV1)
		n += 1 + l + sovCmdDetail(uint64(l))
	}
	return n
}
func (m *InputOptions) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Data)
	if l > 0 {
		n += 1 + l + sovCmdDetail(uint64(l))
	}
	return n
}

func (m *TtyResizeOptions) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Cols != 0 {
		n += 1 + sovCmdDetail(uint64(m.Cols))
	}
	if m.Rows != 0 {
		n += 1 + sovCmdDetail(uint64(m.Rows))
	}
	return n
}

func sovCmdDetail(x uint64) (n int) {
	for {
		n++
		x >>= 7
		if x == 0 {
			break
		}
	}
	return n
}
func sozCmdDetail(x uint64) (n int) {
	return sovCmdDetail(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (this *NodeCmd) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&NodeCmd{`,
		`}`,
	}, "")
	return s
}
func (this *PodCmd) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&PodCmd{`,
		`Namespace:` + fmt.Sprintf("%v", this.Namespace) + `,`,
		`Name:` + fmt.Sprintf("%v", this.Name) + `,`,
		`Action:` + fmt.Sprintf("%v", this.Action) + `,`,
		`Options:` + fmt.Sprintf("%v", this.Options) + `,`,
		`}`,
	}, "")
	return s
}
func (this *PodCmd_CreateOptions) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&PodCmd_CreateOptions{`,
		`CreateOptions:` + strings.Replace(fmt.Sprintf("%v", this.CreateOptions), "CreateOptions", "CreateOptions", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *PodCmd_DeleteOptions) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&PodCmd_DeleteOptions{`,
		`DeleteOptions:` + strings.Replace(fmt.Sprintf("%v", this.DeleteOptions), "DeleteOptions", "DeleteOptions", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *PodCmd_ListOptions) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&PodCmd_ListOptions{`,
		`ListOptions:` + strings.Replace(fmt.Sprintf("%v", this.ListOptions), "ListOptions", "ListOptions", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *PodCmd_LogOptions) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&PodCmd_LogOptions{`,
		`LogOptions:` + strings.Replace(fmt.Sprintf("%v", this.LogOptions), "LogOptions", "LogOptions", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *PodCmd_ExecOptions) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&PodCmd_ExecOptions{`,
		`ExecOptions:` + strings.Replace(fmt.Sprintf("%v", this.ExecOptions), "ExecOptions", "ExecOptions", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *PodCmd_PortForwardOptions) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&PodCmd_PortForwardOptions{`,
		`PortForwardOptions:` + strings.Replace(fmt.Sprintf("%v", this.PortForwardOptions), "PortForwardOptions", "PortForwardOptions", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *PodCmd_InputOptions) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&PodCmd_InputOptions{`,
		`InputOptions:` + strings.Replace(fmt.Sprintf("%v", this.InputOptions), "InputOptions", "InputOptions", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *PodCmd_ResizeOptions) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&PodCmd_ResizeOptions{`,
		`ResizeOptions:` + strings.Replace(fmt.Sprintf("%v", this.ResizeOptions), "TtyResizeOptions", "TtyResizeOptions", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *PodV1) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&PodV1{`,
		`Pod:` + fmt.Sprintf("%v", this.Pod) + `,`,
		`PullSecret:` + fmt.Sprintf("%v", this.PullSecret) + `,`,
		`}`,
	}, "")
	return s
}
func (this *CreateOptions) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&CreateOptions{`,
		`Pod:` + fmt.Sprintf("%v", this.Pod) + `,`,
		`}`,
	}, "")
	return s
}
func (this *CreateOptions_PodV1) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&CreateOptions_PodV1{`,
		`PodV1:` + strings.Replace(fmt.Sprintf("%v", this.PodV1), "PodV1", "PodV1", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *DeleteOptions) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&DeleteOptions{`,
		`GraceTime:` + fmt.Sprintf("%v", this.GraceTime) + `,`,
		`}`,
	}, "")
	return s
}
func (this *ListOptions) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&ListOptions{`,
		`}`,
	}, "")
	return s
}
func (this *LogOptions) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&LogOptions{`,
		`Options:` + fmt.Sprintf("%v", this.Options) + `,`,
		`}`,
	}, "")
	return s
}
func (this *LogOptions_OptionsV1) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&LogOptions_OptionsV1{`,
		`OptionsV1:` + fmt.Sprintf("%v", this.OptionsV1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *ExecOptions) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&ExecOptions{`,
		`Options:` + fmt.Sprintf("%v", this.Options) + `,`,
		`}`,
	}, "")
	return s
}
func (this *ExecOptions_OptionsV1) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&ExecOptions_OptionsV1{`,
		`OptionsV1:` + fmt.Sprintf("%v", this.OptionsV1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *PortForwardOptions) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&PortForwardOptions{`,
		`Options:` + fmt.Sprintf("%v", this.Options) + `,`,
		`}`,
	}, "")
	return s
}
func (this *PortForwardOptions_OptionsV1) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&PortForwardOptions_OptionsV1{`,
		`OptionsV1:` + fmt.Sprintf("%v", this.OptionsV1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *InputOptions) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&InputOptions{`,
		`Data:` + fmt.Sprintf("%v", this.Data) + `,`,
		`}`,
	}, "")
	return s
}
func (this *TtyResizeOptions) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&TtyResizeOptions{`,
		`Cols:` + fmt.Sprintf("%v", this.Cols) + `,`,
		`Rows:` + fmt.Sprintf("%v", this.Rows) + `,`,
		`}`,
	}, "")
	return s
}
func valueToStringCmdDetail(v interface{}) string {
	rv := reflect.ValueOf(v)
	if rv.IsNil() {
		return "nil"
	}
	pv := reflect.Indirect(rv).Interface()
	return fmt.Sprintf("*%v", pv)
}
func (m *NodeCmd) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowCmdDetail
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: NodeCmd: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: NodeCmd: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipCmdDetail(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthCmdDetail
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthCmdDetail
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *PodCmd) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowCmdDetail
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: PodCmd: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: PodCmd: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Namespace", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCmdDetail
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthCmdDetail
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthCmdDetail
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Namespace = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Name", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCmdDetail
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthCmdDetail
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthCmdDetail
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Name = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Action", wireType)
			}
			m.Action = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCmdDetail
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Action |= PodAction(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 11:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field CreateOptions", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCmdDetail
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthCmdDetail
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthCmdDetail
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &CreateOptions{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.Options = &PodCmd_CreateOptions{v}
			iNdEx = postIndex
		case 12:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field DeleteOptions", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCmdDetail
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthCmdDetail
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthCmdDetail
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &DeleteOptions{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.Options = &PodCmd_DeleteOptions{v}
			iNdEx = postIndex
		case 13:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ListOptions", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCmdDetail
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthCmdDetail
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthCmdDetail
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &ListOptions{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.Options = &PodCmd_ListOptions{v}
			iNdEx = postIndex
		case 14:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field LogOptions", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCmdDetail
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthCmdDetail
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthCmdDetail
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &LogOptions{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.Options = &PodCmd_LogOptions{v}
			iNdEx = postIndex
		case 15:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ExecOptions", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCmdDetail
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthCmdDetail
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthCmdDetail
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &ExecOptions{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.Options = &PodCmd_ExecOptions{v}
			iNdEx = postIndex
		case 16:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field PortForwardOptions", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCmdDetail
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthCmdDetail
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthCmdDetail
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &PortForwardOptions{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.Options = &PodCmd_PortForwardOptions{v}
			iNdEx = postIndex
		case 17:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field InputOptions", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCmdDetail
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthCmdDetail
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthCmdDetail
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &InputOptions{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.Options = &PodCmd_InputOptions{v}
			iNdEx = postIndex
		case 18:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ResizeOptions", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCmdDetail
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthCmdDetail
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthCmdDetail
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &TtyResizeOptions{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.Options = &PodCmd_ResizeOptions{v}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipCmdDetail(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthCmdDetail
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthCmdDetail
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *PodV1) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowCmdDetail
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: PodV1: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: PodV1: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Pod", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCmdDetail
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthCmdDetail
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthCmdDetail
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Pod = append(m.Pod[:0], dAtA[iNdEx:postIndex]...)
			if m.Pod == nil {
				m.Pod = []byte{}
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field PullSecret", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCmdDetail
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthCmdDetail
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthCmdDetail
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.PullSecret = append(m.PullSecret, make([]byte, postIndex-iNdEx))
			copy(m.PullSecret[len(m.PullSecret)-1], dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipCmdDetail(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthCmdDetail
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthCmdDetail
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *CreateOptions) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowCmdDetail
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: CreateOptions: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: CreateOptions: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field PodV1", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCmdDetail
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthCmdDetail
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthCmdDetail
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &PodV1{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.Pod = &CreateOptions_PodV1{v}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipCmdDetail(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthCmdDetail
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthCmdDetail
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *DeleteOptions) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowCmdDetail
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: DeleteOptions: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: DeleteOptions: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field GraceTime", wireType)
			}
			m.GraceTime = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCmdDetail
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.GraceTime |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipCmdDetail(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthCmdDetail
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthCmdDetail
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ListOptions) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowCmdDetail
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ListOptions: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ListOptions: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipCmdDetail(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthCmdDetail
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthCmdDetail
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *LogOptions) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowCmdDetail
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: LogOptions: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: LogOptions: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field OptionsV1", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCmdDetail
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthCmdDetail
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthCmdDetail
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := make([]byte, postIndex-iNdEx)
			copy(v, dAtA[iNdEx:postIndex])
			m.Options = &LogOptions_OptionsV1{v}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipCmdDetail(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthCmdDetail
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthCmdDetail
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ExecOptions) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowCmdDetail
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ExecOptions: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ExecOptions: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field OptionsV1", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCmdDetail
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthCmdDetail
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthCmdDetail
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := make([]byte, postIndex-iNdEx)
			copy(v, dAtA[iNdEx:postIndex])
			m.Options = &ExecOptions_OptionsV1{v}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipCmdDetail(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthCmdDetail
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthCmdDetail
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *PortForwardOptions) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowCmdDetail
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: PortForwardOptions: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: PortForwardOptions: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field OptionsV1", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCmdDetail
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthCmdDetail
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthCmdDetail
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := make([]byte, postIndex-iNdEx)
			copy(v, dAtA[iNdEx:postIndex])
			m.Options = &PortForwardOptions_OptionsV1{v}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipCmdDetail(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthCmdDetail
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthCmdDetail
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *InputOptions) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowCmdDetail
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: InputOptions: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: InputOptions: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Data", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCmdDetail
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthCmdDetail
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthCmdDetail
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Data = append(m.Data[:0], dAtA[iNdEx:postIndex]...)
			if m.Data == nil {
				m.Data = []byte{}
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipCmdDetail(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthCmdDetail
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthCmdDetail
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *TtyResizeOptions) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowCmdDetail
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: TtyResizeOptions: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: TtyResizeOptions: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Cols", wireType)
			}
			m.Cols = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCmdDetail
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Cols |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Rows", wireType)
			}
			m.Rows = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCmdDetail
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Rows |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipCmdDetail(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthCmdDetail
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthCmdDetail
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipCmdDetail(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowCmdDetail
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowCmdDetail
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
			return iNdEx, nil
		case 1:
			iNdEx += 8
			return iNdEx, nil
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowCmdDetail
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthCmdDetail
			}
			iNdEx += length
			if iNdEx < 0 {
				return 0, ErrInvalidLengthCmdDetail
			}
			return iNdEx, nil
		case 3:
			for {
				var innerWire uint64
				var start int = iNdEx
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return 0, ErrIntOverflowCmdDetail
					}
					if iNdEx >= l {
						return 0, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					innerWire |= (uint64(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				innerWireType := int(innerWire & 0x7)
				if innerWireType == 4 {
					break
				}
				next, err := skipCmdDetail(dAtA[start:])
				if err != nil {
					return 0, err
				}
				iNdEx = start + next
				if iNdEx < 0 {
					return 0, ErrInvalidLengthCmdDetail
				}
			}
			return iNdEx, nil
		case 4:
			return iNdEx, nil
		case 5:
			iNdEx += 4
			return iNdEx, nil
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
	}
	panic("unreachable")
}

var (
	ErrInvalidLengthCmdDetail = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowCmdDetail   = fmt.Errorf("proto: integer overflow")
)
