// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: msg_detail.proto

package connectivity

import (
	bytes "bytes"
	fmt "fmt"
	_ "github.com/gogo/protobuf/gogoproto"
	proto "github.com/gogo/protobuf/proto"
	io "io"
	math "math"
	reflect "reflect"
	strconv "strconv"
	strings "strings"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion2 // please upgrade the proto package

type Data_Kind int32

const (
	STDOUT Data_Kind = 0
	STDERR Data_Kind = 1
	OTHER  Data_Kind = 2
)

var Data_Kind_name = map[int32]string{
	0: "STDOUT",
	1: "STDERR",
	2: "OTHER",
}

var Data_Kind_value = map[string]int32{
	"STDOUT": 0,
	"STDERR": 1,
	"OTHER":  2,
}

func (Data_Kind) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_97b3080873330fb4, []int{2, 0}
}

type Node struct {
	// Types that are valid to be assigned to Node:
	//	*Node_NodeV1
	Node isNode_Node `protobuf_oneof:"node"`
}

func (m *Node) Reset()      { *m = Node{} }
func (*Node) ProtoMessage() {}
func (*Node) Descriptor() ([]byte, []int) {
	return fileDescriptor_97b3080873330fb4, []int{0}
}
func (m *Node) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Node) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Node.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *Node) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Node.Merge(m, src)
}
func (m *Node) XXX_Size() int {
	return m.Size()
}
func (m *Node) XXX_DiscardUnknown() {
	xxx_messageInfo_Node.DiscardUnknown(m)
}

var xxx_messageInfo_Node proto.InternalMessageInfo

type isNode_Node interface {
	isNode_Node()
	Equal(interface{}) bool
	MarshalTo([]byte) (int, error)
	Size() int
}

type Node_NodeV1 struct {
	NodeV1 []byte `protobuf:"bytes,1,opt,name=node_v1,json=nodeV1,proto3,oneof"`
}

func (*Node_NodeV1) isNode_Node() {}

func (m *Node) GetNode() isNode_Node {
	if m != nil {
		return m.Node
	}
	return nil
}

func (m *Node) GetNodeV1() []byte {
	if x, ok := m.GetNode().(*Node_NodeV1); ok {
		return x.NodeV1
	}
	return nil
}

// XXX_OneofFuncs is for the internal use of the proto package.
func (*Node) XXX_OneofFuncs() (func(msg proto.Message, b *proto.Buffer) error, func(msg proto.Message, tag, wire int, b *proto.Buffer) (bool, error), func(msg proto.Message) (n int), []interface{}) {
	return _Node_OneofMarshaler, _Node_OneofUnmarshaler, _Node_OneofSizer, []interface{}{
		(*Node_NodeV1)(nil),
	}
}

func _Node_OneofMarshaler(msg proto.Message, b *proto.Buffer) error {
	m := msg.(*Node)
	// node
	switch x := m.Node.(type) {
	case *Node_NodeV1:
		_ = b.EncodeVarint(1<<3 | proto.WireBytes)
		_ = b.EncodeRawBytes(x.NodeV1)
	case nil:
	default:
		return fmt.Errorf("Node.Node has unexpected type %T", x)
	}
	return nil
}

func _Node_OneofUnmarshaler(msg proto.Message, tag, wire int, b *proto.Buffer) (bool, error) {
	m := msg.(*Node)
	switch tag {
	case 1: // node.node_v1
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		x, err := b.DecodeRawBytes(true)
		m.Node = &Node_NodeV1{x}
		return true, err
	default:
		return false, nil
	}
}

func _Node_OneofSizer(msg proto.Message) (n int) {
	m := msg.(*Node)
	// node
	switch x := m.Node.(type) {
	case *Node_NodeV1:
		n += 1 // tag and wire
		n += proto.SizeVarint(uint64(len(x.NodeV1)))
		n += len(x.NodeV1)
	case nil:
	default:
		panic(fmt.Sprintf("proto: unexpected type %T in oneof", x))
	}
	return n
}

func (*Node) XXX_MessageName() string {
	return "connectivity.Node"
}

type Pod struct {
	Uid string `protobuf:"bytes,1,opt,name=uid,proto3" json:"uid,omitempty"`
	Ip  string `protobuf:"bytes,2,opt,name=ip,proto3" json:"ip,omitempty"`
	// Types that are valid to be assigned to SandboxStatus:
	//	*Pod_SandboxV1Alpha2
	SandboxStatus isPod_SandboxStatus `protobuf_oneof:"sandbox_status"`
	// Types that are valid to be assigned to ContainerStatus:
	//	*Pod_ContainerV1Alpha2
	ContainerStatus isPod_ContainerStatus `protobuf_oneof:"container_status"`
}

func (m *Pod) Reset()      { *m = Pod{} }
func (*Pod) ProtoMessage() {}
func (*Pod) Descriptor() ([]byte, []int) {
	return fileDescriptor_97b3080873330fb4, []int{1}
}
func (m *Pod) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Pod) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Pod.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *Pod) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Pod.Merge(m, src)
}
func (m *Pod) XXX_Size() int {
	return m.Size()
}
func (m *Pod) XXX_DiscardUnknown() {
	xxx_messageInfo_Pod.DiscardUnknown(m)
}

var xxx_messageInfo_Pod proto.InternalMessageInfo

type isPod_SandboxStatus interface {
	isPod_SandboxStatus()
	Equal(interface{}) bool
	MarshalTo([]byte) (int, error)
	Size() int
}
type isPod_ContainerStatus interface {
	isPod_ContainerStatus()
	Equal(interface{}) bool
	MarshalTo([]byte) (int, error)
	Size() int
}

type Pod_SandboxV1Alpha2 struct {
	SandboxV1Alpha2 []byte `protobuf:"bytes,11,opt,name=sandbox_v1alpha2,json=sandboxV1alpha2,proto3,oneof"`
}
type Pod_ContainerV1Alpha2 struct {
	ContainerV1Alpha2 *Pod_ContainerStatusV1Alpha2 `protobuf:"bytes,21,opt,name=container_v1alpha2,json=containerV1alpha2,proto3,oneof"`
}

func (*Pod_SandboxV1Alpha2) isPod_SandboxStatus()     {}
func (*Pod_ContainerV1Alpha2) isPod_ContainerStatus() {}

func (m *Pod) GetSandboxStatus() isPod_SandboxStatus {
	if m != nil {
		return m.SandboxStatus
	}
	return nil
}
func (m *Pod) GetContainerStatus() isPod_ContainerStatus {
	if m != nil {
		return m.ContainerStatus
	}
	return nil
}

func (m *Pod) GetUid() string {
	if m != nil {
		return m.Uid
	}
	return ""
}

func (m *Pod) GetIp() string {
	if m != nil {
		return m.Ip
	}
	return ""
}

func (m *Pod) GetSandboxV1Alpha2() []byte {
	if x, ok := m.GetSandboxStatus().(*Pod_SandboxV1Alpha2); ok {
		return x.SandboxV1Alpha2
	}
	return nil
}

func (m *Pod) GetContainerV1Alpha2() *Pod_ContainerStatusV1Alpha2 {
	if x, ok := m.GetContainerStatus().(*Pod_ContainerV1Alpha2); ok {
		return x.ContainerV1Alpha2
	}
	return nil
}

// XXX_OneofFuncs is for the internal use of the proto package.
func (*Pod) XXX_OneofFuncs() (func(msg proto.Message, b *proto.Buffer) error, func(msg proto.Message, tag, wire int, b *proto.Buffer) (bool, error), func(msg proto.Message) (n int), []interface{}) {
	return _Pod_OneofMarshaler, _Pod_OneofUnmarshaler, _Pod_OneofSizer, []interface{}{
		(*Pod_SandboxV1Alpha2)(nil),
		(*Pod_ContainerV1Alpha2)(nil),
	}
}

func _Pod_OneofMarshaler(msg proto.Message, b *proto.Buffer) error {
	m := msg.(*Pod)
	// sandbox_status
	switch x := m.SandboxStatus.(type) {
	case *Pod_SandboxV1Alpha2:
		_ = b.EncodeVarint(11<<3 | proto.WireBytes)
		_ = b.EncodeRawBytes(x.SandboxV1Alpha2)
	case nil:
	default:
		return fmt.Errorf("Pod.SandboxStatus has unexpected type %T", x)
	}
	// container_status
	switch x := m.ContainerStatus.(type) {
	case *Pod_ContainerV1Alpha2:
		_ = b.EncodeVarint(21<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.ContainerV1Alpha2); err != nil {
			return err
		}
	case nil:
	default:
		return fmt.Errorf("Pod.ContainerStatus has unexpected type %T", x)
	}
	return nil
}

func _Pod_OneofUnmarshaler(msg proto.Message, tag, wire int, b *proto.Buffer) (bool, error) {
	m := msg.(*Pod)
	switch tag {
	case 11: // sandbox_status.sandbox_v1alpha2
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		x, err := b.DecodeRawBytes(true)
		m.SandboxStatus = &Pod_SandboxV1Alpha2{x}
		return true, err
	case 21: // container_status.container_v1alpha2
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(Pod_ContainerStatusV1Alpha2)
		err := b.DecodeMessage(msg)
		m.ContainerStatus = &Pod_ContainerV1Alpha2{msg}
		return true, err
	default:
		return false, nil
	}
}

func _Pod_OneofSizer(msg proto.Message) (n int) {
	m := msg.(*Pod)
	// sandbox_status
	switch x := m.SandboxStatus.(type) {
	case *Pod_SandboxV1Alpha2:
		n += 1 // tag and wire
		n += proto.SizeVarint(uint64(len(x.SandboxV1Alpha2)))
		n += len(x.SandboxV1Alpha2)
	case nil:
	default:
		panic(fmt.Sprintf("proto: unexpected type %T in oneof", x))
	}
	// container_status
	switch x := m.ContainerStatus.(type) {
	case *Pod_ContainerV1Alpha2:
		s := proto.Size(x.ContainerV1Alpha2)
		n += 2 // tag and wire
		n += proto.SizeVarint(uint64(s))
		n += s
	case nil:
	default:
		panic(fmt.Sprintf("proto: unexpected type %T in oneof", x))
	}
	return n
}

func (*Pod) XXX_MessageName() string {
	return "connectivity.Pod"
}

type Pod_ContainerStatusV1Alpha2 struct {
	V1Alpha2 [][]byte `protobuf:"bytes,1,rep,name=v1alpha2,proto3" json:"v1alpha2,omitempty"`
}

func (m *Pod_ContainerStatusV1Alpha2) Reset()      { *m = Pod_ContainerStatusV1Alpha2{} }
func (*Pod_ContainerStatusV1Alpha2) ProtoMessage() {}
func (*Pod_ContainerStatusV1Alpha2) Descriptor() ([]byte, []int) {
	return fileDescriptor_97b3080873330fb4, []int{1, 0}
}
func (m *Pod_ContainerStatusV1Alpha2) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Pod_ContainerStatusV1Alpha2) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Pod_ContainerStatusV1Alpha2.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *Pod_ContainerStatusV1Alpha2) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Pod_ContainerStatusV1Alpha2.Merge(m, src)
}
func (m *Pod_ContainerStatusV1Alpha2) XXX_Size() int {
	return m.Size()
}
func (m *Pod_ContainerStatusV1Alpha2) XXX_DiscardUnknown() {
	xxx_messageInfo_Pod_ContainerStatusV1Alpha2.DiscardUnknown(m)
}

var xxx_messageInfo_Pod_ContainerStatusV1Alpha2 proto.InternalMessageInfo

func (m *Pod_ContainerStatusV1Alpha2) GetV1Alpha2() [][]byte {
	if m != nil {
		return m.V1Alpha2
	}
	return nil
}

func (*Pod_ContainerStatusV1Alpha2) XXX_MessageName() string {
	return "connectivity.Pod.ContainerStatusV1alpha2"
}

type Data struct {
	Kind Data_Kind `protobuf:"varint,1,opt,name=kind,proto3,enum=connectivity.Data_Kind" json:"kind,omitempty"`
	Data []byte    `protobuf:"bytes,11,opt,name=data,proto3" json:"data,omitempty"`
}

func (m *Data) Reset()      { *m = Data{} }
func (*Data) ProtoMessage() {}
func (*Data) Descriptor() ([]byte, []int) {
	return fileDescriptor_97b3080873330fb4, []int{2}
}
func (m *Data) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Data) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Data.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *Data) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Data.Merge(m, src)
}
func (m *Data) XXX_Size() int {
	return m.Size()
}
func (m *Data) XXX_DiscardUnknown() {
	xxx_messageInfo_Data.DiscardUnknown(m)
}

var xxx_messageInfo_Data proto.InternalMessageInfo

func (m *Data) GetKind() Data_Kind {
	if m != nil {
		return m.Kind
	}
	return STDOUT
}

func (m *Data) GetData() []byte {
	if m != nil {
		return m.Data
	}
	return nil
}

func (*Data) XXX_MessageName() string {
	return "connectivity.Data"
}

type Ack struct {
	// Types that are valid to be assigned to Value:
	//	*Ack_Hash_
	//	*Ack_Error
	Value isAck_Value `protobuf_oneof:"value"`
}

func (m *Ack) Reset()      { *m = Ack{} }
func (*Ack) ProtoMessage() {}
func (*Ack) Descriptor() ([]byte, []int) {
	return fileDescriptor_97b3080873330fb4, []int{3}
}
func (m *Ack) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Ack) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Ack.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *Ack) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Ack.Merge(m, src)
}
func (m *Ack) XXX_Size() int {
	return m.Size()
}
func (m *Ack) XXX_DiscardUnknown() {
	xxx_messageInfo_Ack.DiscardUnknown(m)
}

var xxx_messageInfo_Ack proto.InternalMessageInfo

type isAck_Value interface {
	isAck_Value()
	Equal(interface{}) bool
	MarshalTo([]byte) (int, error)
	Size() int
}

type Ack_Hash_ struct {
	Hash *Ack_Hash `protobuf:"bytes,1,opt,name=hash,proto3,oneof"`
}
type Ack_Error struct {
	Error string `protobuf:"bytes,2,opt,name=error,proto3,oneof"`
}

func (*Ack_Hash_) isAck_Value() {}
func (*Ack_Error) isAck_Value() {}

func (m *Ack) GetValue() isAck_Value {
	if m != nil {
		return m.Value
	}
	return nil
}

func (m *Ack) GetHash() *Ack_Hash {
	if x, ok := m.GetValue().(*Ack_Hash_); ok {
		return x.Hash
	}
	return nil
}

func (m *Ack) GetError() string {
	if x, ok := m.GetValue().(*Ack_Error); ok {
		return x.Error
	}
	return ""
}

// XXX_OneofFuncs is for the internal use of the proto package.
func (*Ack) XXX_OneofFuncs() (func(msg proto.Message, b *proto.Buffer) error, func(msg proto.Message, tag, wire int, b *proto.Buffer) (bool, error), func(msg proto.Message) (n int), []interface{}) {
	return _Ack_OneofMarshaler, _Ack_OneofUnmarshaler, _Ack_OneofSizer, []interface{}{
		(*Ack_Hash_)(nil),
		(*Ack_Error)(nil),
	}
}

func _Ack_OneofMarshaler(msg proto.Message, b *proto.Buffer) error {
	m := msg.(*Ack)
	// value
	switch x := m.Value.(type) {
	case *Ack_Hash_:
		_ = b.EncodeVarint(1<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.Hash); err != nil {
			return err
		}
	case *Ack_Error:
		_ = b.EncodeVarint(2<<3 | proto.WireBytes)
		_ = b.EncodeStringBytes(x.Error)
	case nil:
	default:
		return fmt.Errorf("Ack.Value has unexpected type %T", x)
	}
	return nil
}

func _Ack_OneofUnmarshaler(msg proto.Message, tag, wire int, b *proto.Buffer) (bool, error) {
	m := msg.(*Ack)
	switch tag {
	case 1: // value.hash
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(Ack_Hash)
		err := b.DecodeMessage(msg)
		m.Value = &Ack_Hash_{msg}
		return true, err
	case 2: // value.error
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		x, err := b.DecodeStringBytes()
		m.Value = &Ack_Error{x}
		return true, err
	default:
		return false, nil
	}
}

func _Ack_OneofSizer(msg proto.Message) (n int) {
	m := msg.(*Ack)
	// value
	switch x := m.Value.(type) {
	case *Ack_Hash_:
		s := proto.Size(x.Hash)
		n += 1 // tag and wire
		n += proto.SizeVarint(uint64(s))
		n += s
	case *Ack_Error:
		n += 1 // tag and wire
		n += proto.SizeVarint(uint64(len(x.Error)))
		n += len(x.Error)
	case nil:
	default:
		panic(fmt.Sprintf("proto: unexpected type %T in oneof", x))
	}
	return n
}

func (*Ack) XXX_MessageName() string {
	return "connectivity.Ack"
}

type Ack_Hash struct {
	// Types that are valid to be assigned to Hash:
	//	*Ack_Hash_Sha256
	Hash isAck_Hash_Hash `protobuf_oneof:"hash"`
}

func (m *Ack_Hash) Reset()      { *m = Ack_Hash{} }
func (*Ack_Hash) ProtoMessage() {}
func (*Ack_Hash) Descriptor() ([]byte, []int) {
	return fileDescriptor_97b3080873330fb4, []int{3, 0}
}
func (m *Ack_Hash) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Ack_Hash) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Ack_Hash.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *Ack_Hash) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Ack_Hash.Merge(m, src)
}
func (m *Ack_Hash) XXX_Size() int {
	return m.Size()
}
func (m *Ack_Hash) XXX_DiscardUnknown() {
	xxx_messageInfo_Ack_Hash.DiscardUnknown(m)
}

var xxx_messageInfo_Ack_Hash proto.InternalMessageInfo

type isAck_Hash_Hash interface {
	isAck_Hash_Hash()
	Equal(interface{}) bool
	MarshalTo([]byte) (int, error)
	Size() int
}

type Ack_Hash_Sha256 struct {
	Sha256 string `protobuf:"bytes,1,opt,name=sha256,proto3,oneof"`
}

func (*Ack_Hash_Sha256) isAck_Hash_Hash() {}

func (m *Ack_Hash) GetHash() isAck_Hash_Hash {
	if m != nil {
		return m.Hash
	}
	return nil
}

func (m *Ack_Hash) GetSha256() string {
	if x, ok := m.GetHash().(*Ack_Hash_Sha256); ok {
		return x.Sha256
	}
	return ""
}

// XXX_OneofFuncs is for the internal use of the proto package.
func (*Ack_Hash) XXX_OneofFuncs() (func(msg proto.Message, b *proto.Buffer) error, func(msg proto.Message, tag, wire int, b *proto.Buffer) (bool, error), func(msg proto.Message) (n int), []interface{}) {
	return _Ack_Hash_OneofMarshaler, _Ack_Hash_OneofUnmarshaler, _Ack_Hash_OneofSizer, []interface{}{
		(*Ack_Hash_Sha256)(nil),
	}
}

func _Ack_Hash_OneofMarshaler(msg proto.Message, b *proto.Buffer) error {
	m := msg.(*Ack_Hash)
	// hash
	switch x := m.Hash.(type) {
	case *Ack_Hash_Sha256:
		_ = b.EncodeVarint(1<<3 | proto.WireBytes)
		_ = b.EncodeStringBytes(x.Sha256)
	case nil:
	default:
		return fmt.Errorf("Ack_Hash.Hash has unexpected type %T", x)
	}
	return nil
}

func _Ack_Hash_OneofUnmarshaler(msg proto.Message, tag, wire int, b *proto.Buffer) (bool, error) {
	m := msg.(*Ack_Hash)
	switch tag {
	case 1: // hash.sha256
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		x, err := b.DecodeStringBytes()
		m.Hash = &Ack_Hash_Sha256{x}
		return true, err
	default:
		return false, nil
	}
}

func _Ack_Hash_OneofSizer(msg proto.Message) (n int) {
	m := msg.(*Ack_Hash)
	// hash
	switch x := m.Hash.(type) {
	case *Ack_Hash_Sha256:
		n += 1 // tag and wire
		n += proto.SizeVarint(uint64(len(x.Sha256)))
		n += len(x.Sha256)
	case nil:
	default:
		panic(fmt.Sprintf("proto: unexpected type %T in oneof", x))
	}
	return n
}

func (*Ack_Hash) XXX_MessageName() string {
	return "connectivity.Ack.Hash"
}
func init() {
	proto.RegisterEnum("connectivity.Data_Kind", Data_Kind_name, Data_Kind_value)
	proto.RegisterType((*Node)(nil), "connectivity.Node")
	proto.RegisterType((*Pod)(nil), "connectivity.Pod")
	proto.RegisterType((*Pod_ContainerStatusV1Alpha2)(nil), "connectivity.Pod.ContainerStatusV1alpha2")
	proto.RegisterType((*Data)(nil), "connectivity.Data")
	proto.RegisterType((*Ack)(nil), "connectivity.Ack")
	proto.RegisterType((*Ack_Hash)(nil), "connectivity.Ack.Hash")
}

func init() { proto.RegisterFile("msg_detail.proto", fileDescriptor_97b3080873330fb4) }

var fileDescriptor_97b3080873330fb4 = []byte{
	// 484 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x74, 0x92, 0x41, 0x6f, 0xd3, 0x30,
	0x14, 0xc7, 0xed, 0x36, 0xeb, 0xd8, 0x6b, 0x55, 0x82, 0x25, 0xb6, 0xd2, 0x83, 0x55, 0xf5, 0xd4,
	0x69, 0x90, 0xa9, 0x41, 0x43, 0x5c, 0x17, 0x36, 0x29, 0x12, 0x12, 0x9b, 0xbc, 0xb2, 0x03, 0x97,
	0xca, 0x4d, 0x42, 0x63, 0xb5, 0x8b, 0xab, 0xc4, 0xa9, 0xe0, 0x82, 0xf8, 0x02, 0x48, 0x7c, 0x0c,
	0x3e, 0xca, 0x8e, 0x3d, 0xee, 0x48, 0xd3, 0x0b, 0xc7, 0x7d, 0x04, 0x64, 0xa7, 0xed, 0xd8, 0x81,
	0xdb, 0xff, 0xff, 0xfc, 0xf3, 0x7b, 0x2f, 0xfe, 0x07, 0xec, 0x9b, 0x6c, 0x3c, 0x0c, 0x23, 0xc5,
	0xc5, 0xd4, 0x99, 0xa5, 0x52, 0x49, 0xd2, 0x08, 0x64, 0x92, 0x44, 0x81, 0x12, 0x73, 0xa1, 0xbe,
	0xb6, 0x5f, 0x8d, 0x85, 0x8a, 0xf3, 0x91, 0x13, 0xc8, 0x9b, 0xe3, 0xb1, 0x1c, 0xcb, 0x63, 0x03,
	0x8d, 0xf2, 0xcf, 0xc6, 0x19, 0x63, 0x54, 0x79, 0xb9, 0x7b, 0x08, 0xd6, 0x07, 0x19, 0x46, 0xe4,
	0x05, 0xec, 0x26, 0x32, 0x8c, 0x86, 0xf3, 0x7e, 0x0b, 0x77, 0x70, 0xaf, 0xe1, 0x23, 0x56, 0xd3,
	0x85, 0xeb, 0xbe, 0x57, 0x03, 0x4b, 0xab, 0xee, 0x8f, 0x0a, 0x54, 0x2f, 0x65, 0x48, 0x6c, 0xa8,
	0xe6, 0x22, 0x34, 0xd8, 0x1e, 0xd3, 0x92, 0x34, 0xa1, 0x22, 0x66, 0xad, 0x8a, 0x29, 0x54, 0xc4,
	0x8c, 0x1c, 0x81, 0x9d, 0xf1, 0x24, 0x1c, 0xc9, 0x2f, 0xc3, 0x79, 0x9f, 0x4f, 0x67, 0x31, 0x77,
	0x5b, 0xf5, 0x75, 0xd7, 0xa7, 0xeb, 0x93, 0xeb, 0xf5, 0x01, 0xf9, 0x04, 0x24, 0x90, 0x89, 0xe2,
	0x22, 0x89, 0xd2, 0x07, 0xfc, 0x79, 0x07, 0xf7, 0xea, 0xee, 0xa1, 0xf3, 0xef, 0xb7, 0x39, 0x97,
	0x32, 0x74, 0xde, 0x6d, 0xd8, 0x2b, 0xc5, 0x55, 0x9e, 0x6d, 0xda, 0xf8, 0x98, 0x3d, 0xdb, 0xb6,
	0xd9, 0x14, 0xdb, 0x27, 0x70, 0xf0, 0x1f, 0x9e, 0xb4, 0xe1, 0xc9, 0x76, 0x18, 0xee, 0x54, 0x7b,
	0x0d, 0xb6, 0xf5, 0x9e, 0x0d, 0xcd, 0xcd, 0xfe, 0x99, 0xb9, 0xe5, 0x11, 0xb0, 0x1f, 0x96, 0x2c,
	0x6b, 0xdd, 0x14, 0xac, 0x33, 0xae, 0x38, 0x39, 0x02, 0x6b, 0x22, 0x92, 0xf2, 0x41, 0x9a, 0xee,
	0xc1, 0xe3, 0x95, 0x35, 0xe1, 0xbc, 0x17, 0x49, 0xc8, 0x0c, 0x44, 0x08, 0x58, 0x21, 0x57, 0xbc,
	0x7c, 0x0e, 0x66, 0xb4, 0xce, 0x40, 0x13, 0x04, 0xa0, 0x76, 0x35, 0x38, 0xbb, 0xf8, 0x38, 0xb0,
	0xd1, 0x5a, 0x9f, 0x33, 0x66, 0x63, 0xb2, 0x07, 0x3b, 0x17, 0x03, 0xff, 0x9c, 0xd9, 0x95, 0xee,
	0x37, 0xa8, 0x9e, 0x06, 0x13, 0xf2, 0x12, 0xac, 0x98, 0x67, 0xb1, 0x19, 0x59, 0x77, 0xf7, 0x1f,
	0x8f, 0x3c, 0x0d, 0x26, 0x8e, 0xcf, 0xb3, 0xd8, 0x47, 0xcc, 0x50, 0x64, 0x1f, 0x76, 0xa2, 0x34,
	0x95, 0x69, 0x99, 0x90, 0x8f, 0x58, 0x69, 0xdb, 0x3d, 0xb0, 0x34, 0x47, 0x5a, 0x50, 0xcb, 0x62,
	0xee, 0x9e, 0xbc, 0x29, 0x33, 0xd5, 0xd1, 0x97, 0x5e, 0x47, 0xaf, 0x3b, 0x78, 0xbb, 0xb0, 0x33,
	0xe7, 0xd3, 0x3c, 0xf2, 0xde, 0x2e, 0x96, 0x14, 0xdd, 0x2d, 0x29, 0xba, 0x5f, 0x52, 0xfc, 0xbd,
	0xa0, 0xf8, 0x57, 0x41, 0xf1, 0x6d, 0x41, 0xf1, 0xa2, 0xa0, 0xf8, 0x77, 0x41, 0xf1, 0x9f, 0x82,
	0xa2, 0xfb, 0x82, 0xe2, 0x9f, 0x2b, 0x8a, 0x6e, 0x57, 0x14, 0x2f, 0x56, 0x14, 0xdd, 0xad, 0x28,
	0x1a, 0xd5, 0xcc, 0xff, 0xf6, 0xfa, 0x6f, 0x00, 0x00, 0x00, 0xff, 0xff, 0x08, 0x5b, 0xf1, 0x08,
	0xc0, 0x02, 0x00, 0x00,
}

func (x Data_Kind) String() string {
	s, ok := Data_Kind_name[int32(x)]
	if ok {
		return s
	}
	return strconv.Itoa(int(x))
}
func (this *Node) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*Node)
	if !ok {
		that2, ok := that.(Node)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if that1.Node == nil {
		if this.Node != nil {
			return false
		}
	} else if this.Node == nil {
		return false
	} else if !this.Node.Equal(that1.Node) {
		return false
	}
	return true
}
func (this *Node_NodeV1) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*Node_NodeV1)
	if !ok {
		that2, ok := that.(Node_NodeV1)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !bytes.Equal(this.NodeV1, that1.NodeV1) {
		return false
	}
	return true
}
func (this *Pod) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*Pod)
	if !ok {
		that2, ok := that.(Pod)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.Uid != that1.Uid {
		return false
	}
	if this.Ip != that1.Ip {
		return false
	}
	if that1.SandboxStatus == nil {
		if this.SandboxStatus != nil {
			return false
		}
	} else if this.SandboxStatus == nil {
		return false
	} else if !this.SandboxStatus.Equal(that1.SandboxStatus) {
		return false
	}
	if that1.ContainerStatus == nil {
		if this.ContainerStatus != nil {
			return false
		}
	} else if this.ContainerStatus == nil {
		return false
	} else if !this.ContainerStatus.Equal(that1.ContainerStatus) {
		return false
	}
	return true
}
func (this *Pod_SandboxV1Alpha2) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*Pod_SandboxV1Alpha2)
	if !ok {
		that2, ok := that.(Pod_SandboxV1Alpha2)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !bytes.Equal(this.SandboxV1Alpha2, that1.SandboxV1Alpha2) {
		return false
	}
	return true
}
func (this *Pod_ContainerV1Alpha2) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*Pod_ContainerV1Alpha2)
	if !ok {
		that2, ok := that.(Pod_ContainerV1Alpha2)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.ContainerV1Alpha2.Equal(that1.ContainerV1Alpha2) {
		return false
	}
	return true
}
func (this *Pod_ContainerStatusV1Alpha2) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*Pod_ContainerStatusV1Alpha2)
	if !ok {
		that2, ok := that.(Pod_ContainerStatusV1Alpha2)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if len(this.V1Alpha2) != len(that1.V1Alpha2) {
		return false
	}
	for i := range this.V1Alpha2 {
		if !bytes.Equal(this.V1Alpha2[i], that1.V1Alpha2[i]) {
			return false
		}
	}
	return true
}
func (this *Data) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*Data)
	if !ok {
		that2, ok := that.(Data)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.Kind != that1.Kind {
		return false
	}
	if !bytes.Equal(this.Data, that1.Data) {
		return false
	}
	return true
}
func (this *Ack) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*Ack)
	if !ok {
		that2, ok := that.(Ack)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if that1.Value == nil {
		if this.Value != nil {
			return false
		}
	} else if this.Value == nil {
		return false
	} else if !this.Value.Equal(that1.Value) {
		return false
	}
	return true
}
func (this *Ack_Hash_) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*Ack_Hash_)
	if !ok {
		that2, ok := that.(Ack_Hash_)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.Hash.Equal(that1.Hash) {
		return false
	}
	return true
}
func (this *Ack_Error) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*Ack_Error)
	if !ok {
		that2, ok := that.(Ack_Error)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.Error != that1.Error {
		return false
	}
	return true
}
func (this *Ack_Hash) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*Ack_Hash)
	if !ok {
		that2, ok := that.(Ack_Hash)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if that1.Hash == nil {
		if this.Hash != nil {
			return false
		}
	} else if this.Hash == nil {
		return false
	} else if !this.Hash.Equal(that1.Hash) {
		return false
	}
	return true
}
func (this *Ack_Hash_Sha256) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*Ack_Hash_Sha256)
	if !ok {
		that2, ok := that.(Ack_Hash_Sha256)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.Sha256 != that1.Sha256 {
		return false
	}
	return true
}
func (this *Node) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 5)
	s = append(s, "&connectivity.Node{")
	if this.Node != nil {
		s = append(s, "Node: "+fmt.Sprintf("%#v", this.Node)+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *Node_NodeV1) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&connectivity.Node_NodeV1{` +
		`NodeV1:` + fmt.Sprintf("%#v", this.NodeV1) + `}`}, ", ")
	return s
}
func (this *Pod) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 8)
	s = append(s, "&connectivity.Pod{")
	s = append(s, "Uid: "+fmt.Sprintf("%#v", this.Uid)+",\n")
	s = append(s, "Ip: "+fmt.Sprintf("%#v", this.Ip)+",\n")
	if this.SandboxStatus != nil {
		s = append(s, "SandboxStatus: "+fmt.Sprintf("%#v", this.SandboxStatus)+",\n")
	}
	if this.ContainerStatus != nil {
		s = append(s, "ContainerStatus: "+fmt.Sprintf("%#v", this.ContainerStatus)+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *Pod_SandboxV1Alpha2) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&connectivity.Pod_SandboxV1Alpha2{` +
		`SandboxV1Alpha2:` + fmt.Sprintf("%#v", this.SandboxV1Alpha2) + `}`}, ", ")
	return s
}
func (this *Pod_ContainerV1Alpha2) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&connectivity.Pod_ContainerV1Alpha2{` +
		`ContainerV1Alpha2:` + fmt.Sprintf("%#v", this.ContainerV1Alpha2) + `}`}, ", ")
	return s
}
func (this *Pod_ContainerStatusV1Alpha2) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 5)
	s = append(s, "&connectivity.Pod_ContainerStatusV1Alpha2{")
	s = append(s, "V1Alpha2: "+fmt.Sprintf("%#v", this.V1Alpha2)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *Data) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 6)
	s = append(s, "&connectivity.Data{")
	s = append(s, "Kind: "+fmt.Sprintf("%#v", this.Kind)+",\n")
	s = append(s, "Data: "+fmt.Sprintf("%#v", this.Data)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *Ack) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 6)
	s = append(s, "&connectivity.Ack{")
	if this.Value != nil {
		s = append(s, "Value: "+fmt.Sprintf("%#v", this.Value)+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *Ack_Hash_) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&connectivity.Ack_Hash_{` +
		`Hash:` + fmt.Sprintf("%#v", this.Hash) + `}`}, ", ")
	return s
}
func (this *Ack_Error) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&connectivity.Ack_Error{` +
		`Error:` + fmt.Sprintf("%#v", this.Error) + `}`}, ", ")
	return s
}
func (this *Ack_Hash) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 5)
	s = append(s, "&connectivity.Ack_Hash{")
	if this.Hash != nil {
		s = append(s, "Hash: "+fmt.Sprintf("%#v", this.Hash)+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *Ack_Hash_Sha256) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&connectivity.Ack_Hash_Sha256{` +
		`Sha256:` + fmt.Sprintf("%#v", this.Sha256) + `}`}, ", ")
	return s
}
func valueToGoStringMsgDetail(v interface{}, typ string) string {
	rv := reflect.ValueOf(v)
	if rv.IsNil() {
		return "nil"
	}
	pv := reflect.Indirect(rv).Interface()
	return fmt.Sprintf("func(v %v) *%v { return &v } ( %#v )", typ, typ, pv)
}
func (m *Node) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Node) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Node != nil {
		nn1, err := m.Node.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += nn1
	}
	return i, nil
}

func (m *Node_NodeV1) MarshalTo(dAtA []byte) (int, error) {
	i := 0
	if m.NodeV1 != nil {
		dAtA[i] = 0xa
		i++
		i = encodeVarintMsgDetail(dAtA, i, uint64(len(m.NodeV1)))
		i += copy(dAtA[i:], m.NodeV1)
	}
	return i, nil
}
func (m *Pod) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Pod) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Uid) > 0 {
		dAtA[i] = 0xa
		i++
		i = encodeVarintMsgDetail(dAtA, i, uint64(len(m.Uid)))
		i += copy(dAtA[i:], m.Uid)
	}
	if len(m.Ip) > 0 {
		dAtA[i] = 0x12
		i++
		i = encodeVarintMsgDetail(dAtA, i, uint64(len(m.Ip)))
		i += copy(dAtA[i:], m.Ip)
	}
	if m.SandboxStatus != nil {
		nn2, err := m.SandboxStatus.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += nn2
	}
	if m.ContainerStatus != nil {
		nn3, err := m.ContainerStatus.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += nn3
	}
	return i, nil
}

func (m *Pod_SandboxV1Alpha2) MarshalTo(dAtA []byte) (int, error) {
	i := 0
	if m.SandboxV1Alpha2 != nil {
		dAtA[i] = 0x5a
		i++
		i = encodeVarintMsgDetail(dAtA, i, uint64(len(m.SandboxV1Alpha2)))
		i += copy(dAtA[i:], m.SandboxV1Alpha2)
	}
	return i, nil
}
func (m *Pod_ContainerV1Alpha2) MarshalTo(dAtA []byte) (int, error) {
	i := 0
	if m.ContainerV1Alpha2 != nil {
		dAtA[i] = 0xaa
		i++
		dAtA[i] = 0x1
		i++
		i = encodeVarintMsgDetail(dAtA, i, uint64(m.ContainerV1Alpha2.Size()))
		n4, err := m.ContainerV1Alpha2.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n4
	}
	return i, nil
}
func (m *Pod_ContainerStatusV1Alpha2) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Pod_ContainerStatusV1Alpha2) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.V1Alpha2) > 0 {
		for _, b := range m.V1Alpha2 {
			dAtA[i] = 0xa
			i++
			i = encodeVarintMsgDetail(dAtA, i, uint64(len(b)))
			i += copy(dAtA[i:], b)
		}
	}
	return i, nil
}

func (m *Data) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Data) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Kind != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintMsgDetail(dAtA, i, uint64(m.Kind))
	}
	if len(m.Data) > 0 {
		dAtA[i] = 0x5a
		i++
		i = encodeVarintMsgDetail(dAtA, i, uint64(len(m.Data)))
		i += copy(dAtA[i:], m.Data)
	}
	return i, nil
}

func (m *Ack) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Ack) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Value != nil {
		nn5, err := m.Value.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += nn5
	}
	return i, nil
}

func (m *Ack_Hash_) MarshalTo(dAtA []byte) (int, error) {
	i := 0
	if m.Hash != nil {
		dAtA[i] = 0xa
		i++
		i = encodeVarintMsgDetail(dAtA, i, uint64(m.Hash.Size()))
		n6, err := m.Hash.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n6
	}
	return i, nil
}
func (m *Ack_Error) MarshalTo(dAtA []byte) (int, error) {
	i := 0
	dAtA[i] = 0x12
	i++
	i = encodeVarintMsgDetail(dAtA, i, uint64(len(m.Error)))
	i += copy(dAtA[i:], m.Error)
	return i, nil
}
func (m *Ack_Hash) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Ack_Hash) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Hash != nil {
		nn7, err := m.Hash.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += nn7
	}
	return i, nil
}

func (m *Ack_Hash_Sha256) MarshalTo(dAtA []byte) (int, error) {
	i := 0
	dAtA[i] = 0xa
	i++
	i = encodeVarintMsgDetail(dAtA, i, uint64(len(m.Sha256)))
	i += copy(dAtA[i:], m.Sha256)
	return i, nil
}
func encodeVarintMsgDetail(dAtA []byte, offset int, v uint64) int {
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return offset + 1
}
func (m *Node) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Node != nil {
		n += m.Node.Size()
	}
	return n
}

func (m *Node_NodeV1) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.NodeV1 != nil {
		l = len(m.NodeV1)
		n += 1 + l + sovMsgDetail(uint64(l))
	}
	return n
}
func (m *Pod) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Uid)
	if l > 0 {
		n += 1 + l + sovMsgDetail(uint64(l))
	}
	l = len(m.Ip)
	if l > 0 {
		n += 1 + l + sovMsgDetail(uint64(l))
	}
	if m.SandboxStatus != nil {
		n += m.SandboxStatus.Size()
	}
	if m.ContainerStatus != nil {
		n += m.ContainerStatus.Size()
	}
	return n
}

func (m *Pod_SandboxV1Alpha2) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.SandboxV1Alpha2 != nil {
		l = len(m.SandboxV1Alpha2)
		n += 1 + l + sovMsgDetail(uint64(l))
	}
	return n
}
func (m *Pod_ContainerV1Alpha2) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.ContainerV1Alpha2 != nil {
		l = m.ContainerV1Alpha2.Size()
		n += 2 + l + sovMsgDetail(uint64(l))
	}
	return n
}
func (m *Pod_ContainerStatusV1Alpha2) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.V1Alpha2) > 0 {
		for _, b := range m.V1Alpha2 {
			l = len(b)
			n += 1 + l + sovMsgDetail(uint64(l))
		}
	}
	return n
}

func (m *Data) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Kind != 0 {
		n += 1 + sovMsgDetail(uint64(m.Kind))
	}
	l = len(m.Data)
	if l > 0 {
		n += 1 + l + sovMsgDetail(uint64(l))
	}
	return n
}

func (m *Ack) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Value != nil {
		n += m.Value.Size()
	}
	return n
}

func (m *Ack_Hash_) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Hash != nil {
		l = m.Hash.Size()
		n += 1 + l + sovMsgDetail(uint64(l))
	}
	return n
}
func (m *Ack_Error) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Error)
	n += 1 + l + sovMsgDetail(uint64(l))
	return n
}
func (m *Ack_Hash) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Hash != nil {
		n += m.Hash.Size()
	}
	return n
}

func (m *Ack_Hash_Sha256) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Sha256)
	n += 1 + l + sovMsgDetail(uint64(l))
	return n
}

func sovMsgDetail(x uint64) (n int) {
	for {
		n++
		x >>= 7
		if x == 0 {
			break
		}
	}
	return n
}
func sozMsgDetail(x uint64) (n int) {
	return sovMsgDetail(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (this *Node) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&Node{`,
		`Node:` + fmt.Sprintf("%v", this.Node) + `,`,
		`}`,
	}, "")
	return s
}
func (this *Node_NodeV1) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&Node_NodeV1{`,
		`NodeV1:` + fmt.Sprintf("%v", this.NodeV1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *Pod) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&Pod{`,
		`Uid:` + fmt.Sprintf("%v", this.Uid) + `,`,
		`Ip:` + fmt.Sprintf("%v", this.Ip) + `,`,
		`SandboxStatus:` + fmt.Sprintf("%v", this.SandboxStatus) + `,`,
		`ContainerStatus:` + fmt.Sprintf("%v", this.ContainerStatus) + `,`,
		`}`,
	}, "")
	return s
}
func (this *Pod_SandboxV1Alpha2) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&Pod_SandboxV1Alpha2{`,
		`SandboxV1Alpha2:` + fmt.Sprintf("%v", this.SandboxV1Alpha2) + `,`,
		`}`,
	}, "")
	return s
}
func (this *Pod_ContainerV1Alpha2) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&Pod_ContainerV1Alpha2{`,
		`ContainerV1Alpha2:` + strings.Replace(fmt.Sprintf("%v", this.ContainerV1Alpha2), "Pod_ContainerStatusV1Alpha2", "Pod_ContainerStatusV1Alpha2", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *Pod_ContainerStatusV1Alpha2) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&Pod_ContainerStatusV1Alpha2{`,
		`V1Alpha2:` + fmt.Sprintf("%v", this.V1Alpha2) + `,`,
		`}`,
	}, "")
	return s
}
func (this *Data) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&Data{`,
		`Kind:` + fmt.Sprintf("%v", this.Kind) + `,`,
		`Data:` + fmt.Sprintf("%v", this.Data) + `,`,
		`}`,
	}, "")
	return s
}
func (this *Ack) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&Ack{`,
		`Value:` + fmt.Sprintf("%v", this.Value) + `,`,
		`}`,
	}, "")
	return s
}
func (this *Ack_Hash_) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&Ack_Hash_{`,
		`Hash:` + strings.Replace(fmt.Sprintf("%v", this.Hash), "Ack_Hash", "Ack_Hash", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *Ack_Error) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&Ack_Error{`,
		`Error:` + fmt.Sprintf("%v", this.Error) + `,`,
		`}`,
	}, "")
	return s
}
func (this *Ack_Hash) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&Ack_Hash{`,
		`Hash:` + fmt.Sprintf("%v", this.Hash) + `,`,
		`}`,
	}, "")
	return s
}
func (this *Ack_Hash_Sha256) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&Ack_Hash_Sha256{`,
		`Sha256:` + fmt.Sprintf("%v", this.Sha256) + `,`,
		`}`,
	}, "")
	return s
}
func valueToStringMsgDetail(v interface{}) string {
	rv := reflect.ValueOf(v)
	if rv.IsNil() {
		return "nil"
	}
	pv := reflect.Indirect(rv).Interface()
	return fmt.Sprintf("*%v", pv)
}
func (m *Node) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowMsgDetail
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Node: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Node: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field NodeV1", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMsgDetail
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthMsgDetail
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthMsgDetail
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := make([]byte, postIndex-iNdEx)
			copy(v, dAtA[iNdEx:postIndex])
			m.Node = &Node_NodeV1{v}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipMsgDetail(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthMsgDetail
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthMsgDetail
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *Pod) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowMsgDetail
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Pod: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Pod: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Uid", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMsgDetail
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthMsgDetail
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthMsgDetail
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Uid = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Ip", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMsgDetail
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthMsgDetail
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthMsgDetail
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Ip = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 11:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field SandboxV1Alpha2", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMsgDetail
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthMsgDetail
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthMsgDetail
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := make([]byte, postIndex-iNdEx)
			copy(v, dAtA[iNdEx:postIndex])
			m.SandboxStatus = &Pod_SandboxV1Alpha2{v}
			iNdEx = postIndex
		case 21:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ContainerV1Alpha2", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMsgDetail
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthMsgDetail
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthMsgDetail
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &Pod_ContainerStatusV1Alpha2{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.ContainerStatus = &Pod_ContainerV1Alpha2{v}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipMsgDetail(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthMsgDetail
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthMsgDetail
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *Pod_ContainerStatusV1Alpha2) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowMsgDetail
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ContainerStatusV1alpha2: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ContainerStatusV1alpha2: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field V1Alpha2", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMsgDetail
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthMsgDetail
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthMsgDetail
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.V1Alpha2 = append(m.V1Alpha2, make([]byte, postIndex-iNdEx))
			copy(m.V1Alpha2[len(m.V1Alpha2)-1], dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipMsgDetail(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthMsgDetail
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthMsgDetail
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *Data) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowMsgDetail
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Data: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Data: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Kind", wireType)
			}
			m.Kind = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMsgDetail
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Kind |= Data_Kind(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 11:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Data", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMsgDetail
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthMsgDetail
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthMsgDetail
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Data = append(m.Data[:0], dAtA[iNdEx:postIndex]...)
			if m.Data == nil {
				m.Data = []byte{}
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipMsgDetail(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthMsgDetail
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthMsgDetail
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *Ack) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowMsgDetail
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Ack: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Ack: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Hash", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMsgDetail
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthMsgDetail
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthMsgDetail
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &Ack_Hash{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.Value = &Ack_Hash_{v}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Error", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMsgDetail
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthMsgDetail
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthMsgDetail
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Value = &Ack_Error{string(dAtA[iNdEx:postIndex])}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipMsgDetail(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthMsgDetail
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthMsgDetail
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *Ack_Hash) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowMsgDetail
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Hash: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Hash: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Sha256", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMsgDetail
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthMsgDetail
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthMsgDetail
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Hash = &Ack_Hash_Sha256{string(dAtA[iNdEx:postIndex])}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipMsgDetail(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthMsgDetail
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthMsgDetail
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipMsgDetail(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowMsgDetail
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowMsgDetail
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
			return iNdEx, nil
		case 1:
			iNdEx += 8
			return iNdEx, nil
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowMsgDetail
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthMsgDetail
			}
			iNdEx += length
			if iNdEx < 0 {
				return 0, ErrInvalidLengthMsgDetail
			}
			return iNdEx, nil
		case 3:
			for {
				var innerWire uint64
				var start int = iNdEx
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return 0, ErrIntOverflowMsgDetail
					}
					if iNdEx >= l {
						return 0, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					innerWire |= (uint64(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				innerWireType := int(innerWire & 0x7)
				if innerWireType == 4 {
					break
				}
				next, err := skipMsgDetail(dAtA[start:])
				if err != nil {
					return 0, err
				}
				iNdEx = start + next
				if iNdEx < 0 {
					return 0, ErrInvalidLengthMsgDetail
				}
			}
			return iNdEx, nil
		case 4:
			return iNdEx, nil
		case 5:
			iNdEx += 4
			return iNdEx, nil
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
	}
	panic("unreachable")
}

var (
	ErrInvalidLengthMsgDetail = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowMsgDetail   = fmt.Errorf("proto: integer overflow")
)
