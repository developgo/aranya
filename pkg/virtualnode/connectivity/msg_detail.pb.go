// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: msg_detail.proto

package connectivity

import (
	bytes "bytes"
	fmt "fmt"
	_ "github.com/gogo/protobuf/gogoproto"
	proto "github.com/gogo/protobuf/proto"
	github_com_gogo_protobuf_sortkeys "github.com/gogo/protobuf/sortkeys"
	io "io"
	math "math"
	reflect "reflect"
	strconv "strconv"
	strings "strings"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion2 // please upgrade the proto package

type PodStatus_State int32

const (
	StateUnknown   PodStatus_State = 0
	StatePending   PodStatus_State = 1
	StateRunning   PodStatus_State = 2
	StateSucceeded PodStatus_State = 3
	StateFailed    PodStatus_State = 4
)

var PodStatus_State_name = map[int32]string{
	0: "StateUnknown",
	1: "StatePending",
	2: "StateRunning",
	3: "StateSucceeded",
	4: "StateFailed",
}

var PodStatus_State_value = map[string]int32{
	"StateUnknown":   0,
	"StatePending":   1,
	"StateRunning":   2,
	"StateSucceeded": 3,
	"StateFailed":    4,
}

func (PodStatus_State) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_97b3080873330fb4, []int{1, 0}
}

type Data_Kind int32

const (
	STDOUT Data_Kind = 0
	STDERR Data_Kind = 1
	OTHER  Data_Kind = 2
)

var Data_Kind_name = map[int32]string{
	0: "STDOUT",
	1: "STDERR",
	2: "OTHER",
}

var Data_Kind_value = map[string]int32{
	"STDOUT": 0,
	"STDERR": 1,
	"OTHER":  2,
}

func (Data_Kind) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_97b3080873330fb4, []int{3, 0}
}

type Error_Kind int32

const (
	ErrCommon        Error_Kind = 0
	ErrNotFound      Error_Kind = 1
	ErrAlreadyExists Error_Kind = 2
	// work not supported, aranya should ignore this error
	// and cancel work
	ErrNotSupported Error_Kind = 3
)

var Error_Kind_name = map[int32]string{
	0: "ErrCommon",
	1: "ErrNotFound",
	2: "ErrAlreadyExists",
	3: "ErrNotSupported",
}

var Error_Kind_value = map[string]int32{
	"ErrCommon":        0,
	"ErrNotFound":      1,
	"ErrAlreadyExists": 2,
	"ErrNotSupported":  3,
}

func (Error_Kind) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_97b3080873330fb4, []int{4, 0}
}

type NodeStatus struct {
	// protobuf bytes of corev1.NodeSystemInfo
	SystemInfo []byte                `protobuf:"bytes,1,opt,name=system_info,json=systemInfo,proto3" json:"system_info,omitempty"`
	Resources  *NodeStatus_Resource  `protobuf:"bytes,2,opt,name=resources,proto3" json:"resources,omitempty"`
	Conditions *NodeStatus_Condition `protobuf:"bytes,3,opt,name=conditions,proto3" json:"conditions,omitempty"`
}

func (m *NodeStatus) Reset()      { *m = NodeStatus{} }
func (*NodeStatus) ProtoMessage() {}
func (*NodeStatus) Descriptor() ([]byte, []int) {
	return fileDescriptor_97b3080873330fb4, []int{0}
}
func (m *NodeStatus) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *NodeStatus) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_NodeStatus.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *NodeStatus) XXX_Merge(src proto.Message) {
	xxx_messageInfo_NodeStatus.Merge(m, src)
}
func (m *NodeStatus) XXX_Size() int {
	return m.Size()
}
func (m *NodeStatus) XXX_DiscardUnknown() {
	xxx_messageInfo_NodeStatus.DiscardUnknown(m)
}

var xxx_messageInfo_NodeStatus proto.InternalMessageInfo

func (m *NodeStatus) GetSystemInfo() []byte {
	if m != nil {
		return m.SystemInfo
	}
	return nil
}

func (m *NodeStatus) GetResources() *NodeStatus_Resource {
	if m != nil {
		return m.Resources
	}
	return nil
}

func (m *NodeStatus) GetConditions() *NodeStatus_Condition {
	if m != nil {
		return m.Conditions
	}
	return nil
}

func (*NodeStatus) XXX_MessageName() string {
	return "connectivity.NodeStatus"
}

type NodeStatus_Resource struct {
	// protobuf bytes of corev1.ResourceList
	Capacity    map[string][]byte `protobuf:"bytes,1,rep,name=capacity,proto3" json:"capacity,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	Allocatable map[string][]byte `protobuf:"bytes,2,rep,name=allocatable,proto3" json:"allocatable,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
}

func (m *NodeStatus_Resource) Reset()      { *m = NodeStatus_Resource{} }
func (*NodeStatus_Resource) ProtoMessage() {}
func (*NodeStatus_Resource) Descriptor() ([]byte, []int) {
	return fileDescriptor_97b3080873330fb4, []int{0, 0}
}
func (m *NodeStatus_Resource) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *NodeStatus_Resource) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_NodeStatus_Resource.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *NodeStatus_Resource) XXX_Merge(src proto.Message) {
	xxx_messageInfo_NodeStatus_Resource.Merge(m, src)
}
func (m *NodeStatus_Resource) XXX_Size() int {
	return m.Size()
}
func (m *NodeStatus_Resource) XXX_DiscardUnknown() {
	xxx_messageInfo_NodeStatus_Resource.DiscardUnknown(m)
}

var xxx_messageInfo_NodeStatus_Resource proto.InternalMessageInfo

func (m *NodeStatus_Resource) GetCapacity() map[string][]byte {
	if m != nil {
		return m.Capacity
	}
	return nil
}

func (m *NodeStatus_Resource) GetAllocatable() map[string][]byte {
	if m != nil {
		return m.Allocatable
	}
	return nil
}

func (*NodeStatus_Resource) XXX_MessageName() string {
	return "connectivity.NodeStatus.Resource"
}

type NodeStatus_Condition struct {
	// protobuf bytes of corev1.NodeCondition
	Conditions [][]byte `protobuf:"bytes,1,rep,name=conditions,proto3" json:"conditions,omitempty"`
}

func (m *NodeStatus_Condition) Reset()      { *m = NodeStatus_Condition{} }
func (*NodeStatus_Condition) ProtoMessage() {}
func (*NodeStatus_Condition) Descriptor() ([]byte, []int) {
	return fileDescriptor_97b3080873330fb4, []int{0, 1}
}
func (m *NodeStatus_Condition) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *NodeStatus_Condition) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_NodeStatus_Condition.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *NodeStatus_Condition) XXX_Merge(src proto.Message) {
	xxx_messageInfo_NodeStatus_Condition.Merge(m, src)
}
func (m *NodeStatus_Condition) XXX_Size() int {
	return m.Size()
}
func (m *NodeStatus_Condition) XXX_DiscardUnknown() {
	xxx_messageInfo_NodeStatus_Condition.DiscardUnknown(m)
}

var xxx_messageInfo_NodeStatus_Condition proto.InternalMessageInfo

func (m *NodeStatus_Condition) GetConditions() [][]byte {
	if m != nil {
		return m.Conditions
	}
	return nil
}

func (*NodeStatus_Condition) XXX_MessageName() string {
	return "connectivity.NodeStatus.Condition"
}

type PodStatus struct {
	// metadata
	Uid string `protobuf:"bytes,1,opt,name=uid,proto3" json:"uid,omitempty"`
	// status
	ContainerStatuses map[string]*PodStatus_ContainerStatus `protobuf:"bytes,2,rep,name=container_statuses,json=containerStatuses,proto3" json:"container_statuses,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
}

func (m *PodStatus) Reset()      { *m = PodStatus{} }
func (*PodStatus) ProtoMessage() {}
func (*PodStatus) Descriptor() ([]byte, []int) {
	return fileDescriptor_97b3080873330fb4, []int{1}
}
func (m *PodStatus) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *PodStatus) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_PodStatus.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *PodStatus) XXX_Merge(src proto.Message) {
	xxx_messageInfo_PodStatus.Merge(m, src)
}
func (m *PodStatus) XXX_Size() int {
	return m.Size()
}
func (m *PodStatus) XXX_DiscardUnknown() {
	xxx_messageInfo_PodStatus.DiscardUnknown(m)
}

var xxx_messageInfo_PodStatus proto.InternalMessageInfo

func (m *PodStatus) GetUid() string {
	if m != nil {
		return m.Uid
	}
	return ""
}

func (m *PodStatus) GetContainerStatuses() map[string]*PodStatus_ContainerStatus {
	if m != nil {
		return m.ContainerStatuses
	}
	return nil
}

func (*PodStatus) XXX_MessageName() string {
	return "connectivity.PodStatus"
}

type PodStatus_ContainerStatus struct {
	ContainerId string `protobuf:"bytes,1,opt,name=container_id,json=containerId,proto3" json:"container_id,omitempty"`
	ImageId     string `protobuf:"bytes,2,opt,name=image_id,json=imageId,proto3" json:"image_id,omitempty"`
	// time values in unix nano
	CreatedAt  int64  `protobuf:"varint,4,opt,name=created_at,json=createdAt,proto3" json:"created_at,omitempty"`
	StartedAt  int64  `protobuf:"varint,5,opt,name=started_at,json=startedAt,proto3" json:"started_at,omitempty"`
	FinishedAt int64  `protobuf:"varint,6,opt,name=finished_at,json=finishedAt,proto3" json:"finished_at,omitempty"`
	ExitCode   int32  `protobuf:"varint,7,opt,name=exit_code,json=exitCode,proto3" json:"exit_code,omitempty"`
	Reason     string `protobuf:"bytes,11,opt,name=reason,proto3" json:"reason,omitempty"`
	Message    string `protobuf:"bytes,12,opt,name=message,proto3" json:"message,omitempty"`
}

func (m *PodStatus_ContainerStatus) Reset()      { *m = PodStatus_ContainerStatus{} }
func (*PodStatus_ContainerStatus) ProtoMessage() {}
func (*PodStatus_ContainerStatus) Descriptor() ([]byte, []int) {
	return fileDescriptor_97b3080873330fb4, []int{1, 0}
}
func (m *PodStatus_ContainerStatus) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *PodStatus_ContainerStatus) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_PodStatus_ContainerStatus.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *PodStatus_ContainerStatus) XXX_Merge(src proto.Message) {
	xxx_messageInfo_PodStatus_ContainerStatus.Merge(m, src)
}
func (m *PodStatus_ContainerStatus) XXX_Size() int {
	return m.Size()
}
func (m *PodStatus_ContainerStatus) XXX_DiscardUnknown() {
	xxx_messageInfo_PodStatus_ContainerStatus.DiscardUnknown(m)
}

var xxx_messageInfo_PodStatus_ContainerStatus proto.InternalMessageInfo

func (m *PodStatus_ContainerStatus) GetContainerId() string {
	if m != nil {
		return m.ContainerId
	}
	return ""
}

func (m *PodStatus_ContainerStatus) GetImageId() string {
	if m != nil {
		return m.ImageId
	}
	return ""
}

func (m *PodStatus_ContainerStatus) GetCreatedAt() int64 {
	if m != nil {
		return m.CreatedAt
	}
	return 0
}

func (m *PodStatus_ContainerStatus) GetStartedAt() int64 {
	if m != nil {
		return m.StartedAt
	}
	return 0
}

func (m *PodStatus_ContainerStatus) GetFinishedAt() int64 {
	if m != nil {
		return m.FinishedAt
	}
	return 0
}

func (m *PodStatus_ContainerStatus) GetExitCode() int32 {
	if m != nil {
		return m.ExitCode
	}
	return 0
}

func (m *PodStatus_ContainerStatus) GetReason() string {
	if m != nil {
		return m.Reason
	}
	return ""
}

func (m *PodStatus_ContainerStatus) GetMessage() string {
	if m != nil {
		return m.Message
	}
	return ""
}

func (*PodStatus_ContainerStatus) XXX_MessageName() string {
	return "connectivity.PodStatus.ContainerStatus"
}

type PodStatusList struct {
	Pods []*PodStatus `protobuf:"bytes,1,rep,name=pods,proto3" json:"pods,omitempty"`
}

func (m *PodStatusList) Reset()      { *m = PodStatusList{} }
func (*PodStatusList) ProtoMessage() {}
func (*PodStatusList) Descriptor() ([]byte, []int) {
	return fileDescriptor_97b3080873330fb4, []int{2}
}
func (m *PodStatusList) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *PodStatusList) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_PodStatusList.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *PodStatusList) XXX_Merge(src proto.Message) {
	xxx_messageInfo_PodStatusList.Merge(m, src)
}
func (m *PodStatusList) XXX_Size() int {
	return m.Size()
}
func (m *PodStatusList) XXX_DiscardUnknown() {
	xxx_messageInfo_PodStatusList.DiscardUnknown(m)
}

var xxx_messageInfo_PodStatusList proto.InternalMessageInfo

func (m *PodStatusList) GetPods() []*PodStatus {
	if m != nil {
		return m.Pods
	}
	return nil
}

func (*PodStatusList) XXX_MessageName() string {
	return "connectivity.PodStatusList"
}

type Data struct {
	Kind Data_Kind `protobuf:"varint,1,opt,name=kind,proto3,enum=connectivity.Data_Kind" json:"kind,omitempty"`
	Data []byte    `protobuf:"bytes,2,opt,name=data,proto3" json:"data,omitempty"`
}

func (m *Data) Reset()      { *m = Data{} }
func (*Data) ProtoMessage() {}
func (*Data) Descriptor() ([]byte, []int) {
	return fileDescriptor_97b3080873330fb4, []int{3}
}
func (m *Data) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Data) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Data.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *Data) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Data.Merge(m, src)
}
func (m *Data) XXX_Size() int {
	return m.Size()
}
func (m *Data) XXX_DiscardUnknown() {
	xxx_messageInfo_Data.DiscardUnknown(m)
}

var xxx_messageInfo_Data proto.InternalMessageInfo

func (m *Data) GetKind() Data_Kind {
	if m != nil {
		return m.Kind
	}
	return STDOUT
}

func (m *Data) GetData() []byte {
	if m != nil {
		return m.Data
	}
	return nil
}

func (*Data) XXX_MessageName() string {
	return "connectivity.Data"
}

type Error struct {
	Kind        Error_Kind `protobuf:"varint,1,opt,name=kind,proto3,enum=connectivity.Error_Kind" json:"kind,omitempty"`
	Description string     `protobuf:"bytes,2,opt,name=description,proto3" json:"description,omitempty"`
}

func (m *Error) Reset()      { *m = Error{} }
func (*Error) ProtoMessage() {}
func (*Error) Descriptor() ([]byte, []int) {
	return fileDescriptor_97b3080873330fb4, []int{4}
}
func (m *Error) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Error) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Error.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *Error) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Error.Merge(m, src)
}
func (m *Error) XXX_Size() int {
	return m.Size()
}
func (m *Error) XXX_DiscardUnknown() {
	xxx_messageInfo_Error.DiscardUnknown(m)
}

var xxx_messageInfo_Error proto.InternalMessageInfo

func (m *Error) GetKind() Error_Kind {
	if m != nil {
		return m.Kind
	}
	return ErrCommon
}

func (m *Error) GetDescription() string {
	if m != nil {
		return m.Description
	}
	return ""
}

func (*Error) XXX_MessageName() string {
	return "connectivity.Error"
}
func init() {
	proto.RegisterEnum("connectivity.PodStatus_State", PodStatus_State_name, PodStatus_State_value)
	proto.RegisterEnum("connectivity.Data_Kind", Data_Kind_name, Data_Kind_value)
	proto.RegisterEnum("connectivity.Error_Kind", Error_Kind_name, Error_Kind_value)
	proto.RegisterType((*NodeStatus)(nil), "connectivity.NodeStatus")
	proto.RegisterType((*NodeStatus_Resource)(nil), "connectivity.NodeStatus.Resource")
	proto.RegisterMapType((map[string][]byte)(nil), "connectivity.NodeStatus.Resource.AllocatableEntry")
	proto.RegisterMapType((map[string][]byte)(nil), "connectivity.NodeStatus.Resource.CapacityEntry")
	proto.RegisterType((*NodeStatus_Condition)(nil), "connectivity.NodeStatus.Condition")
	proto.RegisterType((*PodStatus)(nil), "connectivity.PodStatus")
	proto.RegisterMapType((map[string]*PodStatus_ContainerStatus)(nil), "connectivity.PodStatus.ContainerStatusesEntry")
	proto.RegisterType((*PodStatus_ContainerStatus)(nil), "connectivity.PodStatus.ContainerStatus")
	proto.RegisterType((*PodStatusList)(nil), "connectivity.PodStatusList")
	proto.RegisterType((*Data)(nil), "connectivity.Data")
	proto.RegisterType((*Error)(nil), "connectivity.Error")
}

func init() { proto.RegisterFile("msg_detail.proto", fileDescriptor_97b3080873330fb4) }

var fileDescriptor_97b3080873330fb4 = []byte{
	// 826 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x94, 0x55, 0xcb, 0x6e, 0x1b, 0x37,
	0x14, 0x15, 0xf5, 0xb0, 0xad, 0x3b, 0x72, 0xcc, 0xb2, 0x41, 0x3a, 0x55, 0xd1, 0xa9, 0x32, 0x9b,
	0xaa, 0x48, 0x2b, 0x03, 0xee, 0x26, 0xe8, 0x13, 0x8a, 0xa3, 0xa0, 0x46, 0x8a, 0x24, 0x1d, 0x39,
	0xcb, 0x42, 0xa0, 0x86, 0xb4, 0x42, 0x58, 0x22, 0x05, 0x92, 0x93, 0x46, 0xbb, 0x7e, 0x40, 0x17,
	0xfd, 0x8c, 0x22, 0x5f, 0x92, 0x5d, 0xbd, 0xcc, 0xb2, 0x96, 0x37, 0x5d, 0xe6, 0x07, 0x0a, 0x14,
	0xe4, 0x8c, 0xe5, 0x91, 0x90, 0xc0, 0xed, 0x8e, 0xf7, 0xdc, 0x73, 0xce, 0xbd, 0x38, 0x43, 0x62,
	0x00, 0xcf, 0xcc, 0x64, 0xc4, 0xb8, 0xa5, 0x62, 0xda, 0x9b, 0x6b, 0x65, 0x15, 0x69, 0xa5, 0x4a,
	0x4a, 0x9e, 0x5a, 0xf1, 0x5c, 0xd8, 0x45, 0xfb, 0x8b, 0x89, 0xb0, 0xcf, 0xb2, 0x71, 0x2f, 0x55,
	0xb3, 0xfd, 0x89, 0x9a, 0xa8, 0x7d, 0x4f, 0x1a, 0x67, 0x27, 0xbe, 0xf2, 0x85, 0x3f, 0xe5, 0xe2,
	0xf8, 0xb7, 0x3a, 0xc0, 0x23, 0xc5, 0xf8, 0xd0, 0x52, 0x9b, 0x19, 0xf2, 0x09, 0x04, 0x66, 0x61,
	0x2c, 0x9f, 0x8d, 0x84, 0x3c, 0x51, 0x21, 0xea, 0xa0, 0x6e, 0x2b, 0x81, 0x1c, 0x3a, 0x92, 0x27,
	0x8a, 0x7c, 0x0f, 0x4d, 0xcd, 0x8d, 0xca, 0x74, 0xca, 0x4d, 0x58, 0xed, 0xa0, 0x6e, 0x70, 0x70,
	0xbb, 0x57, 0x5e, 0xa0, 0x77, 0xe5, 0xd6, 0x4b, 0x0a, 0x66, 0x72, 0xa5, 0x21, 0xf7, 0x00, 0x52,
	0x25, 0x99, 0xb0, 0x42, 0x49, 0x13, 0xd6, 0xbc, 0x43, 0xfc, 0x4e, 0x87, 0xc3, 0x4b, 0x6a, 0x52,
	0x52, 0xb5, 0x5f, 0x56, 0x61, 0xe7, 0xd2, 0x9b, 0x3c, 0x84, 0x9d, 0x94, 0xce, 0x69, 0x2a, 0xec,
	0x22, 0x44, 0x9d, 0x5a, 0x37, 0x38, 0xd8, 0xbf, 0x76, 0xa1, 0xde, 0x61, 0xa1, 0x18, 0x48, 0xab,
	0x17, 0xc9, 0xca, 0x80, 0x1c, 0x43, 0x40, 0xa7, 0x53, 0x95, 0x52, 0x4b, 0xc7, 0x53, 0x1e, 0x56,
	0xbd, 0xdf, 0xc1, 0xf5, 0x7e, 0xfd, 0x2b, 0x51, 0x6e, 0x59, 0xb6, 0x69, 0x7f, 0x0d, 0xbb, 0x6b,
	0x03, 0x09, 0x86, 0xda, 0x29, 0x5f, 0xf8, 0x78, 0x9b, 0x89, 0x3b, 0x92, 0x9b, 0xd0, 0x78, 0x4e,
	0xa7, 0x19, 0xf7, 0x99, 0xb6, 0x92, 0xbc, 0xf8, 0xaa, 0x7a, 0x17, 0xb5, 0xbf, 0x03, 0xbc, 0xe9,
	0xfe, 0xbf, 0xf4, 0x77, 0xa0, 0xb9, 0x4a, 0x91, 0x44, 0x6b, 0xe9, 0xbb, 0xb8, 0x5a, 0xe5, 0x64,
	0xe3, 0x3f, 0xeb, 0xd0, 0x7c, 0xa2, 0x58, 0x71, 0x1b, 0x30, 0xd4, 0x32, 0xc1, 0x2e, 0xc7, 0x64,
	0x82, 0x91, 0x9f, 0x81, 0xa4, 0x4a, 0x5a, 0x2a, 0x24, 0xd7, 0x23, 0xe3, 0x59, 0xfe, 0x1e, 0xb8,
	0x98, 0x7a, 0xeb, 0x31, 0xad, 0x6c, 0xdc, 0x47, 0xcc, 0x15, 0xc3, 0x42, 0x90, 0x47, 0xf4, 0x5e,
	0xba, 0x89, 0xb7, 0xff, 0x41, 0xb0, 0xb7, 0xc1, 0x26, 0xb7, 0xa1, 0x75, 0x35, 0x72, 0xb5, 0x4d,
	0xb0, 0xc2, 0x8e, 0x18, 0xf9, 0x10, 0x76, 0xc4, 0x8c, 0x4e, 0xb8, 0x6b, 0x57, 0x7d, 0x7b, 0xdb,
	0xd7, 0x47, 0x8c, 0x7c, 0x0c, 0x90, 0x6a, 0x4e, 0x2d, 0x67, 0x23, 0x6a, 0xc3, 0x7a, 0x07, 0x75,
	0x6b, 0x49, 0xb3, 0x40, 0xfa, 0xd6, 0xb5, 0x8d, 0xa5, 0xba, 0x68, 0x37, 0xf2, 0x76, 0x81, 0xf4,
	0xad, 0x7b, 0x0e, 0x27, 0x42, 0x0a, 0xf3, 0x2c, 0xef, 0x6f, 0xf9, 0x3e, 0x5c, 0x42, 0x7d, 0x4b,
	0x3e, 0x82, 0x26, 0x7f, 0x21, 0xec, 0x28, 0x55, 0x8c, 0x87, 0xdb, 0x1d, 0xd4, 0x6d, 0x24, 0x3b,
	0x0e, 0x38, 0x54, 0x8c, 0x93, 0x5b, 0xb0, 0xa5, 0x39, 0x35, 0x4a, 0x86, 0x81, 0x5f, 0xaa, 0xa8,
	0x48, 0x08, 0xdb, 0x33, 0x6e, 0x0c, 0x9d, 0xf0, 0xb0, 0x95, 0x6f, 0x5b, 0x94, 0xed, 0x19, 0xdc,
	0x7a, 0x7b, 0x58, 0x6f, 0xf9, 0xe2, 0xdf, 0x96, 0xbf, 0x78, 0x70, 0xf0, 0xe9, 0x7f, 0x4c, 0xbf,
	0x74, 0x35, 0xe2, 0x31, 0x34, 0x1c, 0xc8, 0x09, 0x86, 0x96, 0x3f, 0x3c, 0x95, 0xa7, 0x52, 0xfd,
	0x22, 0x71, 0x65, 0x85, 0x3c, 0xe1, 0x92, 0x09, 0x39, 0xc1, 0x68, 0x85, 0x24, 0x99, 0x94, 0x0e,
	0xa9, 0x12, 0x02, 0x37, 0x3c, 0x32, 0xcc, 0xd2, 0x94, 0x73, 0xc6, 0x19, 0xae, 0x91, 0x3d, 0x08,
	0x3c, 0xf6, 0x80, 0x8a, 0x29, 0x67, 0xb8, 0x1e, 0x7f, 0x03, 0xbb, 0xab, 0x5d, 0x7e, 0x14, 0xc6,
	0x92, 0x3b, 0x50, 0x9f, 0x2b, 0x66, 0x8a, 0xb7, 0xfa, 0xc1, 0x3b, 0xd6, 0x4e, 0x3c, 0x29, 0xd6,
	0x50, 0xbf, 0x4f, 0x2d, 0x75, 0xa2, 0x53, 0x21, 0xf3, 0x8f, 0x7f, 0x63, 0x53, 0xe4, 0x18, 0xbd,
	0x87, 0x42, 0xb2, 0xc4, 0x93, 0x08, 0x81, 0x3a, 0xa3, 0x96, 0x16, 0x4f, 0xc1, 0x9f, 0xe3, 0xcf,
	0xa0, 0xee, 0x18, 0x04, 0x60, 0x6b, 0x78, 0x7c, 0xff, 0xf1, 0xd3, 0x63, 0x5c, 0x29, 0xce, 0x83,
	0x24, 0xc1, 0x88, 0x34, 0xa1, 0xf1, 0xf8, 0xf8, 0x87, 0x41, 0x82, 0xab, 0xf1, 0x4b, 0x04, 0x8d,
	0x81, 0xd6, 0x4a, 0x93, 0xcf, 0xd7, 0xa6, 0x86, 0xeb, 0x53, 0x3d, 0xa5, 0x3c, 0xb6, 0x03, 0x01,
	0xe3, 0x26, 0xd5, 0x62, 0xee, 0xde, 0x52, 0x71, 0x11, 0xcb, 0x50, 0xfc, 0x53, 0xb1, 0xc4, 0x2e,
	0x34, 0x07, 0x5a, 0x1f, 0xaa, 0xd9, 0x4c, 0xb9, 0xac, 0xf7, 0x20, 0x18, 0x68, 0xfd, 0x48, 0xd9,
	0x07, 0x2a, 0x93, 0x0c, 0x23, 0x72, 0x13, 0xf0, 0x40, 0xeb, 0xfe, 0x54, 0x73, 0xca, 0x16, 0x83,
	0x17, 0xc2, 0x58, 0x83, 0xab, 0xe4, 0x7d, 0xd8, 0xcb, 0x69, 0xc3, 0x6c, 0x3e, 0x57, 0xee, 0x86,
	0xe2, 0xda, 0xbd, 0xbb, 0x67, 0xe7, 0x51, 0xe5, 0xf5, 0x79, 0x54, 0x79, 0x73, 0x1e, 0xa1, 0x5f,
	0x97, 0x11, 0xfa, 0x63, 0x19, 0xa1, 0x57, 0xcb, 0x08, 0x9d, 0x2d, 0x23, 0xf4, 0xd7, 0x32, 0x42,
	0x7f, 0x2f, 0xa3, 0xca, 0x9b, 0x65, 0x84, 0x7e, 0xbf, 0x88, 0x2a, 0xaf, 0x2e, 0x22, 0x74, 0x76,
	0x11, 0x55, 0x5e, 0x5f, 0x44, 0x95, 0xf1, 0x96, 0xff, 0x01, 0x7c, 0xf9, 0x6f, 0x00, 0x00, 0x00,
	0xff, 0xff, 0x6f, 0x86, 0x43, 0x49, 0x51, 0x06, 0x00, 0x00,
}

func (x PodStatus_State) String() string {
	s, ok := PodStatus_State_name[int32(x)]
	if ok {
		return s
	}
	return strconv.Itoa(int(x))
}
func (x Data_Kind) String() string {
	s, ok := Data_Kind_name[int32(x)]
	if ok {
		return s
	}
	return strconv.Itoa(int(x))
}
func (x Error_Kind) String() string {
	s, ok := Error_Kind_name[int32(x)]
	if ok {
		return s
	}
	return strconv.Itoa(int(x))
}
func (this *NodeStatus) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*NodeStatus)
	if !ok {
		that2, ok := that.(NodeStatus)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !bytes.Equal(this.SystemInfo, that1.SystemInfo) {
		return false
	}
	if !this.Resources.Equal(that1.Resources) {
		return false
	}
	if !this.Conditions.Equal(that1.Conditions) {
		return false
	}
	return true
}
func (this *NodeStatus_Resource) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*NodeStatus_Resource)
	if !ok {
		that2, ok := that.(NodeStatus_Resource)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if len(this.Capacity) != len(that1.Capacity) {
		return false
	}
	for i := range this.Capacity {
		if !bytes.Equal(this.Capacity[i], that1.Capacity[i]) {
			return false
		}
	}
	if len(this.Allocatable) != len(that1.Allocatable) {
		return false
	}
	for i := range this.Allocatable {
		if !bytes.Equal(this.Allocatable[i], that1.Allocatable[i]) {
			return false
		}
	}
	return true
}
func (this *NodeStatus_Condition) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*NodeStatus_Condition)
	if !ok {
		that2, ok := that.(NodeStatus_Condition)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if len(this.Conditions) != len(that1.Conditions) {
		return false
	}
	for i := range this.Conditions {
		if !bytes.Equal(this.Conditions[i], that1.Conditions[i]) {
			return false
		}
	}
	return true
}
func (this *PodStatus) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*PodStatus)
	if !ok {
		that2, ok := that.(PodStatus)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.Uid != that1.Uid {
		return false
	}
	if len(this.ContainerStatuses) != len(that1.ContainerStatuses) {
		return false
	}
	for i := range this.ContainerStatuses {
		if !this.ContainerStatuses[i].Equal(that1.ContainerStatuses[i]) {
			return false
		}
	}
	return true
}
func (this *PodStatus_ContainerStatus) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*PodStatus_ContainerStatus)
	if !ok {
		that2, ok := that.(PodStatus_ContainerStatus)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.ContainerId != that1.ContainerId {
		return false
	}
	if this.ImageId != that1.ImageId {
		return false
	}
	if this.CreatedAt != that1.CreatedAt {
		return false
	}
	if this.StartedAt != that1.StartedAt {
		return false
	}
	if this.FinishedAt != that1.FinishedAt {
		return false
	}
	if this.ExitCode != that1.ExitCode {
		return false
	}
	if this.Reason != that1.Reason {
		return false
	}
	if this.Message != that1.Message {
		return false
	}
	return true
}
func (this *PodStatusList) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*PodStatusList)
	if !ok {
		that2, ok := that.(PodStatusList)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if len(this.Pods) != len(that1.Pods) {
		return false
	}
	for i := range this.Pods {
		if !this.Pods[i].Equal(that1.Pods[i]) {
			return false
		}
	}
	return true
}
func (this *Data) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*Data)
	if !ok {
		that2, ok := that.(Data)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.Kind != that1.Kind {
		return false
	}
	if !bytes.Equal(this.Data, that1.Data) {
		return false
	}
	return true
}
func (this *Error) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*Error)
	if !ok {
		that2, ok := that.(Error)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.Kind != that1.Kind {
		return false
	}
	if this.Description != that1.Description {
		return false
	}
	return true
}
func (this *NodeStatus) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 7)
	s = append(s, "&connectivity.NodeStatus{")
	s = append(s, "SystemInfo: "+fmt.Sprintf("%#v", this.SystemInfo)+",\n")
	if this.Resources != nil {
		s = append(s, "Resources: "+fmt.Sprintf("%#v", this.Resources)+",\n")
	}
	if this.Conditions != nil {
		s = append(s, "Conditions: "+fmt.Sprintf("%#v", this.Conditions)+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *NodeStatus_Resource) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 6)
	s = append(s, "&connectivity.NodeStatus_Resource{")
	keysForCapacity := make([]string, 0, len(this.Capacity))
	for k, _ := range this.Capacity {
		keysForCapacity = append(keysForCapacity, k)
	}
	github_com_gogo_protobuf_sortkeys.Strings(keysForCapacity)
	mapStringForCapacity := "map[string][]byte{"
	for _, k := range keysForCapacity {
		mapStringForCapacity += fmt.Sprintf("%#v: %#v,", k, this.Capacity[k])
	}
	mapStringForCapacity += "}"
	if this.Capacity != nil {
		s = append(s, "Capacity: "+mapStringForCapacity+",\n")
	}
	keysForAllocatable := make([]string, 0, len(this.Allocatable))
	for k, _ := range this.Allocatable {
		keysForAllocatable = append(keysForAllocatable, k)
	}
	github_com_gogo_protobuf_sortkeys.Strings(keysForAllocatable)
	mapStringForAllocatable := "map[string][]byte{"
	for _, k := range keysForAllocatable {
		mapStringForAllocatable += fmt.Sprintf("%#v: %#v,", k, this.Allocatable[k])
	}
	mapStringForAllocatable += "}"
	if this.Allocatable != nil {
		s = append(s, "Allocatable: "+mapStringForAllocatable+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *NodeStatus_Condition) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 5)
	s = append(s, "&connectivity.NodeStatus_Condition{")
	s = append(s, "Conditions: "+fmt.Sprintf("%#v", this.Conditions)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *PodStatus) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 6)
	s = append(s, "&connectivity.PodStatus{")
	s = append(s, "Uid: "+fmt.Sprintf("%#v", this.Uid)+",\n")
	keysForContainerStatuses := make([]string, 0, len(this.ContainerStatuses))
	for k, _ := range this.ContainerStatuses {
		keysForContainerStatuses = append(keysForContainerStatuses, k)
	}
	github_com_gogo_protobuf_sortkeys.Strings(keysForContainerStatuses)
	mapStringForContainerStatuses := "map[string]*PodStatus_ContainerStatus{"
	for _, k := range keysForContainerStatuses {
		mapStringForContainerStatuses += fmt.Sprintf("%#v: %#v,", k, this.ContainerStatuses[k])
	}
	mapStringForContainerStatuses += "}"
	if this.ContainerStatuses != nil {
		s = append(s, "ContainerStatuses: "+mapStringForContainerStatuses+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *PodStatus_ContainerStatus) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 12)
	s = append(s, "&connectivity.PodStatus_ContainerStatus{")
	s = append(s, "ContainerId: "+fmt.Sprintf("%#v", this.ContainerId)+",\n")
	s = append(s, "ImageId: "+fmt.Sprintf("%#v", this.ImageId)+",\n")
	s = append(s, "CreatedAt: "+fmt.Sprintf("%#v", this.CreatedAt)+",\n")
	s = append(s, "StartedAt: "+fmt.Sprintf("%#v", this.StartedAt)+",\n")
	s = append(s, "FinishedAt: "+fmt.Sprintf("%#v", this.FinishedAt)+",\n")
	s = append(s, "ExitCode: "+fmt.Sprintf("%#v", this.ExitCode)+",\n")
	s = append(s, "Reason: "+fmt.Sprintf("%#v", this.Reason)+",\n")
	s = append(s, "Message: "+fmt.Sprintf("%#v", this.Message)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *PodStatusList) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 5)
	s = append(s, "&connectivity.PodStatusList{")
	if this.Pods != nil {
		s = append(s, "Pods: "+fmt.Sprintf("%#v", this.Pods)+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *Data) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 6)
	s = append(s, "&connectivity.Data{")
	s = append(s, "Kind: "+fmt.Sprintf("%#v", this.Kind)+",\n")
	s = append(s, "Data: "+fmt.Sprintf("%#v", this.Data)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *Error) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 6)
	s = append(s, "&connectivity.Error{")
	s = append(s, "Kind: "+fmt.Sprintf("%#v", this.Kind)+",\n")
	s = append(s, "Description: "+fmt.Sprintf("%#v", this.Description)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func valueToGoStringMsgDetail(v interface{}, typ string) string {
	rv := reflect.ValueOf(v)
	if rv.IsNil() {
		return "nil"
	}
	pv := reflect.Indirect(rv).Interface()
	return fmt.Sprintf("func(v %v) *%v { return &v } ( %#v )", typ, typ, pv)
}
func (m *NodeStatus) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *NodeStatus) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.SystemInfo) > 0 {
		dAtA[i] = 0xa
		i++
		i = encodeVarintMsgDetail(dAtA, i, uint64(len(m.SystemInfo)))
		i += copy(dAtA[i:], m.SystemInfo)
	}
	if m.Resources != nil {
		dAtA[i] = 0x12
		i++
		i = encodeVarintMsgDetail(dAtA, i, uint64(m.Resources.Size()))
		n1, err := m.Resources.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n1
	}
	if m.Conditions != nil {
		dAtA[i] = 0x1a
		i++
		i = encodeVarintMsgDetail(dAtA, i, uint64(m.Conditions.Size()))
		n2, err := m.Conditions.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n2
	}
	return i, nil
}

func (m *NodeStatus_Resource) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *NodeStatus_Resource) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Capacity) > 0 {
		for k, _ := range m.Capacity {
			dAtA[i] = 0xa
			i++
			v := m.Capacity[k]
			byteSize := 0
			if len(v) > 0 {
				byteSize = 1 + len(v) + sovMsgDetail(uint64(len(v)))
			}
			mapSize := 1 + len(k) + sovMsgDetail(uint64(len(k))) + byteSize
			i = encodeVarintMsgDetail(dAtA, i, uint64(mapSize))
			dAtA[i] = 0xa
			i++
			i = encodeVarintMsgDetail(dAtA, i, uint64(len(k)))
			i += copy(dAtA[i:], k)
			if len(v) > 0 {
				dAtA[i] = 0x12
				i++
				i = encodeVarintMsgDetail(dAtA, i, uint64(len(v)))
				i += copy(dAtA[i:], v)
			}
		}
	}
	if len(m.Allocatable) > 0 {
		for k, _ := range m.Allocatable {
			dAtA[i] = 0x12
			i++
			v := m.Allocatable[k]
			byteSize := 0
			if len(v) > 0 {
				byteSize = 1 + len(v) + sovMsgDetail(uint64(len(v)))
			}
			mapSize := 1 + len(k) + sovMsgDetail(uint64(len(k))) + byteSize
			i = encodeVarintMsgDetail(dAtA, i, uint64(mapSize))
			dAtA[i] = 0xa
			i++
			i = encodeVarintMsgDetail(dAtA, i, uint64(len(k)))
			i += copy(dAtA[i:], k)
			if len(v) > 0 {
				dAtA[i] = 0x12
				i++
				i = encodeVarintMsgDetail(dAtA, i, uint64(len(v)))
				i += copy(dAtA[i:], v)
			}
		}
	}
	return i, nil
}

func (m *NodeStatus_Condition) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *NodeStatus_Condition) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Conditions) > 0 {
		for _, b := range m.Conditions {
			dAtA[i] = 0xa
			i++
			i = encodeVarintMsgDetail(dAtA, i, uint64(len(b)))
			i += copy(dAtA[i:], b)
		}
	}
	return i, nil
}

func (m *PodStatus) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *PodStatus) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Uid) > 0 {
		dAtA[i] = 0xa
		i++
		i = encodeVarintMsgDetail(dAtA, i, uint64(len(m.Uid)))
		i += copy(dAtA[i:], m.Uid)
	}
	if len(m.ContainerStatuses) > 0 {
		for k, _ := range m.ContainerStatuses {
			dAtA[i] = 0x12
			i++
			v := m.ContainerStatuses[k]
			msgSize := 0
			if v != nil {
				msgSize = v.Size()
				msgSize += 1 + sovMsgDetail(uint64(msgSize))
			}
			mapSize := 1 + len(k) + sovMsgDetail(uint64(len(k))) + msgSize
			i = encodeVarintMsgDetail(dAtA, i, uint64(mapSize))
			dAtA[i] = 0xa
			i++
			i = encodeVarintMsgDetail(dAtA, i, uint64(len(k)))
			i += copy(dAtA[i:], k)
			if v != nil {
				dAtA[i] = 0x12
				i++
				i = encodeVarintMsgDetail(dAtA, i, uint64(v.Size()))
				n3, err := v.MarshalTo(dAtA[i:])
				if err != nil {
					return 0, err
				}
				i += n3
			}
		}
	}
	return i, nil
}

func (m *PodStatus_ContainerStatus) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *PodStatus_ContainerStatus) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.ContainerId) > 0 {
		dAtA[i] = 0xa
		i++
		i = encodeVarintMsgDetail(dAtA, i, uint64(len(m.ContainerId)))
		i += copy(dAtA[i:], m.ContainerId)
	}
	if len(m.ImageId) > 0 {
		dAtA[i] = 0x12
		i++
		i = encodeVarintMsgDetail(dAtA, i, uint64(len(m.ImageId)))
		i += copy(dAtA[i:], m.ImageId)
	}
	if m.CreatedAt != 0 {
		dAtA[i] = 0x20
		i++
		i = encodeVarintMsgDetail(dAtA, i, uint64(m.CreatedAt))
	}
	if m.StartedAt != 0 {
		dAtA[i] = 0x28
		i++
		i = encodeVarintMsgDetail(dAtA, i, uint64(m.StartedAt))
	}
	if m.FinishedAt != 0 {
		dAtA[i] = 0x30
		i++
		i = encodeVarintMsgDetail(dAtA, i, uint64(m.FinishedAt))
	}
	if m.ExitCode != 0 {
		dAtA[i] = 0x38
		i++
		i = encodeVarintMsgDetail(dAtA, i, uint64(m.ExitCode))
	}
	if len(m.Reason) > 0 {
		dAtA[i] = 0x5a
		i++
		i = encodeVarintMsgDetail(dAtA, i, uint64(len(m.Reason)))
		i += copy(dAtA[i:], m.Reason)
	}
	if len(m.Message) > 0 {
		dAtA[i] = 0x62
		i++
		i = encodeVarintMsgDetail(dAtA, i, uint64(len(m.Message)))
		i += copy(dAtA[i:], m.Message)
	}
	return i, nil
}

func (m *PodStatusList) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *PodStatusList) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Pods) > 0 {
		for _, msg := range m.Pods {
			dAtA[i] = 0xa
			i++
			i = encodeVarintMsgDetail(dAtA, i, uint64(msg.Size()))
			n, err := msg.MarshalTo(dAtA[i:])
			if err != nil {
				return 0, err
			}
			i += n
		}
	}
	return i, nil
}

func (m *Data) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Data) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Kind != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintMsgDetail(dAtA, i, uint64(m.Kind))
	}
	if len(m.Data) > 0 {
		dAtA[i] = 0x12
		i++
		i = encodeVarintMsgDetail(dAtA, i, uint64(len(m.Data)))
		i += copy(dAtA[i:], m.Data)
	}
	return i, nil
}

func (m *Error) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Error) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Kind != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintMsgDetail(dAtA, i, uint64(m.Kind))
	}
	if len(m.Description) > 0 {
		dAtA[i] = 0x12
		i++
		i = encodeVarintMsgDetail(dAtA, i, uint64(len(m.Description)))
		i += copy(dAtA[i:], m.Description)
	}
	return i, nil
}

func encodeVarintMsgDetail(dAtA []byte, offset int, v uint64) int {
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return offset + 1
}
func (m *NodeStatus) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.SystemInfo)
	if l > 0 {
		n += 1 + l + sovMsgDetail(uint64(l))
	}
	if m.Resources != nil {
		l = m.Resources.Size()
		n += 1 + l + sovMsgDetail(uint64(l))
	}
	if m.Conditions != nil {
		l = m.Conditions.Size()
		n += 1 + l + sovMsgDetail(uint64(l))
	}
	return n
}

func (m *NodeStatus_Resource) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.Capacity) > 0 {
		for k, v := range m.Capacity {
			_ = k
			_ = v
			l = 0
			if len(v) > 0 {
				l = 1 + len(v) + sovMsgDetail(uint64(len(v)))
			}
			mapEntrySize := 1 + len(k) + sovMsgDetail(uint64(len(k))) + l
			n += mapEntrySize + 1 + sovMsgDetail(uint64(mapEntrySize))
		}
	}
	if len(m.Allocatable) > 0 {
		for k, v := range m.Allocatable {
			_ = k
			_ = v
			l = 0
			if len(v) > 0 {
				l = 1 + len(v) + sovMsgDetail(uint64(len(v)))
			}
			mapEntrySize := 1 + len(k) + sovMsgDetail(uint64(len(k))) + l
			n += mapEntrySize + 1 + sovMsgDetail(uint64(mapEntrySize))
		}
	}
	return n
}

func (m *NodeStatus_Condition) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.Conditions) > 0 {
		for _, b := range m.Conditions {
			l = len(b)
			n += 1 + l + sovMsgDetail(uint64(l))
		}
	}
	return n
}

func (m *PodStatus) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Uid)
	if l > 0 {
		n += 1 + l + sovMsgDetail(uint64(l))
	}
	if len(m.ContainerStatuses) > 0 {
		for k, v := range m.ContainerStatuses {
			_ = k
			_ = v
			l = 0
			if v != nil {
				l = v.Size()
				l += 1 + sovMsgDetail(uint64(l))
			}
			mapEntrySize := 1 + len(k) + sovMsgDetail(uint64(len(k))) + l
			n += mapEntrySize + 1 + sovMsgDetail(uint64(mapEntrySize))
		}
	}
	return n
}

func (m *PodStatus_ContainerStatus) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.ContainerId)
	if l > 0 {
		n += 1 + l + sovMsgDetail(uint64(l))
	}
	l = len(m.ImageId)
	if l > 0 {
		n += 1 + l + sovMsgDetail(uint64(l))
	}
	if m.CreatedAt != 0 {
		n += 1 + sovMsgDetail(uint64(m.CreatedAt))
	}
	if m.StartedAt != 0 {
		n += 1 + sovMsgDetail(uint64(m.StartedAt))
	}
	if m.FinishedAt != 0 {
		n += 1 + sovMsgDetail(uint64(m.FinishedAt))
	}
	if m.ExitCode != 0 {
		n += 1 + sovMsgDetail(uint64(m.ExitCode))
	}
	l = len(m.Reason)
	if l > 0 {
		n += 1 + l + sovMsgDetail(uint64(l))
	}
	l = len(m.Message)
	if l > 0 {
		n += 1 + l + sovMsgDetail(uint64(l))
	}
	return n
}

func (m *PodStatusList) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.Pods) > 0 {
		for _, e := range m.Pods {
			l = e.Size()
			n += 1 + l + sovMsgDetail(uint64(l))
		}
	}
	return n
}

func (m *Data) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Kind != 0 {
		n += 1 + sovMsgDetail(uint64(m.Kind))
	}
	l = len(m.Data)
	if l > 0 {
		n += 1 + l + sovMsgDetail(uint64(l))
	}
	return n
}

func (m *Error) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Kind != 0 {
		n += 1 + sovMsgDetail(uint64(m.Kind))
	}
	l = len(m.Description)
	if l > 0 {
		n += 1 + l + sovMsgDetail(uint64(l))
	}
	return n
}

func sovMsgDetail(x uint64) (n int) {
	for {
		n++
		x >>= 7
		if x == 0 {
			break
		}
	}
	return n
}
func sozMsgDetail(x uint64) (n int) {
	return sovMsgDetail(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (this *NodeStatus) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&NodeStatus{`,
		`SystemInfo:` + fmt.Sprintf("%v", this.SystemInfo) + `,`,
		`Resources:` + strings.Replace(fmt.Sprintf("%v", this.Resources), "NodeStatus_Resource", "NodeStatus_Resource", 1) + `,`,
		`Conditions:` + strings.Replace(fmt.Sprintf("%v", this.Conditions), "NodeStatus_Condition", "NodeStatus_Condition", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *NodeStatus_Resource) String() string {
	if this == nil {
		return "nil"
	}
	keysForCapacity := make([]string, 0, len(this.Capacity))
	for k, _ := range this.Capacity {
		keysForCapacity = append(keysForCapacity, k)
	}
	github_com_gogo_protobuf_sortkeys.Strings(keysForCapacity)
	mapStringForCapacity := "map[string][]byte{"
	for _, k := range keysForCapacity {
		mapStringForCapacity += fmt.Sprintf("%v: %v,", k, this.Capacity[k])
	}
	mapStringForCapacity += "}"
	keysForAllocatable := make([]string, 0, len(this.Allocatable))
	for k, _ := range this.Allocatable {
		keysForAllocatable = append(keysForAllocatable, k)
	}
	github_com_gogo_protobuf_sortkeys.Strings(keysForAllocatable)
	mapStringForAllocatable := "map[string][]byte{"
	for _, k := range keysForAllocatable {
		mapStringForAllocatable += fmt.Sprintf("%v: %v,", k, this.Allocatable[k])
	}
	mapStringForAllocatable += "}"
	s := strings.Join([]string{`&NodeStatus_Resource{`,
		`Capacity:` + mapStringForCapacity + `,`,
		`Allocatable:` + mapStringForAllocatable + `,`,
		`}`,
	}, "")
	return s
}
func (this *NodeStatus_Condition) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&NodeStatus_Condition{`,
		`Conditions:` + fmt.Sprintf("%v", this.Conditions) + `,`,
		`}`,
	}, "")
	return s
}
func (this *PodStatus) String() string {
	if this == nil {
		return "nil"
	}
	keysForContainerStatuses := make([]string, 0, len(this.ContainerStatuses))
	for k, _ := range this.ContainerStatuses {
		keysForContainerStatuses = append(keysForContainerStatuses, k)
	}
	github_com_gogo_protobuf_sortkeys.Strings(keysForContainerStatuses)
	mapStringForContainerStatuses := "map[string]*PodStatus_ContainerStatus{"
	for _, k := range keysForContainerStatuses {
		mapStringForContainerStatuses += fmt.Sprintf("%v: %v,", k, this.ContainerStatuses[k])
	}
	mapStringForContainerStatuses += "}"
	s := strings.Join([]string{`&PodStatus{`,
		`Uid:` + fmt.Sprintf("%v", this.Uid) + `,`,
		`ContainerStatuses:` + mapStringForContainerStatuses + `,`,
		`}`,
	}, "")
	return s
}
func (this *PodStatus_ContainerStatus) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&PodStatus_ContainerStatus{`,
		`ContainerId:` + fmt.Sprintf("%v", this.ContainerId) + `,`,
		`ImageId:` + fmt.Sprintf("%v", this.ImageId) + `,`,
		`CreatedAt:` + fmt.Sprintf("%v", this.CreatedAt) + `,`,
		`StartedAt:` + fmt.Sprintf("%v", this.StartedAt) + `,`,
		`FinishedAt:` + fmt.Sprintf("%v", this.FinishedAt) + `,`,
		`ExitCode:` + fmt.Sprintf("%v", this.ExitCode) + `,`,
		`Reason:` + fmt.Sprintf("%v", this.Reason) + `,`,
		`Message:` + fmt.Sprintf("%v", this.Message) + `,`,
		`}`,
	}, "")
	return s
}
func (this *PodStatusList) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&PodStatusList{`,
		`Pods:` + strings.Replace(fmt.Sprintf("%v", this.Pods), "PodStatus", "PodStatus", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *Data) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&Data{`,
		`Kind:` + fmt.Sprintf("%v", this.Kind) + `,`,
		`Data:` + fmt.Sprintf("%v", this.Data) + `,`,
		`}`,
	}, "")
	return s
}
func (this *Error) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&Error{`,
		`Kind:` + fmt.Sprintf("%v", this.Kind) + `,`,
		`Description:` + fmt.Sprintf("%v", this.Description) + `,`,
		`}`,
	}, "")
	return s
}
func valueToStringMsgDetail(v interface{}) string {
	rv := reflect.ValueOf(v)
	if rv.IsNil() {
		return "nil"
	}
	pv := reflect.Indirect(rv).Interface()
	return fmt.Sprintf("*%v", pv)
}
func (m *NodeStatus) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowMsgDetail
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: NodeStatus: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: NodeStatus: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field SystemInfo", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMsgDetail
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthMsgDetail
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthMsgDetail
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.SystemInfo = append(m.SystemInfo[:0], dAtA[iNdEx:postIndex]...)
			if m.SystemInfo == nil {
				m.SystemInfo = []byte{}
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Resources", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMsgDetail
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthMsgDetail
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthMsgDetail
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Resources == nil {
				m.Resources = &NodeStatus_Resource{}
			}
			if err := m.Resources.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Conditions", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMsgDetail
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthMsgDetail
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthMsgDetail
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Conditions == nil {
				m.Conditions = &NodeStatus_Condition{}
			}
			if err := m.Conditions.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipMsgDetail(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthMsgDetail
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthMsgDetail
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *NodeStatus_Resource) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowMsgDetail
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Resource: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Resource: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Capacity", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMsgDetail
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthMsgDetail
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthMsgDetail
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Capacity == nil {
				m.Capacity = make(map[string][]byte)
			}
			var mapkey string
			mapvalue := []byte{}
			for iNdEx < postIndex {
				entryPreIndex := iNdEx
				var wire uint64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowMsgDetail
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					wire |= uint64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				fieldNum := int32(wire >> 3)
				if fieldNum == 1 {
					var stringLenmapkey uint64
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowMsgDetail
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						stringLenmapkey |= uint64(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					intStringLenmapkey := int(stringLenmapkey)
					if intStringLenmapkey < 0 {
						return ErrInvalidLengthMsgDetail
					}
					postStringIndexmapkey := iNdEx + intStringLenmapkey
					if postStringIndexmapkey < 0 {
						return ErrInvalidLengthMsgDetail
					}
					if postStringIndexmapkey > l {
						return io.ErrUnexpectedEOF
					}
					mapkey = string(dAtA[iNdEx:postStringIndexmapkey])
					iNdEx = postStringIndexmapkey
				} else if fieldNum == 2 {
					var mapbyteLen uint64
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowMsgDetail
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						mapbyteLen |= uint64(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					intMapbyteLen := int(mapbyteLen)
					if intMapbyteLen < 0 {
						return ErrInvalidLengthMsgDetail
					}
					postbytesIndex := iNdEx + intMapbyteLen
					if postbytesIndex < 0 {
						return ErrInvalidLengthMsgDetail
					}
					if postbytesIndex > l {
						return io.ErrUnexpectedEOF
					}
					mapvalue = make([]byte, mapbyteLen)
					copy(mapvalue, dAtA[iNdEx:postbytesIndex])
					iNdEx = postbytesIndex
				} else {
					iNdEx = entryPreIndex
					skippy, err := skipMsgDetail(dAtA[iNdEx:])
					if err != nil {
						return err
					}
					if skippy < 0 {
						return ErrInvalidLengthMsgDetail
					}
					if (iNdEx + skippy) > postIndex {
						return io.ErrUnexpectedEOF
					}
					iNdEx += skippy
				}
			}
			m.Capacity[mapkey] = mapvalue
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Allocatable", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMsgDetail
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthMsgDetail
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthMsgDetail
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Allocatable == nil {
				m.Allocatable = make(map[string][]byte)
			}
			var mapkey string
			mapvalue := []byte{}
			for iNdEx < postIndex {
				entryPreIndex := iNdEx
				var wire uint64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowMsgDetail
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					wire |= uint64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				fieldNum := int32(wire >> 3)
				if fieldNum == 1 {
					var stringLenmapkey uint64
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowMsgDetail
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						stringLenmapkey |= uint64(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					intStringLenmapkey := int(stringLenmapkey)
					if intStringLenmapkey < 0 {
						return ErrInvalidLengthMsgDetail
					}
					postStringIndexmapkey := iNdEx + intStringLenmapkey
					if postStringIndexmapkey < 0 {
						return ErrInvalidLengthMsgDetail
					}
					if postStringIndexmapkey > l {
						return io.ErrUnexpectedEOF
					}
					mapkey = string(dAtA[iNdEx:postStringIndexmapkey])
					iNdEx = postStringIndexmapkey
				} else if fieldNum == 2 {
					var mapbyteLen uint64
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowMsgDetail
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						mapbyteLen |= uint64(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					intMapbyteLen := int(mapbyteLen)
					if intMapbyteLen < 0 {
						return ErrInvalidLengthMsgDetail
					}
					postbytesIndex := iNdEx + intMapbyteLen
					if postbytesIndex < 0 {
						return ErrInvalidLengthMsgDetail
					}
					if postbytesIndex > l {
						return io.ErrUnexpectedEOF
					}
					mapvalue = make([]byte, mapbyteLen)
					copy(mapvalue, dAtA[iNdEx:postbytesIndex])
					iNdEx = postbytesIndex
				} else {
					iNdEx = entryPreIndex
					skippy, err := skipMsgDetail(dAtA[iNdEx:])
					if err != nil {
						return err
					}
					if skippy < 0 {
						return ErrInvalidLengthMsgDetail
					}
					if (iNdEx + skippy) > postIndex {
						return io.ErrUnexpectedEOF
					}
					iNdEx += skippy
				}
			}
			m.Allocatable[mapkey] = mapvalue
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipMsgDetail(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthMsgDetail
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthMsgDetail
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *NodeStatus_Condition) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowMsgDetail
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Condition: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Condition: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Conditions", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMsgDetail
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthMsgDetail
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthMsgDetail
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Conditions = append(m.Conditions, make([]byte, postIndex-iNdEx))
			copy(m.Conditions[len(m.Conditions)-1], dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipMsgDetail(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthMsgDetail
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthMsgDetail
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *PodStatus) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowMsgDetail
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: PodStatus: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: PodStatus: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Uid", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMsgDetail
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthMsgDetail
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthMsgDetail
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Uid = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ContainerStatuses", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMsgDetail
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthMsgDetail
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthMsgDetail
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.ContainerStatuses == nil {
				m.ContainerStatuses = make(map[string]*PodStatus_ContainerStatus)
			}
			var mapkey string
			var mapvalue *PodStatus_ContainerStatus
			for iNdEx < postIndex {
				entryPreIndex := iNdEx
				var wire uint64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowMsgDetail
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					wire |= uint64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				fieldNum := int32(wire >> 3)
				if fieldNum == 1 {
					var stringLenmapkey uint64
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowMsgDetail
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						stringLenmapkey |= uint64(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					intStringLenmapkey := int(stringLenmapkey)
					if intStringLenmapkey < 0 {
						return ErrInvalidLengthMsgDetail
					}
					postStringIndexmapkey := iNdEx + intStringLenmapkey
					if postStringIndexmapkey < 0 {
						return ErrInvalidLengthMsgDetail
					}
					if postStringIndexmapkey > l {
						return io.ErrUnexpectedEOF
					}
					mapkey = string(dAtA[iNdEx:postStringIndexmapkey])
					iNdEx = postStringIndexmapkey
				} else if fieldNum == 2 {
					var mapmsglen int
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowMsgDetail
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						mapmsglen |= int(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					if mapmsglen < 0 {
						return ErrInvalidLengthMsgDetail
					}
					postmsgIndex := iNdEx + mapmsglen
					if postmsgIndex < 0 {
						return ErrInvalidLengthMsgDetail
					}
					if postmsgIndex > l {
						return io.ErrUnexpectedEOF
					}
					mapvalue = &PodStatus_ContainerStatus{}
					if err := mapvalue.Unmarshal(dAtA[iNdEx:postmsgIndex]); err != nil {
						return err
					}
					iNdEx = postmsgIndex
				} else {
					iNdEx = entryPreIndex
					skippy, err := skipMsgDetail(dAtA[iNdEx:])
					if err != nil {
						return err
					}
					if skippy < 0 {
						return ErrInvalidLengthMsgDetail
					}
					if (iNdEx + skippy) > postIndex {
						return io.ErrUnexpectedEOF
					}
					iNdEx += skippy
				}
			}
			m.ContainerStatuses[mapkey] = mapvalue
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipMsgDetail(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthMsgDetail
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthMsgDetail
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *PodStatus_ContainerStatus) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowMsgDetail
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ContainerStatus: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ContainerStatus: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ContainerId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMsgDetail
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthMsgDetail
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthMsgDetail
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ContainerId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ImageId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMsgDetail
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthMsgDetail
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthMsgDetail
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ImageId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field CreatedAt", wireType)
			}
			m.CreatedAt = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMsgDetail
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.CreatedAt |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field StartedAt", wireType)
			}
			m.StartedAt = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMsgDetail
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.StartedAt |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 6:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field FinishedAt", wireType)
			}
			m.FinishedAt = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMsgDetail
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.FinishedAt |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 7:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ExitCode", wireType)
			}
			m.ExitCode = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMsgDetail
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ExitCode |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 11:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Reason", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMsgDetail
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthMsgDetail
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthMsgDetail
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Reason = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 12:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Message", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMsgDetail
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthMsgDetail
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthMsgDetail
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Message = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipMsgDetail(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthMsgDetail
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthMsgDetail
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *PodStatusList) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowMsgDetail
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: PodStatusList: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: PodStatusList: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Pods", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMsgDetail
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthMsgDetail
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthMsgDetail
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Pods = append(m.Pods, &PodStatus{})
			if err := m.Pods[len(m.Pods)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipMsgDetail(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthMsgDetail
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthMsgDetail
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *Data) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowMsgDetail
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Data: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Data: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Kind", wireType)
			}
			m.Kind = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMsgDetail
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Kind |= Data_Kind(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Data", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMsgDetail
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthMsgDetail
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthMsgDetail
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Data = append(m.Data[:0], dAtA[iNdEx:postIndex]...)
			if m.Data == nil {
				m.Data = []byte{}
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipMsgDetail(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthMsgDetail
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthMsgDetail
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *Error) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowMsgDetail
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Error: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Error: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Kind", wireType)
			}
			m.Kind = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMsgDetail
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Kind |= Error_Kind(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Description", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMsgDetail
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthMsgDetail
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthMsgDetail
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Description = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipMsgDetail(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthMsgDetail
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthMsgDetail
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipMsgDetail(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowMsgDetail
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowMsgDetail
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
			return iNdEx, nil
		case 1:
			iNdEx += 8
			return iNdEx, nil
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowMsgDetail
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthMsgDetail
			}
			iNdEx += length
			if iNdEx < 0 {
				return 0, ErrInvalidLengthMsgDetail
			}
			return iNdEx, nil
		case 3:
			for {
				var innerWire uint64
				var start int = iNdEx
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return 0, ErrIntOverflowMsgDetail
					}
					if iNdEx >= l {
						return 0, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					innerWire |= (uint64(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				innerWireType := int(innerWire & 0x7)
				if innerWireType == 4 {
					break
				}
				next, err := skipMsgDetail(dAtA[start:])
				if err != nil {
					return 0, err
				}
				iNdEx = start + next
				if iNdEx < 0 {
					return 0, ErrInvalidLengthMsgDetail
				}
			}
			return iNdEx, nil
		case 4:
			return iNdEx, nil
		case 5:
			iNdEx += 4
			return iNdEx, nil
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
	}
	panic("unreachable")
}

var (
	ErrInvalidLengthMsgDetail = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowMsgDetail   = fmt.Errorf("proto: integer overflow")
)
