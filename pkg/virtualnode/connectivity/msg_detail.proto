syntax = "proto3";

package connectivity;

import "github.com/gogo/protobuf/gogoproto/gogo.proto";

option (gogoproto.marshaler_all) = true;
option (gogoproto.unmarshaler_all) = true;
option (gogoproto.sizer_all) = true;
option (gogoproto.messagename_all) = true;

message ContainerRuntimeInfo {
    string name = 1;
    string version = 2;
}

// replacement of corev1.NodeSystemInfo
message NodeSystemInfo {

    string os = 1;
    string os_image = 2;
    string arch = 3;
    string kernel_version = 4;

    string boot_id = 11;
    string machine_id = 12;
    string system_uuid = 13;

    ContainerRuntimeInfo runtime_info = 21;
}

// replacement of corev1.ResourceList
message NodeResources {
    uint64 cpu_count = 1;
    uint64 memory_bytes = 2;
    uint64 storage_bytes = 3;
    uint64 pod_count = 4;
}

message NodeConditions {
    enum Condition {
        Unknown = 0;
        Healthy = 1;
        Unhealthy = 2;
    }

    Condition ready = 1;
    Condition memory = 2;
    Condition disk = 3;
    Condition pid = 4;
    Condition network = 5;
    Condition pod = 6;
}

message NodeStatus {
    NodeSystemInfo system_info = 1;
    NodeResources capacity = 2;
    NodeResources allocatable = 3;
    NodeConditions conditions = 4;
}

message PodStatus {
    enum State {
        StateUnknown = 0;
        StatePending = 1;
        StateRunning = 2;
        StateSucceeded = 3;
        StateFailed = 4;
    }

    message ContainerStatus {
        string container_id = 1;
        string image_id = 2;

        // time values in unix nano
        int64 created_at = 4;
        int64 started_at = 5;
        int64 finished_at = 6;
        int32 exit_code = 7;
        int32 restart_count = 8;

        string reason = 11;
        string message = 12;
    }

    // metadata
    string uid = 1;
    // status
    map<string, ContainerStatus> container_statuses = 2;
}

message PodStatusList {
    repeated PodStatus pods = 1;
}

message Data {
    enum Kind {
        STDOUT = 0;
        STDERR = 1;
        OTHER = 2;
    }

    Kind kind = 1;
    bytes data = 2;
    // seqence to maintain
    uint64 seq = 3;
}

message Error {
    enum Kind {
        ErrCommon = 0;
        ErrNotFound = 1;
        ErrAlreadyExists = 2;
        // work not supported, aranya should ignore this error 
        // and cancel work
        ErrNotSupported = 3;
    }

    Kind kind = 1;
    string description = 2;
}
