// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: connectivity.proto

package connectivity

import (
	context "context"
	fmt "fmt"
	_ "github.com/gogo/protobuf/gogoproto"
	proto "github.com/gogo/protobuf/proto"
	grpc "google.golang.org/grpc"
	io "io"
	math "math"
	reflect "reflect"
	strings "strings"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion2 // please upgrade the proto package

type Msg struct {
	SessionId uint64 `protobuf:"varint,1,opt,name=session_id,json=sessionId,proto3" json:"session_id,omitempty"`
	Completed bool   `protobuf:"varint,2,opt,name=completed,proto3" json:"completed,omitempty"`
	// Types that are valid to be assigned to Msg:
	//	*Msg_Error
	//	*Msg_Data
	//	*Msg_NodeStatus
	//	*Msg_PodStatus
	//	*Msg_PodStatusList
	Msg isMsg_Msg `protobuf_oneof:"msg"`
}

func (m *Msg) Reset()      { *m = Msg{} }
func (*Msg) ProtoMessage() {}
func (*Msg) Descriptor() ([]byte, []int) {
	return fileDescriptor_2872c2021a21e8fe, []int{0}
}
func (m *Msg) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Msg) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Msg.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *Msg) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Msg.Merge(m, src)
}
func (m *Msg) XXX_Size() int {
	return m.Size()
}
func (m *Msg) XXX_DiscardUnknown() {
	xxx_messageInfo_Msg.DiscardUnknown(m)
}

var xxx_messageInfo_Msg proto.InternalMessageInfo

type isMsg_Msg interface {
	isMsg_Msg()
	Equal(interface{}) bool
	MarshalTo([]byte) (int, error)
	Size() int
}

type Msg_Error struct {
	Error *Error `protobuf:"bytes,11,opt,name=error,proto3,oneof"`
}
type Msg_Data struct {
	Data *Data `protobuf:"bytes,12,opt,name=data,proto3,oneof"`
}
type Msg_NodeStatus struct {
	NodeStatus *NodeStatus `protobuf:"bytes,13,opt,name=node_status,json=nodeStatus,proto3,oneof"`
}
type Msg_PodStatus struct {
	PodStatus *PodStatus `protobuf:"bytes,14,opt,name=pod_status,json=podStatus,proto3,oneof"`
}
type Msg_PodStatusList struct {
	PodStatusList *PodStatusList `protobuf:"bytes,15,opt,name=pod_status_list,json=podStatusList,proto3,oneof"`
}

func (*Msg_Error) isMsg_Msg()         {}
func (*Msg_Data) isMsg_Msg()          {}
func (*Msg_NodeStatus) isMsg_Msg()    {}
func (*Msg_PodStatus) isMsg_Msg()     {}
func (*Msg_PodStatusList) isMsg_Msg() {}

func (m *Msg) GetMsg() isMsg_Msg {
	if m != nil {
		return m.Msg
	}
	return nil
}

func (m *Msg) GetSessionId() uint64 {
	if m != nil {
		return m.SessionId
	}
	return 0
}

func (m *Msg) GetCompleted() bool {
	if m != nil {
		return m.Completed
	}
	return false
}

func (m *Msg) GetError() *Error {
	if x, ok := m.GetMsg().(*Msg_Error); ok {
		return x.Error
	}
	return nil
}

func (m *Msg) GetData() *Data {
	if x, ok := m.GetMsg().(*Msg_Data); ok {
		return x.Data
	}
	return nil
}

func (m *Msg) GetNodeStatus() *NodeStatus {
	if x, ok := m.GetMsg().(*Msg_NodeStatus); ok {
		return x.NodeStatus
	}
	return nil
}

func (m *Msg) GetPodStatus() *PodStatus {
	if x, ok := m.GetMsg().(*Msg_PodStatus); ok {
		return x.PodStatus
	}
	return nil
}

func (m *Msg) GetPodStatusList() *PodStatusList {
	if x, ok := m.GetMsg().(*Msg_PodStatusList); ok {
		return x.PodStatusList
	}
	return nil
}

// XXX_OneofFuncs is for the internal use of the proto package.
func (*Msg) XXX_OneofFuncs() (func(msg proto.Message, b *proto.Buffer) error, func(msg proto.Message, tag, wire int, b *proto.Buffer) (bool, error), func(msg proto.Message) (n int), []interface{}) {
	return _Msg_OneofMarshaler, _Msg_OneofUnmarshaler, _Msg_OneofSizer, []interface{}{
		(*Msg_Error)(nil),
		(*Msg_Data)(nil),
		(*Msg_NodeStatus)(nil),
		(*Msg_PodStatus)(nil),
		(*Msg_PodStatusList)(nil),
	}
}

func _Msg_OneofMarshaler(msg proto.Message, b *proto.Buffer) error {
	m := msg.(*Msg)
	// msg
	switch x := m.Msg.(type) {
	case *Msg_Error:
		_ = b.EncodeVarint(11<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.Error); err != nil {
			return err
		}
	case *Msg_Data:
		_ = b.EncodeVarint(12<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.Data); err != nil {
			return err
		}
	case *Msg_NodeStatus:
		_ = b.EncodeVarint(13<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.NodeStatus); err != nil {
			return err
		}
	case *Msg_PodStatus:
		_ = b.EncodeVarint(14<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.PodStatus); err != nil {
			return err
		}
	case *Msg_PodStatusList:
		_ = b.EncodeVarint(15<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.PodStatusList); err != nil {
			return err
		}
	case nil:
	default:
		return fmt.Errorf("Msg.Msg has unexpected type %T", x)
	}
	return nil
}

func _Msg_OneofUnmarshaler(msg proto.Message, tag, wire int, b *proto.Buffer) (bool, error) {
	m := msg.(*Msg)
	switch tag {
	case 11: // msg.error
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(Error)
		err := b.DecodeMessage(msg)
		m.Msg = &Msg_Error{msg}
		return true, err
	case 12: // msg.data
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(Data)
		err := b.DecodeMessage(msg)
		m.Msg = &Msg_Data{msg}
		return true, err
	case 13: // msg.node_status
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(NodeStatus)
		err := b.DecodeMessage(msg)
		m.Msg = &Msg_NodeStatus{msg}
		return true, err
	case 14: // msg.pod_status
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(PodStatus)
		err := b.DecodeMessage(msg)
		m.Msg = &Msg_PodStatus{msg}
		return true, err
	case 15: // msg.pod_status_list
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(PodStatusList)
		err := b.DecodeMessage(msg)
		m.Msg = &Msg_PodStatusList{msg}
		return true, err
	default:
		return false, nil
	}
}

func _Msg_OneofSizer(msg proto.Message) (n int) {
	m := msg.(*Msg)
	// msg
	switch x := m.Msg.(type) {
	case *Msg_Error:
		s := proto.Size(x.Error)
		n += 1 // tag and wire
		n += proto.SizeVarint(uint64(s))
		n += s
	case *Msg_Data:
		s := proto.Size(x.Data)
		n += 1 // tag and wire
		n += proto.SizeVarint(uint64(s))
		n += s
	case *Msg_NodeStatus:
		s := proto.Size(x.NodeStatus)
		n += 1 // tag and wire
		n += proto.SizeVarint(uint64(s))
		n += s
	case *Msg_PodStatus:
		s := proto.Size(x.PodStatus)
		n += 1 // tag and wire
		n += proto.SizeVarint(uint64(s))
		n += s
	case *Msg_PodStatusList:
		s := proto.Size(x.PodStatusList)
		n += 1 // tag and wire
		n += proto.SizeVarint(uint64(s))
		n += s
	case nil:
	default:
		panic(fmt.Sprintf("proto: unexpected type %T in oneof", x))
	}
	return n
}

func (*Msg) XXX_MessageName() string {
	return "connectivity.Msg"
}

type Cmd struct {
	SessionId uint64 `protobuf:"varint,1,opt,name=session_id,json=sessionId,proto3" json:"session_id,omitempty"`
	// Types that are valid to be assigned to Cmd:
	//	*Cmd_Node
	//	*Cmd_Pod
	//	*Cmd_CloseSession
	//	*Cmd_Reject
	Cmd isCmd_Cmd `protobuf_oneof:"cmd"`
}

func (m *Cmd) Reset()      { *m = Cmd{} }
func (*Cmd) ProtoMessage() {}
func (*Cmd) Descriptor() ([]byte, []int) {
	return fileDescriptor_2872c2021a21e8fe, []int{1}
}
func (m *Cmd) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Cmd) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Cmd.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *Cmd) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Cmd.Merge(m, src)
}
func (m *Cmd) XXX_Size() int {
	return m.Size()
}
func (m *Cmd) XXX_DiscardUnknown() {
	xxx_messageInfo_Cmd.DiscardUnknown(m)
}

var xxx_messageInfo_Cmd proto.InternalMessageInfo

type isCmd_Cmd interface {
	isCmd_Cmd()
	Equal(interface{}) bool
	MarshalTo([]byte) (int, error)
	Size() int
}

type Cmd_Node struct {
	Node *NodeCmd `protobuf:"bytes,11,opt,name=node,proto3,oneof"`
}
type Cmd_Pod struct {
	Pod *PodCmd `protobuf:"bytes,12,opt,name=pod,proto3,oneof"`
}
type Cmd_CloseSession struct {
	CloseSession uint64 `protobuf:"varint,13,opt,name=close_session,json=closeSession,proto3,oneof"`
}
type Cmd_Reject struct {
	Reject *RejectCmd `protobuf:"bytes,14,opt,name=reject,proto3,oneof"`
}

func (*Cmd_Node) isCmd_Cmd()         {}
func (*Cmd_Pod) isCmd_Cmd()          {}
func (*Cmd_CloseSession) isCmd_Cmd() {}
func (*Cmd_Reject) isCmd_Cmd()       {}

func (m *Cmd) GetCmd() isCmd_Cmd {
	if m != nil {
		return m.Cmd
	}
	return nil
}

func (m *Cmd) GetSessionId() uint64 {
	if m != nil {
		return m.SessionId
	}
	return 0
}

func (m *Cmd) GetNode() *NodeCmd {
	if x, ok := m.GetCmd().(*Cmd_Node); ok {
		return x.Node
	}
	return nil
}

func (m *Cmd) GetPod() *PodCmd {
	if x, ok := m.GetCmd().(*Cmd_Pod); ok {
		return x.Pod
	}
	return nil
}

func (m *Cmd) GetCloseSession() uint64 {
	if x, ok := m.GetCmd().(*Cmd_CloseSession); ok {
		return x.CloseSession
	}
	return 0
}

func (m *Cmd) GetReject() *RejectCmd {
	if x, ok := m.GetCmd().(*Cmd_Reject); ok {
		return x.Reject
	}
	return nil
}

// XXX_OneofFuncs is for the internal use of the proto package.
func (*Cmd) XXX_OneofFuncs() (func(msg proto.Message, b *proto.Buffer) error, func(msg proto.Message, tag, wire int, b *proto.Buffer) (bool, error), func(msg proto.Message) (n int), []interface{}) {
	return _Cmd_OneofMarshaler, _Cmd_OneofUnmarshaler, _Cmd_OneofSizer, []interface{}{
		(*Cmd_Node)(nil),
		(*Cmd_Pod)(nil),
		(*Cmd_CloseSession)(nil),
		(*Cmd_Reject)(nil),
	}
}

func _Cmd_OneofMarshaler(msg proto.Message, b *proto.Buffer) error {
	m := msg.(*Cmd)
	// cmd
	switch x := m.Cmd.(type) {
	case *Cmd_Node:
		_ = b.EncodeVarint(11<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.Node); err != nil {
			return err
		}
	case *Cmd_Pod:
		_ = b.EncodeVarint(12<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.Pod); err != nil {
			return err
		}
	case *Cmd_CloseSession:
		_ = b.EncodeVarint(13<<3 | proto.WireVarint)
		_ = b.EncodeVarint(uint64(x.CloseSession))
	case *Cmd_Reject:
		_ = b.EncodeVarint(14<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.Reject); err != nil {
			return err
		}
	case nil:
	default:
		return fmt.Errorf("Cmd.Cmd has unexpected type %T", x)
	}
	return nil
}

func _Cmd_OneofUnmarshaler(msg proto.Message, tag, wire int, b *proto.Buffer) (bool, error) {
	m := msg.(*Cmd)
	switch tag {
	case 11: // cmd.node
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(NodeCmd)
		err := b.DecodeMessage(msg)
		m.Cmd = &Cmd_Node{msg}
		return true, err
	case 12: // cmd.pod
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(PodCmd)
		err := b.DecodeMessage(msg)
		m.Cmd = &Cmd_Pod{msg}
		return true, err
	case 13: // cmd.close_session
		if wire != proto.WireVarint {
			return true, proto.ErrInternalBadWireType
		}
		x, err := b.DecodeVarint()
		m.Cmd = &Cmd_CloseSession{x}
		return true, err
	case 14: // cmd.reject
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(RejectCmd)
		err := b.DecodeMessage(msg)
		m.Cmd = &Cmd_Reject{msg}
		return true, err
	default:
		return false, nil
	}
}

func _Cmd_OneofSizer(msg proto.Message) (n int) {
	m := msg.(*Cmd)
	// cmd
	switch x := m.Cmd.(type) {
	case *Cmd_Node:
		s := proto.Size(x.Node)
		n += 1 // tag and wire
		n += proto.SizeVarint(uint64(s))
		n += s
	case *Cmd_Pod:
		s := proto.Size(x.Pod)
		n += 1 // tag and wire
		n += proto.SizeVarint(uint64(s))
		n += s
	case *Cmd_CloseSession:
		n += 1 // tag and wire
		n += proto.SizeVarint(uint64(x.CloseSession))
	case *Cmd_Reject:
		s := proto.Size(x.Reject)
		n += 1 // tag and wire
		n += proto.SizeVarint(uint64(s))
		n += s
	case nil:
	default:
		panic(fmt.Sprintf("proto: unexpected type %T in oneof", x))
	}
	return n
}

func (*Cmd) XXX_MessageName() string {
	return "connectivity.Cmd"
}
func init() {
	proto.RegisterType((*Msg)(nil), "connectivity.Msg")
	proto.RegisterType((*Cmd)(nil), "connectivity.Cmd")
}

func init() { proto.RegisterFile("connectivity.proto", fileDescriptor_2872c2021a21e8fe) }

var fileDescriptor_2872c2021a21e8fe = []byte{
	// 468 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x84, 0x92, 0xc1, 0x6e, 0xd3, 0x30,
	0x18, 0xc7, 0xed, 0x35, 0x9b, 0xe8, 0xd7, 0x96, 0x81, 0x01, 0x11, 0x15, 0xb0, 0xaa, 0x49, 0x48,
	0x91, 0x26, 0xba, 0x31, 0x2e, 0x93, 0xb8, 0xa0, 0x95, 0x49, 0x41, 0x62, 0x08, 0xa5, 0x0f, 0x10,
	0xa5, 0xb6, 0x09, 0x41, 0x75, 0x1c, 0xc5, 0x2e, 0xd2, 0x6e, 0x3c, 0x02, 0x8f, 0xc1, 0xa3, 0xec,
	0xd8, 0xe3, 0x0e, 0x08, 0xd1, 0xf4, 0xc2, 0x71, 0x8f, 0x80, 0xe2, 0xa4, 0x5b, 0x43, 0x41, 0xdc,
	0xfa, 0xfd, 0xfd, 0xfb, 0xb9, 0xfe, 0xfe, 0x0a, 0x10, 0xa6, 0xd2, 0x54, 0x30, 0x93, 0x7c, 0x4e,
	0xcc, 0xf9, 0x30, 0xcb, 0x95, 0x51, 0xa4, 0xbb, 0x9e, 0xf5, 0x9f, 0xc5, 0x89, 0xf9, 0x38, 0x9b,
	0x0c, 0x99, 0x92, 0x07, 0xb1, 0x8a, 0xd5, 0x81, 0x85, 0x26, 0xb3, 0x0f, 0x76, 0xb2, 0x83, 0xfd,
	0x55, 0xc9, 0xfd, 0x3b, 0x4c, 0xf2, 0x90, 0x0b, 0x13, 0x25, 0xd3, 0x55, 0x22, 0x75, 0xdc, 0x48,
	0xf6, 0x7e, 0x6c, 0x41, 0xeb, 0x4c, 0xc7, 0xe4, 0x09, 0x80, 0x16, 0x5a, 0x27, 0x2a, 0x0d, 0x13,
	0xee, 0xe2, 0x01, 0xf6, 0x9c, 0xa0, 0x5d, 0x27, 0x6f, 0x38, 0x79, 0x0c, 0x6d, 0xa6, 0x64, 0x36,
	0x15, 0x46, 0x70, 0x77, 0x6b, 0x80, 0xbd, 0x5b, 0xc1, 0x4d, 0x40, 0xf6, 0x61, 0x5b, 0xe4, 0xb9,
	0xca, 0xdd, 0xce, 0x00, 0x7b, 0x9d, 0xa3, 0x7b, 0xc3, 0xc6, 0x26, 0xa7, 0xe5, 0x91, 0x8f, 0x82,
	0x8a, 0x21, 0x1e, 0x38, 0x3c, 0x32, 0x91, 0xdb, 0xb5, 0x2c, 0x69, 0xb2, 0xaf, 0x23, 0x13, 0xf9,
	0x28, 0xb0, 0x04, 0x79, 0x09, 0x9d, 0x54, 0x71, 0x11, 0x6a, 0x13, 0x99, 0x99, 0x76, 0x7b, 0x56,
	0x70, 0x9b, 0xc2, 0x3b, 0xc5, 0xc5, 0xd8, 0x9e, 0xfb, 0x28, 0x80, 0xf4, 0x7a, 0x22, 0xc7, 0x00,
	0x99, 0xe2, 0x2b, 0xf7, 0xb6, 0x75, 0x1f, 0x36, 0xdd, 0xf7, 0x8a, 0x5f, 0xab, 0xed, 0x6c, 0x35,
	0x90, 0x53, 0xd8, 0xbd, 0x31, 0xc3, 0x69, 0xa2, 0x8d, 0xbb, 0x6b, 0xf5, 0x47, 0xff, 0xd0, 0xdf,
	0x26, 0xda, 0xf8, 0x28, 0xe8, 0x65, 0xeb, 0xc1, 0xc9, 0x36, 0xb4, 0xa4, 0x8e, 0xf7, 0xbe, 0x63,
	0x68, 0x8d, 0x24, 0xff, 0x5f, 0xc1, 0xfb, 0xe0, 0x94, 0x8f, 0xaf, 0x1b, 0x7c, 0xb0, 0xb9, 0xe4,
	0x48, 0xf2, 0xb2, 0x98, 0x12, 0x22, 0x1e, 0xb4, 0x32, 0xc5, 0xeb, 0x06, 0xef, 0x6f, 0xbc, 0xaa,
	0x42, 0x4b, 0x84, 0x3c, 0x85, 0x1e, 0x9b, 0x2a, 0x2d, 0xc2, 0xfa, 0x9f, 0x6c, 0x89, 0x8e, 0x8f,
	0x82, 0xae, 0x8d, 0xc7, 0x55, 0x4a, 0x9e, 0xc3, 0x4e, 0x2e, 0x3e, 0x09, 0x66, 0xfe, 0x5e, 0x54,
	0x60, 0xcf, 0xaa, 0x6b, 0x6b, 0xb0, 0x5c, 0x8f, 0x49, 0x7e, 0xf4, 0x0a, 0xba, 0xa3, 0x35, 0x94,
	0x1c, 0x82, 0x33, 0x3e, 0x4f, 0x19, 0xb9, 0xdb, 0xbc, 0xe1, 0x4c, 0xc7, 0xfd, 0x3f, 0xa2, 0x91,
	0xe4, 0x1e, 0x3e, 0xc4, 0x27, 0xc7, 0xf3, 0x05, 0x45, 0x97, 0x0b, 0x8a, 0xae, 0x16, 0x14, 0x7f,
	0x29, 0x28, 0xfe, 0x56, 0x50, 0x7c, 0x51, 0x50, 0x3c, 0x2f, 0x28, 0xfe, 0x59, 0x50, 0xfc, 0xab,
	0xa0, 0xe8, 0xaa, 0xa0, 0xf8, 0xeb, 0x92, 0xa2, 0x8b, 0x25, 0xc5, 0xf3, 0x25, 0x45, 0x97, 0x4b,
	0x8a, 0x26, 0x3b, 0xf6, 0x13, 0x7e, 0xf1, 0x3b, 0x00, 0x00, 0xff, 0xff, 0xdb, 0x85, 0x1f, 0xa2,
	0x39, 0x03, 0x00, 0x00,
}

func (this *Msg) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*Msg)
	if !ok {
		that2, ok := that.(Msg)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.SessionId != that1.SessionId {
		return false
	}
	if this.Completed != that1.Completed {
		return false
	}
	if that1.Msg == nil {
		if this.Msg != nil {
			return false
		}
	} else if this.Msg == nil {
		return false
	} else if !this.Msg.Equal(that1.Msg) {
		return false
	}
	return true
}
func (this *Msg_Error) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*Msg_Error)
	if !ok {
		that2, ok := that.(Msg_Error)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.Error.Equal(that1.Error) {
		return false
	}
	return true
}
func (this *Msg_Data) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*Msg_Data)
	if !ok {
		that2, ok := that.(Msg_Data)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.Data.Equal(that1.Data) {
		return false
	}
	return true
}
func (this *Msg_NodeStatus) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*Msg_NodeStatus)
	if !ok {
		that2, ok := that.(Msg_NodeStatus)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.NodeStatus.Equal(that1.NodeStatus) {
		return false
	}
	return true
}
func (this *Msg_PodStatus) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*Msg_PodStatus)
	if !ok {
		that2, ok := that.(Msg_PodStatus)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.PodStatus.Equal(that1.PodStatus) {
		return false
	}
	return true
}
func (this *Msg_PodStatusList) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*Msg_PodStatusList)
	if !ok {
		that2, ok := that.(Msg_PodStatusList)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.PodStatusList.Equal(that1.PodStatusList) {
		return false
	}
	return true
}
func (this *Cmd) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*Cmd)
	if !ok {
		that2, ok := that.(Cmd)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.SessionId != that1.SessionId {
		return false
	}
	if that1.Cmd == nil {
		if this.Cmd != nil {
			return false
		}
	} else if this.Cmd == nil {
		return false
	} else if !this.Cmd.Equal(that1.Cmd) {
		return false
	}
	return true
}
func (this *Cmd_Node) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*Cmd_Node)
	if !ok {
		that2, ok := that.(Cmd_Node)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.Node.Equal(that1.Node) {
		return false
	}
	return true
}
func (this *Cmd_Pod) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*Cmd_Pod)
	if !ok {
		that2, ok := that.(Cmd_Pod)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.Pod.Equal(that1.Pod) {
		return false
	}
	return true
}
func (this *Cmd_CloseSession) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*Cmd_CloseSession)
	if !ok {
		that2, ok := that.(Cmd_CloseSession)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.CloseSession != that1.CloseSession {
		return false
	}
	return true
}
func (this *Cmd_Reject) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*Cmd_Reject)
	if !ok {
		that2, ok := that.(Cmd_Reject)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.Reject.Equal(that1.Reject) {
		return false
	}
	return true
}
func (this *Msg) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 11)
	s = append(s, "&connectivity.Msg{")
	s = append(s, "SessionId: "+fmt.Sprintf("%#v", this.SessionId)+",\n")
	s = append(s, "Completed: "+fmt.Sprintf("%#v", this.Completed)+",\n")
	if this.Msg != nil {
		s = append(s, "Msg: "+fmt.Sprintf("%#v", this.Msg)+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *Msg_Error) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&connectivity.Msg_Error{` +
		`Error:` + fmt.Sprintf("%#v", this.Error) + `}`}, ", ")
	return s
}
func (this *Msg_Data) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&connectivity.Msg_Data{` +
		`Data:` + fmt.Sprintf("%#v", this.Data) + `}`}, ", ")
	return s
}
func (this *Msg_NodeStatus) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&connectivity.Msg_NodeStatus{` +
		`NodeStatus:` + fmt.Sprintf("%#v", this.NodeStatus) + `}`}, ", ")
	return s
}
func (this *Msg_PodStatus) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&connectivity.Msg_PodStatus{` +
		`PodStatus:` + fmt.Sprintf("%#v", this.PodStatus) + `}`}, ", ")
	return s
}
func (this *Msg_PodStatusList) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&connectivity.Msg_PodStatusList{` +
		`PodStatusList:` + fmt.Sprintf("%#v", this.PodStatusList) + `}`}, ", ")
	return s
}
func (this *Cmd) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 9)
	s = append(s, "&connectivity.Cmd{")
	s = append(s, "SessionId: "+fmt.Sprintf("%#v", this.SessionId)+",\n")
	if this.Cmd != nil {
		s = append(s, "Cmd: "+fmt.Sprintf("%#v", this.Cmd)+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *Cmd_Node) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&connectivity.Cmd_Node{` +
		`Node:` + fmt.Sprintf("%#v", this.Node) + `}`}, ", ")
	return s
}
func (this *Cmd_Pod) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&connectivity.Cmd_Pod{` +
		`Pod:` + fmt.Sprintf("%#v", this.Pod) + `}`}, ", ")
	return s
}
func (this *Cmd_CloseSession) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&connectivity.Cmd_CloseSession{` +
		`CloseSession:` + fmt.Sprintf("%#v", this.CloseSession) + `}`}, ", ")
	return s
}
func (this *Cmd_Reject) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&connectivity.Cmd_Reject{` +
		`Reject:` + fmt.Sprintf("%#v", this.Reject) + `}`}, ", ")
	return s
}
func valueToGoStringConnectivity(v interface{}, typ string) string {
	rv := reflect.ValueOf(v)
	if rv.IsNil() {
		return "nil"
	}
	pv := reflect.Indirect(rv).Interface()
	return fmt.Sprintf("func(v %v) *%v { return &v } ( %#v )", typ, typ, pv)
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// ConnectivityClient is the client API for Connectivity service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type ConnectivityClient interface {
	Sync(ctx context.Context, opts ...grpc.CallOption) (Connectivity_SyncClient, error)
}

type connectivityClient struct {
	cc *grpc.ClientConn
}

func NewConnectivityClient(cc *grpc.ClientConn) ConnectivityClient {
	return &connectivityClient{cc}
}

func (c *connectivityClient) Sync(ctx context.Context, opts ...grpc.CallOption) (Connectivity_SyncClient, error) {
	stream, err := c.cc.NewStream(ctx, &_Connectivity_serviceDesc.Streams[0], "/connectivity.Connectivity/Sync", opts...)
	if err != nil {
		return nil, err
	}
	x := &connectivitySyncClient{stream}
	return x, nil
}

type Connectivity_SyncClient interface {
	Send(*Msg) error
	Recv() (*Cmd, error)
	grpc.ClientStream
}

type connectivitySyncClient struct {
	grpc.ClientStream
}

func (x *connectivitySyncClient) Send(m *Msg) error {
	return x.ClientStream.SendMsg(m)
}

func (x *connectivitySyncClient) Recv() (*Cmd, error) {
	m := new(Cmd)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// ConnectivityServer is the server API for Connectivity service.
type ConnectivityServer interface {
	Sync(Connectivity_SyncServer) error
}

func RegisterConnectivityServer(s *grpc.Server, srv ConnectivityServer) {
	s.RegisterService(&_Connectivity_serviceDesc, srv)
}

func _Connectivity_Sync_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(ConnectivityServer).Sync(&connectivitySyncServer{stream})
}

type Connectivity_SyncServer interface {
	Send(*Cmd) error
	Recv() (*Msg, error)
	grpc.ServerStream
}

type connectivitySyncServer struct {
	grpc.ServerStream
}

func (x *connectivitySyncServer) Send(m *Cmd) error {
	return x.ServerStream.SendMsg(m)
}

func (x *connectivitySyncServer) Recv() (*Msg, error) {
	m := new(Msg)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

var _Connectivity_serviceDesc = grpc.ServiceDesc{
	ServiceName: "connectivity.Connectivity",
	HandlerType: (*ConnectivityServer)(nil),
	Methods:     []grpc.MethodDesc{},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "Sync",
			Handler:       _Connectivity_Sync_Handler,
			ServerStreams: true,
			ClientStreams: true,
		},
	},
	Metadata: "connectivity.proto",
}

func (m *Msg) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Msg) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.SessionId != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintConnectivity(dAtA, i, uint64(m.SessionId))
	}
	if m.Completed {
		dAtA[i] = 0x10
		i++
		if m.Completed {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i++
	}
	if m.Msg != nil {
		nn1, err := m.Msg.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += nn1
	}
	return i, nil
}

func (m *Msg_Error) MarshalTo(dAtA []byte) (int, error) {
	i := 0
	if m.Error != nil {
		dAtA[i] = 0x5a
		i++
		i = encodeVarintConnectivity(dAtA, i, uint64(m.Error.Size()))
		n2, err := m.Error.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n2
	}
	return i, nil
}
func (m *Msg_Data) MarshalTo(dAtA []byte) (int, error) {
	i := 0
	if m.Data != nil {
		dAtA[i] = 0x62
		i++
		i = encodeVarintConnectivity(dAtA, i, uint64(m.Data.Size()))
		n3, err := m.Data.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n3
	}
	return i, nil
}
func (m *Msg_NodeStatus) MarshalTo(dAtA []byte) (int, error) {
	i := 0
	if m.NodeStatus != nil {
		dAtA[i] = 0x6a
		i++
		i = encodeVarintConnectivity(dAtA, i, uint64(m.NodeStatus.Size()))
		n4, err := m.NodeStatus.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n4
	}
	return i, nil
}
func (m *Msg_PodStatus) MarshalTo(dAtA []byte) (int, error) {
	i := 0
	if m.PodStatus != nil {
		dAtA[i] = 0x72
		i++
		i = encodeVarintConnectivity(dAtA, i, uint64(m.PodStatus.Size()))
		n5, err := m.PodStatus.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n5
	}
	return i, nil
}
func (m *Msg_PodStatusList) MarshalTo(dAtA []byte) (int, error) {
	i := 0
	if m.PodStatusList != nil {
		dAtA[i] = 0x7a
		i++
		i = encodeVarintConnectivity(dAtA, i, uint64(m.PodStatusList.Size()))
		n6, err := m.PodStatusList.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n6
	}
	return i, nil
}
func (m *Cmd) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Cmd) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.SessionId != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintConnectivity(dAtA, i, uint64(m.SessionId))
	}
	if m.Cmd != nil {
		nn7, err := m.Cmd.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += nn7
	}
	return i, nil
}

func (m *Cmd_Node) MarshalTo(dAtA []byte) (int, error) {
	i := 0
	if m.Node != nil {
		dAtA[i] = 0x5a
		i++
		i = encodeVarintConnectivity(dAtA, i, uint64(m.Node.Size()))
		n8, err := m.Node.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n8
	}
	return i, nil
}
func (m *Cmd_Pod) MarshalTo(dAtA []byte) (int, error) {
	i := 0
	if m.Pod != nil {
		dAtA[i] = 0x62
		i++
		i = encodeVarintConnectivity(dAtA, i, uint64(m.Pod.Size()))
		n9, err := m.Pod.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n9
	}
	return i, nil
}
func (m *Cmd_CloseSession) MarshalTo(dAtA []byte) (int, error) {
	i := 0
	dAtA[i] = 0x68
	i++
	i = encodeVarintConnectivity(dAtA, i, uint64(m.CloseSession))
	return i, nil
}
func (m *Cmd_Reject) MarshalTo(dAtA []byte) (int, error) {
	i := 0
	if m.Reject != nil {
		dAtA[i] = 0x72
		i++
		i = encodeVarintConnectivity(dAtA, i, uint64(m.Reject.Size()))
		n10, err := m.Reject.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n10
	}
	return i, nil
}
func encodeVarintConnectivity(dAtA []byte, offset int, v uint64) int {
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return offset + 1
}
func (m *Msg) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.SessionId != 0 {
		n += 1 + sovConnectivity(uint64(m.SessionId))
	}
	if m.Completed {
		n += 2
	}
	if m.Msg != nil {
		n += m.Msg.Size()
	}
	return n
}

func (m *Msg_Error) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Error != nil {
		l = m.Error.Size()
		n += 1 + l + sovConnectivity(uint64(l))
	}
	return n
}
func (m *Msg_Data) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Data != nil {
		l = m.Data.Size()
		n += 1 + l + sovConnectivity(uint64(l))
	}
	return n
}
func (m *Msg_NodeStatus) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.NodeStatus != nil {
		l = m.NodeStatus.Size()
		n += 1 + l + sovConnectivity(uint64(l))
	}
	return n
}
func (m *Msg_PodStatus) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.PodStatus != nil {
		l = m.PodStatus.Size()
		n += 1 + l + sovConnectivity(uint64(l))
	}
	return n
}
func (m *Msg_PodStatusList) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.PodStatusList != nil {
		l = m.PodStatusList.Size()
		n += 1 + l + sovConnectivity(uint64(l))
	}
	return n
}
func (m *Cmd) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.SessionId != 0 {
		n += 1 + sovConnectivity(uint64(m.SessionId))
	}
	if m.Cmd != nil {
		n += m.Cmd.Size()
	}
	return n
}

func (m *Cmd_Node) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Node != nil {
		l = m.Node.Size()
		n += 1 + l + sovConnectivity(uint64(l))
	}
	return n
}
func (m *Cmd_Pod) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Pod != nil {
		l = m.Pod.Size()
		n += 1 + l + sovConnectivity(uint64(l))
	}
	return n
}
func (m *Cmd_CloseSession) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	n += 1 + sovConnectivity(uint64(m.CloseSession))
	return n
}
func (m *Cmd_Reject) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Reject != nil {
		l = m.Reject.Size()
		n += 1 + l + sovConnectivity(uint64(l))
	}
	return n
}

func sovConnectivity(x uint64) (n int) {
	for {
		n++
		x >>= 7
		if x == 0 {
			break
		}
	}
	return n
}
func sozConnectivity(x uint64) (n int) {
	return sovConnectivity(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (this *Msg) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&Msg{`,
		`SessionId:` + fmt.Sprintf("%v", this.SessionId) + `,`,
		`Completed:` + fmt.Sprintf("%v", this.Completed) + `,`,
		`Msg:` + fmt.Sprintf("%v", this.Msg) + `,`,
		`}`,
	}, "")
	return s
}
func (this *Msg_Error) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&Msg_Error{`,
		`Error:` + strings.Replace(fmt.Sprintf("%v", this.Error), "Error", "Error", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *Msg_Data) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&Msg_Data{`,
		`Data:` + strings.Replace(fmt.Sprintf("%v", this.Data), "Data", "Data", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *Msg_NodeStatus) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&Msg_NodeStatus{`,
		`NodeStatus:` + strings.Replace(fmt.Sprintf("%v", this.NodeStatus), "NodeStatus", "NodeStatus", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *Msg_PodStatus) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&Msg_PodStatus{`,
		`PodStatus:` + strings.Replace(fmt.Sprintf("%v", this.PodStatus), "PodStatus", "PodStatus", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *Msg_PodStatusList) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&Msg_PodStatusList{`,
		`PodStatusList:` + strings.Replace(fmt.Sprintf("%v", this.PodStatusList), "PodStatusList", "PodStatusList", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *Cmd) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&Cmd{`,
		`SessionId:` + fmt.Sprintf("%v", this.SessionId) + `,`,
		`Cmd:` + fmt.Sprintf("%v", this.Cmd) + `,`,
		`}`,
	}, "")
	return s
}
func (this *Cmd_Node) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&Cmd_Node{`,
		`Node:` + strings.Replace(fmt.Sprintf("%v", this.Node), "NodeCmd", "NodeCmd", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *Cmd_Pod) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&Cmd_Pod{`,
		`Pod:` + strings.Replace(fmt.Sprintf("%v", this.Pod), "PodCmd", "PodCmd", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *Cmd_CloseSession) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&Cmd_CloseSession{`,
		`CloseSession:` + fmt.Sprintf("%v", this.CloseSession) + `,`,
		`}`,
	}, "")
	return s
}
func (this *Cmd_Reject) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&Cmd_Reject{`,
		`Reject:` + strings.Replace(fmt.Sprintf("%v", this.Reject), "RejectCmd", "RejectCmd", 1) + `,`,
		`}`,
	}, "")
	return s
}
func valueToStringConnectivity(v interface{}) string {
	rv := reflect.ValueOf(v)
	if rv.IsNil() {
		return "nil"
	}
	pv := reflect.Indirect(rv).Interface()
	return fmt.Sprintf("*%v", pv)
}
func (m *Msg) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowConnectivity
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Msg: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Msg: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field SessionId", wireType)
			}
			m.SessionId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowConnectivity
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.SessionId |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Completed", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowConnectivity
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Completed = bool(v != 0)
		case 11:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Error", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowConnectivity
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthConnectivity
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthConnectivity
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &Error{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.Msg = &Msg_Error{v}
			iNdEx = postIndex
		case 12:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Data", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowConnectivity
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthConnectivity
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthConnectivity
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &Data{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.Msg = &Msg_Data{v}
			iNdEx = postIndex
		case 13:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field NodeStatus", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowConnectivity
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthConnectivity
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthConnectivity
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &NodeStatus{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.Msg = &Msg_NodeStatus{v}
			iNdEx = postIndex
		case 14:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field PodStatus", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowConnectivity
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthConnectivity
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthConnectivity
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &PodStatus{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.Msg = &Msg_PodStatus{v}
			iNdEx = postIndex
		case 15:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field PodStatusList", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowConnectivity
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthConnectivity
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthConnectivity
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &PodStatusList{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.Msg = &Msg_PodStatusList{v}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipConnectivity(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthConnectivity
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthConnectivity
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *Cmd) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowConnectivity
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Cmd: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Cmd: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field SessionId", wireType)
			}
			m.SessionId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowConnectivity
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.SessionId |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 11:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Node", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowConnectivity
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthConnectivity
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthConnectivity
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &NodeCmd{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.Cmd = &Cmd_Node{v}
			iNdEx = postIndex
		case 12:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Pod", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowConnectivity
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthConnectivity
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthConnectivity
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &PodCmd{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.Cmd = &Cmd_Pod{v}
			iNdEx = postIndex
		case 13:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field CloseSession", wireType)
			}
			var v uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowConnectivity
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Cmd = &Cmd_CloseSession{v}
		case 14:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Reject", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowConnectivity
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthConnectivity
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthConnectivity
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &RejectCmd{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.Cmd = &Cmd_Reject{v}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipConnectivity(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthConnectivity
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthConnectivity
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipConnectivity(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowConnectivity
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowConnectivity
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
			return iNdEx, nil
		case 1:
			iNdEx += 8
			return iNdEx, nil
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowConnectivity
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthConnectivity
			}
			iNdEx += length
			if iNdEx < 0 {
				return 0, ErrInvalidLengthConnectivity
			}
			return iNdEx, nil
		case 3:
			for {
				var innerWire uint64
				var start int = iNdEx
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return 0, ErrIntOverflowConnectivity
					}
					if iNdEx >= l {
						return 0, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					innerWire |= (uint64(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				innerWireType := int(innerWire & 0x7)
				if innerWireType == 4 {
					break
				}
				next, err := skipConnectivity(dAtA[start:])
				if err != nil {
					return 0, err
				}
				iNdEx = start + next
				if iNdEx < 0 {
					return 0, ErrInvalidLengthConnectivity
				}
			}
			return iNdEx, nil
		case 4:
			return iNdEx, nil
		case 5:
			iNdEx += 4
			return iNdEx, nil
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
	}
	panic("unreachable")
}

var (
	ErrInvalidLengthConnectivity = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowConnectivity   = fmt.Errorf("proto: integer overflow")
)
