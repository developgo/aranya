// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: msg_detail.proto

package connectivity

import (
	bytes "bytes"
	fmt "fmt"
	_ "github.com/gogo/protobuf/gogoproto"
	proto "github.com/gogo/protobuf/proto"
	github_com_gogo_protobuf_sortkeys "github.com/gogo/protobuf/sortkeys"
	io "io"
	math "math"
	reflect "reflect"
	strconv "strconv"
	strings "strings"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion2 // please upgrade the proto package

type NodeConditions_Condition int32

const (
	Unknown   NodeConditions_Condition = 0
	Healthy   NodeConditions_Condition = 1
	Unhealthy NodeConditions_Condition = 2
)

var NodeConditions_Condition_name = map[int32]string{
	0: "Unknown",
	1: "Healthy",
	2: "Unhealthy",
}

var NodeConditions_Condition_value = map[string]int32{
	"Unknown":   0,
	"Healthy":   1,
	"Unhealthy": 2,
}

func (NodeConditions_Condition) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_97b3080873330fb4, []int{3, 0}
}

type PodStatus_State int32

const (
	StateUnknown   PodStatus_State = 0
	StatePending   PodStatus_State = 1
	StateRunning   PodStatus_State = 2
	StateSucceeded PodStatus_State = 3
	StateFailed    PodStatus_State = 4
)

var PodStatus_State_name = map[int32]string{
	0: "StateUnknown",
	1: "StatePending",
	2: "StateRunning",
	3: "StateSucceeded",
	4: "StateFailed",
}

var PodStatus_State_value = map[string]int32{
	"StateUnknown":   0,
	"StatePending":   1,
	"StateRunning":   2,
	"StateSucceeded": 3,
	"StateFailed":    4,
}

func (PodStatus_State) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_97b3080873330fb4, []int{5, 0}
}

type Data_Kind int32

const (
	STDOUT Data_Kind = 0
	STDERR Data_Kind = 1
	OTHER  Data_Kind = 2
)

var Data_Kind_name = map[int32]string{
	0: "STDOUT",
	1: "STDERR",
	2: "OTHER",
}

var Data_Kind_value = map[string]int32{
	"STDOUT": 0,
	"STDERR": 1,
	"OTHER":  2,
}

func (Data_Kind) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_97b3080873330fb4, []int{7, 0}
}

type Error_Kind int32

const (
	ErrCommon        Error_Kind = 0
	ErrNotFound      Error_Kind = 1
	ErrAlreadyExists Error_Kind = 2
	// work not supported, aranya should ignore this error
	// and cancel work
	ErrNotSupported Error_Kind = 3
	// ErrTimeout only happen in connectivity server,
	// right after the session is timeout
	ErrTimeout Error_Kind = 4
)

var Error_Kind_name = map[int32]string{
	0: "ErrCommon",
	1: "ErrNotFound",
	2: "ErrAlreadyExists",
	3: "ErrNotSupported",
	4: "ErrTimeout",
}

var Error_Kind_value = map[string]int32{
	"ErrCommon":        0,
	"ErrNotFound":      1,
	"ErrAlreadyExists": 2,
	"ErrNotSupported":  3,
	"ErrTimeout":       4,
}

func (Error_Kind) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_97b3080873330fb4, []int{8, 0}
}

type ContainerRuntimeInfo struct {
	Name    string `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	Version string `protobuf:"bytes,2,opt,name=version,proto3" json:"version,omitempty"`
}

func (m *ContainerRuntimeInfo) Reset()      { *m = ContainerRuntimeInfo{} }
func (*ContainerRuntimeInfo) ProtoMessage() {}
func (*ContainerRuntimeInfo) Descriptor() ([]byte, []int) {
	return fileDescriptor_97b3080873330fb4, []int{0}
}
func (m *ContainerRuntimeInfo) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ContainerRuntimeInfo) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ContainerRuntimeInfo.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ContainerRuntimeInfo) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ContainerRuntimeInfo.Merge(m, src)
}
func (m *ContainerRuntimeInfo) XXX_Size() int {
	return m.Size()
}
func (m *ContainerRuntimeInfo) XXX_DiscardUnknown() {
	xxx_messageInfo_ContainerRuntimeInfo.DiscardUnknown(m)
}

var xxx_messageInfo_ContainerRuntimeInfo proto.InternalMessageInfo

func (m *ContainerRuntimeInfo) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *ContainerRuntimeInfo) GetVersion() string {
	if m != nil {
		return m.Version
	}
	return ""
}

func (*ContainerRuntimeInfo) XXX_MessageName() string {
	return "connectivity.ContainerRuntimeInfo"
}

// replacement of corev1.NodeSystemInfo
type NodeSystemInfo struct {
	Os            string                `protobuf:"bytes,1,opt,name=os,proto3" json:"os,omitempty"`
	OsImage       string                `protobuf:"bytes,2,opt,name=os_image,json=osImage,proto3" json:"os_image,omitempty"`
	Arch          string                `protobuf:"bytes,3,opt,name=arch,proto3" json:"arch,omitempty"`
	KernelVersion string                `protobuf:"bytes,4,opt,name=kernel_version,json=kernelVersion,proto3" json:"kernel_version,omitempty"`
	BootId        string                `protobuf:"bytes,11,opt,name=boot_id,json=bootId,proto3" json:"boot_id,omitempty"`
	MachineId     string                `protobuf:"bytes,12,opt,name=machine_id,json=machineId,proto3" json:"machine_id,omitempty"`
	SystemUuid    string                `protobuf:"bytes,13,opt,name=system_uuid,json=systemUuid,proto3" json:"system_uuid,omitempty"`
	RuntimeInfo   *ContainerRuntimeInfo `protobuf:"bytes,21,opt,name=runtime_info,json=runtimeInfo,proto3" json:"runtime_info,omitempty"`
}

func (m *NodeSystemInfo) Reset()      { *m = NodeSystemInfo{} }
func (*NodeSystemInfo) ProtoMessage() {}
func (*NodeSystemInfo) Descriptor() ([]byte, []int) {
	return fileDescriptor_97b3080873330fb4, []int{1}
}
func (m *NodeSystemInfo) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *NodeSystemInfo) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_NodeSystemInfo.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *NodeSystemInfo) XXX_Merge(src proto.Message) {
	xxx_messageInfo_NodeSystemInfo.Merge(m, src)
}
func (m *NodeSystemInfo) XXX_Size() int {
	return m.Size()
}
func (m *NodeSystemInfo) XXX_DiscardUnknown() {
	xxx_messageInfo_NodeSystemInfo.DiscardUnknown(m)
}

var xxx_messageInfo_NodeSystemInfo proto.InternalMessageInfo

func (m *NodeSystemInfo) GetOs() string {
	if m != nil {
		return m.Os
	}
	return ""
}

func (m *NodeSystemInfo) GetOsImage() string {
	if m != nil {
		return m.OsImage
	}
	return ""
}

func (m *NodeSystemInfo) GetArch() string {
	if m != nil {
		return m.Arch
	}
	return ""
}

func (m *NodeSystemInfo) GetKernelVersion() string {
	if m != nil {
		return m.KernelVersion
	}
	return ""
}

func (m *NodeSystemInfo) GetBootId() string {
	if m != nil {
		return m.BootId
	}
	return ""
}

func (m *NodeSystemInfo) GetMachineId() string {
	if m != nil {
		return m.MachineId
	}
	return ""
}

func (m *NodeSystemInfo) GetSystemUuid() string {
	if m != nil {
		return m.SystemUuid
	}
	return ""
}

func (m *NodeSystemInfo) GetRuntimeInfo() *ContainerRuntimeInfo {
	if m != nil {
		return m.RuntimeInfo
	}
	return nil
}

func (*NodeSystemInfo) XXX_MessageName() string {
	return "connectivity.NodeSystemInfo"
}

// replacement of corev1.ResourceList
type NodeResources struct {
	CpuCount     uint64 `protobuf:"varint,1,opt,name=cpu_count,json=cpuCount,proto3" json:"cpu_count,omitempty"`
	MemoryBytes  uint64 `protobuf:"varint,2,opt,name=memory_bytes,json=memoryBytes,proto3" json:"memory_bytes,omitempty"`
	StorageBytes uint64 `protobuf:"varint,3,opt,name=storage_bytes,json=storageBytes,proto3" json:"storage_bytes,omitempty"`
	PodCount     uint64 `protobuf:"varint,4,opt,name=pod_count,json=podCount,proto3" json:"pod_count,omitempty"`
}

func (m *NodeResources) Reset()      { *m = NodeResources{} }
func (*NodeResources) ProtoMessage() {}
func (*NodeResources) Descriptor() ([]byte, []int) {
	return fileDescriptor_97b3080873330fb4, []int{2}
}
func (m *NodeResources) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *NodeResources) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_NodeResources.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *NodeResources) XXX_Merge(src proto.Message) {
	xxx_messageInfo_NodeResources.Merge(m, src)
}
func (m *NodeResources) XXX_Size() int {
	return m.Size()
}
func (m *NodeResources) XXX_DiscardUnknown() {
	xxx_messageInfo_NodeResources.DiscardUnknown(m)
}

var xxx_messageInfo_NodeResources proto.InternalMessageInfo

func (m *NodeResources) GetCpuCount() uint64 {
	if m != nil {
		return m.CpuCount
	}
	return 0
}

func (m *NodeResources) GetMemoryBytes() uint64 {
	if m != nil {
		return m.MemoryBytes
	}
	return 0
}

func (m *NodeResources) GetStorageBytes() uint64 {
	if m != nil {
		return m.StorageBytes
	}
	return 0
}

func (m *NodeResources) GetPodCount() uint64 {
	if m != nil {
		return m.PodCount
	}
	return 0
}

func (*NodeResources) XXX_MessageName() string {
	return "connectivity.NodeResources"
}

type NodeConditions struct {
	Ready   NodeConditions_Condition `protobuf:"varint,1,opt,name=ready,proto3,enum=connectivity.NodeConditions_Condition" json:"ready,omitempty"`
	Memory  NodeConditions_Condition `protobuf:"varint,2,opt,name=memory,proto3,enum=connectivity.NodeConditions_Condition" json:"memory,omitempty"`
	Disk    NodeConditions_Condition `protobuf:"varint,3,opt,name=disk,proto3,enum=connectivity.NodeConditions_Condition" json:"disk,omitempty"`
	Pid     NodeConditions_Condition `protobuf:"varint,4,opt,name=pid,proto3,enum=connectivity.NodeConditions_Condition" json:"pid,omitempty"`
	Network NodeConditions_Condition `protobuf:"varint,5,opt,name=network,proto3,enum=connectivity.NodeConditions_Condition" json:"network,omitempty"`
	Pod     NodeConditions_Condition `protobuf:"varint,6,opt,name=pod,proto3,enum=connectivity.NodeConditions_Condition" json:"pod,omitempty"`
}

func (m *NodeConditions) Reset()      { *m = NodeConditions{} }
func (*NodeConditions) ProtoMessage() {}
func (*NodeConditions) Descriptor() ([]byte, []int) {
	return fileDescriptor_97b3080873330fb4, []int{3}
}
func (m *NodeConditions) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *NodeConditions) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_NodeConditions.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *NodeConditions) XXX_Merge(src proto.Message) {
	xxx_messageInfo_NodeConditions.Merge(m, src)
}
func (m *NodeConditions) XXX_Size() int {
	return m.Size()
}
func (m *NodeConditions) XXX_DiscardUnknown() {
	xxx_messageInfo_NodeConditions.DiscardUnknown(m)
}

var xxx_messageInfo_NodeConditions proto.InternalMessageInfo

func (m *NodeConditions) GetReady() NodeConditions_Condition {
	if m != nil {
		return m.Ready
	}
	return Unknown
}

func (m *NodeConditions) GetMemory() NodeConditions_Condition {
	if m != nil {
		return m.Memory
	}
	return Unknown
}

func (m *NodeConditions) GetDisk() NodeConditions_Condition {
	if m != nil {
		return m.Disk
	}
	return Unknown
}

func (m *NodeConditions) GetPid() NodeConditions_Condition {
	if m != nil {
		return m.Pid
	}
	return Unknown
}

func (m *NodeConditions) GetNetwork() NodeConditions_Condition {
	if m != nil {
		return m.Network
	}
	return Unknown
}

func (m *NodeConditions) GetPod() NodeConditions_Condition {
	if m != nil {
		return m.Pod
	}
	return Unknown
}

func (*NodeConditions) XXX_MessageName() string {
	return "connectivity.NodeConditions"
}

type NodeStatus struct {
	SystemInfo  *NodeSystemInfo `protobuf:"bytes,1,opt,name=system_info,json=systemInfo,proto3" json:"system_info,omitempty"`
	Capacity    *NodeResources  `protobuf:"bytes,2,opt,name=capacity,proto3" json:"capacity,omitempty"`
	Allocatable *NodeResources  `protobuf:"bytes,3,opt,name=allocatable,proto3" json:"allocatable,omitempty"`
	Conditions  *NodeConditions `protobuf:"bytes,4,opt,name=conditions,proto3" json:"conditions,omitempty"`
}

func (m *NodeStatus) Reset()      { *m = NodeStatus{} }
func (*NodeStatus) ProtoMessage() {}
func (*NodeStatus) Descriptor() ([]byte, []int) {
	return fileDescriptor_97b3080873330fb4, []int{4}
}
func (m *NodeStatus) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *NodeStatus) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_NodeStatus.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *NodeStatus) XXX_Merge(src proto.Message) {
	xxx_messageInfo_NodeStatus.Merge(m, src)
}
func (m *NodeStatus) XXX_Size() int {
	return m.Size()
}
func (m *NodeStatus) XXX_DiscardUnknown() {
	xxx_messageInfo_NodeStatus.DiscardUnknown(m)
}

var xxx_messageInfo_NodeStatus proto.InternalMessageInfo

func (m *NodeStatus) GetSystemInfo() *NodeSystemInfo {
	if m != nil {
		return m.SystemInfo
	}
	return nil
}

func (m *NodeStatus) GetCapacity() *NodeResources {
	if m != nil {
		return m.Capacity
	}
	return nil
}

func (m *NodeStatus) GetAllocatable() *NodeResources {
	if m != nil {
		return m.Allocatable
	}
	return nil
}

func (m *NodeStatus) GetConditions() *NodeConditions {
	if m != nil {
		return m.Conditions
	}
	return nil
}

func (*NodeStatus) XXX_MessageName() string {
	return "connectivity.NodeStatus"
}

type PodStatus struct {
	// metadata
	Uid string `protobuf:"bytes,1,opt,name=uid,proto3" json:"uid,omitempty"`
	// status
	ContainerStatuses map[string]*PodStatus_ContainerStatus `protobuf:"bytes,2,rep,name=container_statuses,json=containerStatuses,proto3" json:"container_statuses,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
}

func (m *PodStatus) Reset()      { *m = PodStatus{} }
func (*PodStatus) ProtoMessage() {}
func (*PodStatus) Descriptor() ([]byte, []int) {
	return fileDescriptor_97b3080873330fb4, []int{5}
}
func (m *PodStatus) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *PodStatus) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_PodStatus.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *PodStatus) XXX_Merge(src proto.Message) {
	xxx_messageInfo_PodStatus.Merge(m, src)
}
func (m *PodStatus) XXX_Size() int {
	return m.Size()
}
func (m *PodStatus) XXX_DiscardUnknown() {
	xxx_messageInfo_PodStatus.DiscardUnknown(m)
}

var xxx_messageInfo_PodStatus proto.InternalMessageInfo

func (m *PodStatus) GetUid() string {
	if m != nil {
		return m.Uid
	}
	return ""
}

func (m *PodStatus) GetContainerStatuses() map[string]*PodStatus_ContainerStatus {
	if m != nil {
		return m.ContainerStatuses
	}
	return nil
}

func (*PodStatus) XXX_MessageName() string {
	return "connectivity.PodStatus"
}

type PodStatus_ContainerStatus struct {
	ContainerId string `protobuf:"bytes,1,opt,name=container_id,json=containerId,proto3" json:"container_id,omitempty"`
	ImageId     string `protobuf:"bytes,2,opt,name=image_id,json=imageId,proto3" json:"image_id,omitempty"`
	// time values in unix nano
	CreatedAt    int64  `protobuf:"varint,4,opt,name=created_at,json=createdAt,proto3" json:"created_at,omitempty"`
	StartedAt    int64  `protobuf:"varint,5,opt,name=started_at,json=startedAt,proto3" json:"started_at,omitempty"`
	FinishedAt   int64  `protobuf:"varint,6,opt,name=finished_at,json=finishedAt,proto3" json:"finished_at,omitempty"`
	ExitCode     int32  `protobuf:"varint,7,opt,name=exit_code,json=exitCode,proto3" json:"exit_code,omitempty"`
	RestartCount int32  `protobuf:"varint,8,opt,name=restart_count,json=restartCount,proto3" json:"restart_count,omitempty"`
	Reason       string `protobuf:"bytes,11,opt,name=reason,proto3" json:"reason,omitempty"`
	Message      string `protobuf:"bytes,12,opt,name=message,proto3" json:"message,omitempty"`
}

func (m *PodStatus_ContainerStatus) Reset()      { *m = PodStatus_ContainerStatus{} }
func (*PodStatus_ContainerStatus) ProtoMessage() {}
func (*PodStatus_ContainerStatus) Descriptor() ([]byte, []int) {
	return fileDescriptor_97b3080873330fb4, []int{5, 0}
}
func (m *PodStatus_ContainerStatus) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *PodStatus_ContainerStatus) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_PodStatus_ContainerStatus.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *PodStatus_ContainerStatus) XXX_Merge(src proto.Message) {
	xxx_messageInfo_PodStatus_ContainerStatus.Merge(m, src)
}
func (m *PodStatus_ContainerStatus) XXX_Size() int {
	return m.Size()
}
func (m *PodStatus_ContainerStatus) XXX_DiscardUnknown() {
	xxx_messageInfo_PodStatus_ContainerStatus.DiscardUnknown(m)
}

var xxx_messageInfo_PodStatus_ContainerStatus proto.InternalMessageInfo

func (m *PodStatus_ContainerStatus) GetContainerId() string {
	if m != nil {
		return m.ContainerId
	}
	return ""
}

func (m *PodStatus_ContainerStatus) GetImageId() string {
	if m != nil {
		return m.ImageId
	}
	return ""
}

func (m *PodStatus_ContainerStatus) GetCreatedAt() int64 {
	if m != nil {
		return m.CreatedAt
	}
	return 0
}

func (m *PodStatus_ContainerStatus) GetStartedAt() int64 {
	if m != nil {
		return m.StartedAt
	}
	return 0
}

func (m *PodStatus_ContainerStatus) GetFinishedAt() int64 {
	if m != nil {
		return m.FinishedAt
	}
	return 0
}

func (m *PodStatus_ContainerStatus) GetExitCode() int32 {
	if m != nil {
		return m.ExitCode
	}
	return 0
}

func (m *PodStatus_ContainerStatus) GetRestartCount() int32 {
	if m != nil {
		return m.RestartCount
	}
	return 0
}

func (m *PodStatus_ContainerStatus) GetReason() string {
	if m != nil {
		return m.Reason
	}
	return ""
}

func (m *PodStatus_ContainerStatus) GetMessage() string {
	if m != nil {
		return m.Message
	}
	return ""
}

func (*PodStatus_ContainerStatus) XXX_MessageName() string {
	return "connectivity.PodStatus.ContainerStatus"
}

type PodStatusList struct {
	Pods []*PodStatus `protobuf:"bytes,1,rep,name=pods,proto3" json:"pods,omitempty"`
}

func (m *PodStatusList) Reset()      { *m = PodStatusList{} }
func (*PodStatusList) ProtoMessage() {}
func (*PodStatusList) Descriptor() ([]byte, []int) {
	return fileDescriptor_97b3080873330fb4, []int{6}
}
func (m *PodStatusList) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *PodStatusList) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_PodStatusList.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *PodStatusList) XXX_Merge(src proto.Message) {
	xxx_messageInfo_PodStatusList.Merge(m, src)
}
func (m *PodStatusList) XXX_Size() int {
	return m.Size()
}
func (m *PodStatusList) XXX_DiscardUnknown() {
	xxx_messageInfo_PodStatusList.DiscardUnknown(m)
}

var xxx_messageInfo_PodStatusList proto.InternalMessageInfo

func (m *PodStatusList) GetPods() []*PodStatus {
	if m != nil {
		return m.Pods
	}
	return nil
}

func (*PodStatusList) XXX_MessageName() string {
	return "connectivity.PodStatusList"
}

type Data struct {
	Kind Data_Kind `protobuf:"varint,1,opt,name=kind,proto3,enum=connectivity.Data_Kind" json:"kind,omitempty"`
	Data []byte    `protobuf:"bytes,2,opt,name=data,proto3" json:"data,omitempty"`
	// seqence to maintain
	Seq uint64 `protobuf:"varint,3,opt,name=seq,proto3" json:"seq,omitempty"`
}

func (m *Data) Reset()      { *m = Data{} }
func (*Data) ProtoMessage() {}
func (*Data) Descriptor() ([]byte, []int) {
	return fileDescriptor_97b3080873330fb4, []int{7}
}
func (m *Data) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Data) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Data.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *Data) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Data.Merge(m, src)
}
func (m *Data) XXX_Size() int {
	return m.Size()
}
func (m *Data) XXX_DiscardUnknown() {
	xxx_messageInfo_Data.DiscardUnknown(m)
}

var xxx_messageInfo_Data proto.InternalMessageInfo

func (m *Data) GetKind() Data_Kind {
	if m != nil {
		return m.Kind
	}
	return STDOUT
}

func (m *Data) GetData() []byte {
	if m != nil {
		return m.Data
	}
	return nil
}

func (m *Data) GetSeq() uint64 {
	if m != nil {
		return m.Seq
	}
	return 0
}

func (*Data) XXX_MessageName() string {
	return "connectivity.Data"
}

type Error struct {
	Kind        Error_Kind `protobuf:"varint,1,opt,name=kind,proto3,enum=connectivity.Error_Kind" json:"kind,omitempty"`
	Description string     `protobuf:"bytes,2,opt,name=description,proto3" json:"description,omitempty"`
}

func (m *Error) Reset()      { *m = Error{} }
func (*Error) ProtoMessage() {}
func (*Error) Descriptor() ([]byte, []int) {
	return fileDescriptor_97b3080873330fb4, []int{8}
}
func (m *Error) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Error) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Error.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *Error) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Error.Merge(m, src)
}
func (m *Error) XXX_Size() int {
	return m.Size()
}
func (m *Error) XXX_DiscardUnknown() {
	xxx_messageInfo_Error.DiscardUnknown(m)
}

var xxx_messageInfo_Error proto.InternalMessageInfo

func (m *Error) GetKind() Error_Kind {
	if m != nil {
		return m.Kind
	}
	return ErrCommon
}

func (m *Error) GetDescription() string {
	if m != nil {
		return m.Description
	}
	return ""
}

func (*Error) XXX_MessageName() string {
	return "connectivity.Error"
}
func init() {
	proto.RegisterEnum("connectivity.NodeConditions_Condition", NodeConditions_Condition_name, NodeConditions_Condition_value)
	proto.RegisterEnum("connectivity.PodStatus_State", PodStatus_State_name, PodStatus_State_value)
	proto.RegisterEnum("connectivity.Data_Kind", Data_Kind_name, Data_Kind_value)
	proto.RegisterEnum("connectivity.Error_Kind", Error_Kind_name, Error_Kind_value)
	proto.RegisterType((*ContainerRuntimeInfo)(nil), "connectivity.ContainerRuntimeInfo")
	proto.RegisterType((*NodeSystemInfo)(nil), "connectivity.NodeSystemInfo")
	proto.RegisterType((*NodeResources)(nil), "connectivity.NodeResources")
	proto.RegisterType((*NodeConditions)(nil), "connectivity.NodeConditions")
	proto.RegisterType((*NodeStatus)(nil), "connectivity.NodeStatus")
	proto.RegisterType((*PodStatus)(nil), "connectivity.PodStatus")
	proto.RegisterMapType((map[string]*PodStatus_ContainerStatus)(nil), "connectivity.PodStatus.ContainerStatusesEntry")
	proto.RegisterType((*PodStatus_ContainerStatus)(nil), "connectivity.PodStatus.ContainerStatus")
	proto.RegisterType((*PodStatusList)(nil), "connectivity.PodStatusList")
	proto.RegisterType((*Data)(nil), "connectivity.Data")
	proto.RegisterType((*Error)(nil), "connectivity.Error")
}

func init() { proto.RegisterFile("msg_detail.proto", fileDescriptor_97b3080873330fb4) }

var fileDescriptor_97b3080873330fb4 = []byte{
	// 1136 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x94, 0x56, 0x41, 0x6f, 0x1b, 0xc5,
	0x17, 0xf7, 0xda, 0x6b, 0x27, 0x7e, 0x6b, 0x3b, 0xfb, 0x9f, 0x7f, 0x69, 0x4d, 0x0b, 0x4b, 0x58,
	0x04, 0x04, 0x01, 0xae, 0x14, 0x90, 0xa8, 0xaa, 0x82, 0x48, 0x53, 0x57, 0x8d, 0x40, 0x6d, 0xb5,
	0x49, 0xb8, 0x21, 0x6b, 0xbc, 0x33, 0xb1, 0x47, 0xf6, 0xce, 0x98, 0x99, 0xd9, 0xb4, 0xbe, 0x81,
	0xc4, 0x07, 0x80, 0x0b, 0x1f, 0x80, 0x13, 0x9f, 0x80, 0x03, 0x9f, 0xa0, 0xc7, 0x1c, 0x7b, 0x24,
	0xce, 0x85, 0x63, 0x0f, 0x7c, 0x00, 0x34, 0x33, 0x6b, 0x3b, 0x49, 0x83, 0x48, 0x6f, 0xf3, 0x7e,
	0xef, 0xf7, 0xf3, 0x7b, 0xfb, 0xe6, 0xbd, 0x37, 0x86, 0x30, 0x53, 0x83, 0x1e, 0xa1, 0x1a, 0xb3,
	0x71, 0x67, 0x22, 0x85, 0x16, 0xa8, 0x91, 0x0a, 0xce, 0x69, 0xaa, 0xd9, 0x21, 0xd3, 0xd3, 0xeb,
	0x1f, 0x0f, 0x98, 0x1e, 0xe6, 0xfd, 0x4e, 0x2a, 0xb2, 0x9b, 0x03, 0x31, 0x10, 0x37, 0x2d, 0xa9,
	0x9f, 0x1f, 0x58, 0xcb, 0x1a, 0xf6, 0xe4, 0xc4, 0xf1, 0x3d, 0xb8, 0xb2, 0x2d, 0xb8, 0xc6, 0x8c,
	0x53, 0x99, 0xe4, 0x5c, 0xb3, 0x8c, 0xee, 0xf0, 0x03, 0x81, 0x10, 0xf8, 0x1c, 0x67, 0xb4, 0xed,
	0xad, 0x7b, 0x1b, 0xf5, 0xc4, 0x9e, 0x51, 0x1b, 0x56, 0x0e, 0xa9, 0x54, 0x4c, 0xf0, 0x76, 0xd9,
	0xc2, 0x73, 0x33, 0xfe, 0xa5, 0x0c, 0xad, 0x87, 0x82, 0xd0, 0xdd, 0xa9, 0xd2, 0x34, 0xb3, 0x3f,
	0xd0, 0x82, 0xb2, 0x50, 0x85, 0xbc, 0x2c, 0x14, 0x7a, 0x1d, 0x56, 0x85, 0xea, 0xb1, 0x0c, 0x0f,
	0xe8, 0x5c, 0x2d, 0xd4, 0x8e, 0x31, 0x4d, 0x2c, 0x2c, 0xd3, 0x61, 0xbb, 0xe2, 0x62, 0x99, 0x33,
	0x7a, 0x17, 0x5a, 0x23, 0x2a, 0x39, 0x1d, 0xf7, 0xe6, 0x21, 0x7d, 0xeb, 0x6d, 0x3a, 0xf4, 0x1b,
	0x07, 0xa2, 0x6b, 0xb0, 0xd2, 0x17, 0x42, 0xf7, 0x18, 0x69, 0x07, 0xd6, 0x5f, 0x33, 0xe6, 0x0e,
	0x41, 0x6f, 0x02, 0x64, 0x38, 0x1d, 0x32, 0x4e, 0x8d, 0xaf, 0x61, 0x7d, 0xf5, 0x02, 0xd9, 0x21,
	0xe8, 0x2d, 0x08, 0x94, 0xcd, 0xb5, 0x97, 0xe7, 0x8c, 0xb4, 0x9b, 0xd6, 0x0f, 0x0e, 0xda, 0xcf,
	0x19, 0x41, 0x5d, 0x68, 0x48, 0x57, 0x8e, 0x1e, 0xe3, 0x07, 0xa2, 0xfd, 0xda, 0xba, 0xb7, 0x11,
	0x6c, 0xc6, 0x9d, 0xd3, 0xb5, 0xee, 0x5c, 0x54, 0xb9, 0x24, 0x90, 0x4b, 0x23, 0xfe, 0xd9, 0x83,
	0xa6, 0x29, 0x4c, 0x42, 0x95, 0xc8, 0x65, 0x4a, 0x15, 0xba, 0x01, 0xf5, 0x74, 0x92, 0xf7, 0x52,
	0x91, 0x73, 0x6d, 0xcb, 0xe3, 0x27, 0xab, 0xe9, 0x24, 0xdf, 0x36, 0x36, 0x7a, 0x1b, 0x1a, 0x19,
	0xcd, 0x84, 0x9c, 0xf6, 0xfa, 0x53, 0x4d, 0x95, 0x2d, 0x94, 0x9f, 0x04, 0x0e, 0xbb, 0x6b, 0x20,
	0xf4, 0x0e, 0x34, 0x95, 0x16, 0x12, 0x0f, 0x68, 0xc1, 0xa9, 0x58, 0x4e, 0xa3, 0x00, 0x1d, 0xe9,
	0x06, 0xd4, 0x27, 0x82, 0x14, 0x41, 0x7c, 0x17, 0x64, 0x22, 0x88, 0x0d, 0x12, 0xff, 0x5e, 0x71,
	0x97, 0xb5, 0x2d, 0x38, 0x61, 0x9a, 0x09, 0xae, 0xd0, 0x1d, 0xa8, 0x4a, 0x8a, 0xc9, 0xd4, 0x26,
	0xd4, 0xda, 0x7c, 0xef, 0xec, 0x67, 0x9e, 0x25, 0x77, 0x16, 0xc7, 0xc4, 0x89, 0xd0, 0x17, 0x50,
	0x73, 0x19, 0xda, 0x7c, 0x2f, 0x2f, 0x2f, 0x54, 0xe8, 0x36, 0xf8, 0x84, 0xa9, 0x91, 0xfd, 0x92,
	0xcb, 0xab, 0xad, 0x06, 0xdd, 0x82, 0xca, 0x84, 0x11, 0xfb, 0x8d, 0x97, 0x97, 0x1a, 0x09, 0xfa,
	0x12, 0x56, 0x38, 0xd5, 0x4f, 0x84, 0x1c, 0xb5, 0xab, 0xaf, 0xa4, 0x9e, 0xcb, 0x6c, 0x6c, 0x41,
	0xda, 0xb5, 0x57, 0x8c, 0x2d, 0x48, 0xfc, 0x29, 0xd4, 0x17, 0x08, 0x0a, 0x60, 0x65, 0x9f, 0x8f,
	0xb8, 0x78, 0xc2, 0xc3, 0x92, 0x31, 0x1e, 0x50, 0x3c, 0xd6, 0xc3, 0x69, 0xe8, 0xa1, 0x26, 0xd4,
	0xf7, 0xf9, 0xb0, 0x30, 0xcb, 0xf1, 0x0f, 0x65, 0x00, 0x3b, 0x65, 0x1a, 0xeb, 0x5c, 0xa1, 0xcf,
	0x17, 0x3d, 0x6c, 0x3b, 0xd4, 0xb3, 0x1d, 0xfa, 0xc6, 0xcb, 0x69, 0x2c, 0x87, 0x72, 0xde, 0xe1,
	0x76, 0x40, 0x3f, 0x83, 0xd5, 0x14, 0x4f, 0x70, 0xca, 0xb4, 0xbb, 0xb7, 0x60, 0xf3, 0xc6, 0xcb,
	0xda, 0x45, 0xdf, 0x26, 0x0b, 0xb2, 0x89, 0x8b, 0xc7, 0x63, 0x91, 0x62, 0x8d, 0xfb, 0x63, 0x6a,
	0x6f, 0xed, 0x3f, 0xb4, 0xa7, 0xf9, 0xe8, 0x0e, 0x40, 0xba, 0x28, 0x8c, 0xbd, 0xb8, 0x0b, 0xb3,
	0x5e, 0x16, 0x2f, 0x39, 0xc5, 0x8f, 0xff, 0xf6, 0xa1, 0xfe, 0x58, 0x90, 0xa2, 0x04, 0x21, 0x54,
	0xcc, 0xf8, 0xba, 0x2d, 0x63, 0x8e, 0xe8, 0x5b, 0x40, 0xe9, 0x7c, 0x2a, 0x7b, 0xca, 0xb2, 0xec,
	0x1c, 0x55, 0x36, 0x82, 0xcd, 0xce, 0xd9, 0x28, 0x8b, 0x9f, 0x59, 0xce, 0xf1, 0x6e, 0x21, 0xe8,
	0x72, 0x2d, 0xa7, 0xc9, 0xff, 0xd2, 0xf3, 0xf8, 0xf5, 0x5f, 0xcb, 0xb0, 0x76, 0x8e, 0x6d, 0x86,
	0x76, 0x19, 0x72, 0x91, 0x4d, 0xb0, 0xc0, 0x76, 0x88, 0x59, 0x7e, 0x76, 0xf3, 0x19, 0x77, 0xb1,
	0xfc, 0xac, 0xed, 0x16, 0x55, 0x2a, 0x29, 0xd6, 0x94, 0xf4, 0xb0, 0x9b, 0xd5, 0x4a, 0x52, 0x2f,
	0x90, 0x2d, 0x6d, 0xdc, 0x4a, 0x63, 0x59, 0xb8, 0xab, 0xce, 0x5d, 0x20, 0x5b, 0xda, 0xec, 0xb1,
	0x03, 0xc6, 0x99, 0x1a, 0x3a, 0x7f, 0xcd, 0xfa, 0x61, 0x0e, 0x6d, 0x69, 0xb3, 0x09, 0xe8, 0x53,
	0xa6, 0x7b, 0xa9, 0x20, 0xb4, 0xbd, 0xb2, 0xee, 0x6d, 0x54, 0x93, 0x55, 0x03, 0x6c, 0x0b, 0x42,
	0xcd, 0x2e, 0x91, 0xd4, 0xfe, 0x58, 0xb1, 0x2a, 0x56, 0x2d, 0xa1, 0x51, 0x80, 0x6e, 0x27, 0x5d,
	0x85, 0x9a, 0xa4, 0x58, 0x09, 0x3e, 0xdf, 0xb0, 0xce, 0x32, 0xaf, 0x41, 0x46, 0x95, 0x32, 0xfb,
	0xdc, 0xad, 0xd7, 0xb9, 0x79, 0x3d, 0x83, 0xab, 0x17, 0x57, 0xd4, 0xdc, 0xd7, 0x88, 0x4e, 0xe7,
	0xf7, 0x35, 0xa2, 0xa6, 0x99, 0xaa, 0x87, 0x78, 0x9c, 0xd3, 0xa2, 0x05, 0xdf, 0xbf, 0xe4, 0x15,
	0x25, 0x4e, 0x75, 0xbb, 0x7c, 0xcb, 0x8b, 0xfb, 0x50, 0x35, 0x20, 0x45, 0x21, 0x34, 0xec, 0x61,
	0x39, 0x4d, 0x73, 0xe4, 0x31, 0xe5, 0x84, 0xf1, 0x41, 0xe8, 0x2d, 0x90, 0x24, 0xe7, 0xdc, 0x20,
	0x65, 0x84, 0xa0, 0x65, 0x91, 0xdd, 0x3c, 0x4d, 0x29, 0x25, 0x94, 0x84, 0x15, 0xb4, 0x06, 0x81,
	0xc5, 0xee, 0x63, 0x36, 0xa6, 0x24, 0xf4, 0xe3, 0x3b, 0xd0, 0x5c, 0xe4, 0xf2, 0x35, 0x53, 0x1a,
	0x7d, 0x08, 0xfe, 0x44, 0x10, 0xf3, 0xc0, 0x99, 0xce, 0xba, 0xf6, 0x2f, 0x69, 0x27, 0x96, 0x14,
	0xff, 0xe8, 0x81, 0x7f, 0x0f, 0x6b, 0x6c, 0x54, 0x23, 0xc6, 0x49, 0xb1, 0x66, 0xcf, 0xa9, 0x0c,
	0xa3, 0xf3, 0x15, 0xe3, 0x24, 0xb1, 0x24, 0xf3, 0x2c, 0x12, 0xac, 0xb1, 0xad, 0x4c, 0x23, 0xb1,
	0x67, 0x53, 0x40, 0x45, 0xbf, 0x2b, 0x76, 0xbe, 0x39, 0xc6, 0x1f, 0x80, 0x6f, 0x34, 0x08, 0xa0,
	0xb6, 0xbb, 0x77, 0xef, 0xd1, 0xfe, 0x5e, 0x58, 0x2a, 0xce, 0xdd, 0x24, 0x09, 0x3d, 0x54, 0x87,
	0xea, 0xa3, 0xbd, 0x07, 0xdd, 0x24, 0x2c, 0xc7, 0x7f, 0x78, 0x50, 0xed, 0x4a, 0x29, 0x24, 0xfa,
	0xe8, 0x4c, 0x1e, 0xed, 0xb3, 0x79, 0x58, 0xca, 0xe9, 0x44, 0xd6, 0x21, 0x20, 0x54, 0xa5, 0x92,
	0x4d, 0xf4, 0xf2, 0xed, 0x3f, 0x0d, 0xc5, 0xb8, 0x48, 0xa2, 0x09, 0xf5, 0xae, 0x94, 0xdb, 0x22,
	0xcb, 0x84, 0x29, 0xff, 0x1a, 0x04, 0x5d, 0x29, 0x1f, 0x0a, 0x7d, 0x5f, 0xe4, 0x9c, 0x84, 0x1e,
	0xba, 0x02, 0x61, 0x57, 0xca, 0xad, 0xb1, 0x7d, 0x37, 0xba, 0x4f, 0x99, 0xd2, 0x2a, 0x2c, 0xa3,
	0xff, 0xc3, 0x9a, 0xa3, 0xed, 0xe6, 0x93, 0x89, 0x30, 0x9d, 0x1d, 0x56, 0x50, 0x0b, 0xa0, 0x2b,
	0xe5, 0x1e, 0xcb, 0xa8, 0xc8, 0x75, 0xe8, 0xdf, 0xbd, 0x75, 0x74, 0x1c, 0x95, 0x9e, 0x1f, 0x47,
	0xa5, 0x17, 0xc7, 0x91, 0xf7, 0xfd, 0x2c, 0xf2, 0x7e, 0x9b, 0x45, 0xde, 0xb3, 0x59, 0xe4, 0x1d,
	0xcd, 0x22, 0xef, 0xcf, 0x59, 0xe4, 0xfd, 0x35, 0x8b, 0x4a, 0x2f, 0x66, 0x91, 0xf7, 0xd3, 0x49,
	0x54, 0x7a, 0x76, 0x12, 0x79, 0x47, 0x27, 0x51, 0xe9, 0xf9, 0x49, 0x54, 0xea, 0xd7, 0xec, 0x3f,
	0x9d, 0x4f, 0xfe, 0x09, 0x00, 0x00, 0xff, 0xff, 0xdb, 0x86, 0x7f, 0x96, 0x3a, 0x09, 0x00, 0x00,
}

func (x NodeConditions_Condition) String() string {
	s, ok := NodeConditions_Condition_name[int32(x)]
	if ok {
		return s
	}
	return strconv.Itoa(int(x))
}
func (x PodStatus_State) String() string {
	s, ok := PodStatus_State_name[int32(x)]
	if ok {
		return s
	}
	return strconv.Itoa(int(x))
}
func (x Data_Kind) String() string {
	s, ok := Data_Kind_name[int32(x)]
	if ok {
		return s
	}
	return strconv.Itoa(int(x))
}
func (x Error_Kind) String() string {
	s, ok := Error_Kind_name[int32(x)]
	if ok {
		return s
	}
	return strconv.Itoa(int(x))
}
func (this *ContainerRuntimeInfo) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*ContainerRuntimeInfo)
	if !ok {
		that2, ok := that.(ContainerRuntimeInfo)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.Name != that1.Name {
		return false
	}
	if this.Version != that1.Version {
		return false
	}
	return true
}
func (this *NodeSystemInfo) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*NodeSystemInfo)
	if !ok {
		that2, ok := that.(NodeSystemInfo)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.Os != that1.Os {
		return false
	}
	if this.OsImage != that1.OsImage {
		return false
	}
	if this.Arch != that1.Arch {
		return false
	}
	if this.KernelVersion != that1.KernelVersion {
		return false
	}
	if this.BootId != that1.BootId {
		return false
	}
	if this.MachineId != that1.MachineId {
		return false
	}
	if this.SystemUuid != that1.SystemUuid {
		return false
	}
	if !this.RuntimeInfo.Equal(that1.RuntimeInfo) {
		return false
	}
	return true
}
func (this *NodeResources) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*NodeResources)
	if !ok {
		that2, ok := that.(NodeResources)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.CpuCount != that1.CpuCount {
		return false
	}
	if this.MemoryBytes != that1.MemoryBytes {
		return false
	}
	if this.StorageBytes != that1.StorageBytes {
		return false
	}
	if this.PodCount != that1.PodCount {
		return false
	}
	return true
}
func (this *NodeConditions) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*NodeConditions)
	if !ok {
		that2, ok := that.(NodeConditions)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.Ready != that1.Ready {
		return false
	}
	if this.Memory != that1.Memory {
		return false
	}
	if this.Disk != that1.Disk {
		return false
	}
	if this.Pid != that1.Pid {
		return false
	}
	if this.Network != that1.Network {
		return false
	}
	if this.Pod != that1.Pod {
		return false
	}
	return true
}
func (this *NodeStatus) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*NodeStatus)
	if !ok {
		that2, ok := that.(NodeStatus)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.SystemInfo.Equal(that1.SystemInfo) {
		return false
	}
	if !this.Capacity.Equal(that1.Capacity) {
		return false
	}
	if !this.Allocatable.Equal(that1.Allocatable) {
		return false
	}
	if !this.Conditions.Equal(that1.Conditions) {
		return false
	}
	return true
}
func (this *PodStatus) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*PodStatus)
	if !ok {
		that2, ok := that.(PodStatus)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.Uid != that1.Uid {
		return false
	}
	if len(this.ContainerStatuses) != len(that1.ContainerStatuses) {
		return false
	}
	for i := range this.ContainerStatuses {
		if !this.ContainerStatuses[i].Equal(that1.ContainerStatuses[i]) {
			return false
		}
	}
	return true
}
func (this *PodStatus_ContainerStatus) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*PodStatus_ContainerStatus)
	if !ok {
		that2, ok := that.(PodStatus_ContainerStatus)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.ContainerId != that1.ContainerId {
		return false
	}
	if this.ImageId != that1.ImageId {
		return false
	}
	if this.CreatedAt != that1.CreatedAt {
		return false
	}
	if this.StartedAt != that1.StartedAt {
		return false
	}
	if this.FinishedAt != that1.FinishedAt {
		return false
	}
	if this.ExitCode != that1.ExitCode {
		return false
	}
	if this.RestartCount != that1.RestartCount {
		return false
	}
	if this.Reason != that1.Reason {
		return false
	}
	if this.Message != that1.Message {
		return false
	}
	return true
}
func (this *PodStatusList) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*PodStatusList)
	if !ok {
		that2, ok := that.(PodStatusList)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if len(this.Pods) != len(that1.Pods) {
		return false
	}
	for i := range this.Pods {
		if !this.Pods[i].Equal(that1.Pods[i]) {
			return false
		}
	}
	return true
}
func (this *Data) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*Data)
	if !ok {
		that2, ok := that.(Data)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.Kind != that1.Kind {
		return false
	}
	if !bytes.Equal(this.Data, that1.Data) {
		return false
	}
	if this.Seq != that1.Seq {
		return false
	}
	return true
}
func (this *Error) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*Error)
	if !ok {
		that2, ok := that.(Error)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.Kind != that1.Kind {
		return false
	}
	if this.Description != that1.Description {
		return false
	}
	return true
}
func (this *ContainerRuntimeInfo) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 6)
	s = append(s, "&connectivity.ContainerRuntimeInfo{")
	s = append(s, "Name: "+fmt.Sprintf("%#v", this.Name)+",\n")
	s = append(s, "Version: "+fmt.Sprintf("%#v", this.Version)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *NodeSystemInfo) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 12)
	s = append(s, "&connectivity.NodeSystemInfo{")
	s = append(s, "Os: "+fmt.Sprintf("%#v", this.Os)+",\n")
	s = append(s, "OsImage: "+fmt.Sprintf("%#v", this.OsImage)+",\n")
	s = append(s, "Arch: "+fmt.Sprintf("%#v", this.Arch)+",\n")
	s = append(s, "KernelVersion: "+fmt.Sprintf("%#v", this.KernelVersion)+",\n")
	s = append(s, "BootId: "+fmt.Sprintf("%#v", this.BootId)+",\n")
	s = append(s, "MachineId: "+fmt.Sprintf("%#v", this.MachineId)+",\n")
	s = append(s, "SystemUuid: "+fmt.Sprintf("%#v", this.SystemUuid)+",\n")
	if this.RuntimeInfo != nil {
		s = append(s, "RuntimeInfo: "+fmt.Sprintf("%#v", this.RuntimeInfo)+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *NodeResources) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 8)
	s = append(s, "&connectivity.NodeResources{")
	s = append(s, "CpuCount: "+fmt.Sprintf("%#v", this.CpuCount)+",\n")
	s = append(s, "MemoryBytes: "+fmt.Sprintf("%#v", this.MemoryBytes)+",\n")
	s = append(s, "StorageBytes: "+fmt.Sprintf("%#v", this.StorageBytes)+",\n")
	s = append(s, "PodCount: "+fmt.Sprintf("%#v", this.PodCount)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *NodeConditions) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 10)
	s = append(s, "&connectivity.NodeConditions{")
	s = append(s, "Ready: "+fmt.Sprintf("%#v", this.Ready)+",\n")
	s = append(s, "Memory: "+fmt.Sprintf("%#v", this.Memory)+",\n")
	s = append(s, "Disk: "+fmt.Sprintf("%#v", this.Disk)+",\n")
	s = append(s, "Pid: "+fmt.Sprintf("%#v", this.Pid)+",\n")
	s = append(s, "Network: "+fmt.Sprintf("%#v", this.Network)+",\n")
	s = append(s, "Pod: "+fmt.Sprintf("%#v", this.Pod)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *NodeStatus) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 8)
	s = append(s, "&connectivity.NodeStatus{")
	if this.SystemInfo != nil {
		s = append(s, "SystemInfo: "+fmt.Sprintf("%#v", this.SystemInfo)+",\n")
	}
	if this.Capacity != nil {
		s = append(s, "Capacity: "+fmt.Sprintf("%#v", this.Capacity)+",\n")
	}
	if this.Allocatable != nil {
		s = append(s, "Allocatable: "+fmt.Sprintf("%#v", this.Allocatable)+",\n")
	}
	if this.Conditions != nil {
		s = append(s, "Conditions: "+fmt.Sprintf("%#v", this.Conditions)+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *PodStatus) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 6)
	s = append(s, "&connectivity.PodStatus{")
	s = append(s, "Uid: "+fmt.Sprintf("%#v", this.Uid)+",\n")
	keysForContainerStatuses := make([]string, 0, len(this.ContainerStatuses))
	for k, _ := range this.ContainerStatuses {
		keysForContainerStatuses = append(keysForContainerStatuses, k)
	}
	github_com_gogo_protobuf_sortkeys.Strings(keysForContainerStatuses)
	mapStringForContainerStatuses := "map[string]*PodStatus_ContainerStatus{"
	for _, k := range keysForContainerStatuses {
		mapStringForContainerStatuses += fmt.Sprintf("%#v: %#v,", k, this.ContainerStatuses[k])
	}
	mapStringForContainerStatuses += "}"
	if this.ContainerStatuses != nil {
		s = append(s, "ContainerStatuses: "+mapStringForContainerStatuses+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *PodStatus_ContainerStatus) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 13)
	s = append(s, "&connectivity.PodStatus_ContainerStatus{")
	s = append(s, "ContainerId: "+fmt.Sprintf("%#v", this.ContainerId)+",\n")
	s = append(s, "ImageId: "+fmt.Sprintf("%#v", this.ImageId)+",\n")
	s = append(s, "CreatedAt: "+fmt.Sprintf("%#v", this.CreatedAt)+",\n")
	s = append(s, "StartedAt: "+fmt.Sprintf("%#v", this.StartedAt)+",\n")
	s = append(s, "FinishedAt: "+fmt.Sprintf("%#v", this.FinishedAt)+",\n")
	s = append(s, "ExitCode: "+fmt.Sprintf("%#v", this.ExitCode)+",\n")
	s = append(s, "RestartCount: "+fmt.Sprintf("%#v", this.RestartCount)+",\n")
	s = append(s, "Reason: "+fmt.Sprintf("%#v", this.Reason)+",\n")
	s = append(s, "Message: "+fmt.Sprintf("%#v", this.Message)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *PodStatusList) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 5)
	s = append(s, "&connectivity.PodStatusList{")
	if this.Pods != nil {
		s = append(s, "Pods: "+fmt.Sprintf("%#v", this.Pods)+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *Data) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 7)
	s = append(s, "&connectivity.Data{")
	s = append(s, "Kind: "+fmt.Sprintf("%#v", this.Kind)+",\n")
	s = append(s, "Data: "+fmt.Sprintf("%#v", this.Data)+",\n")
	s = append(s, "Seq: "+fmt.Sprintf("%#v", this.Seq)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *Error) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 6)
	s = append(s, "&connectivity.Error{")
	s = append(s, "Kind: "+fmt.Sprintf("%#v", this.Kind)+",\n")
	s = append(s, "Description: "+fmt.Sprintf("%#v", this.Description)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func valueToGoStringMsgDetail(v interface{}, typ string) string {
	rv := reflect.ValueOf(v)
	if rv.IsNil() {
		return "nil"
	}
	pv := reflect.Indirect(rv).Interface()
	return fmt.Sprintf("func(v %v) *%v { return &v } ( %#v )", typ, typ, pv)
}
func (m *ContainerRuntimeInfo) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ContainerRuntimeInfo) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Name) > 0 {
		dAtA[i] = 0xa
		i++
		i = encodeVarintMsgDetail(dAtA, i, uint64(len(m.Name)))
		i += copy(dAtA[i:], m.Name)
	}
	if len(m.Version) > 0 {
		dAtA[i] = 0x12
		i++
		i = encodeVarintMsgDetail(dAtA, i, uint64(len(m.Version)))
		i += copy(dAtA[i:], m.Version)
	}
	return i, nil
}

func (m *NodeSystemInfo) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *NodeSystemInfo) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Os) > 0 {
		dAtA[i] = 0xa
		i++
		i = encodeVarintMsgDetail(dAtA, i, uint64(len(m.Os)))
		i += copy(dAtA[i:], m.Os)
	}
	if len(m.OsImage) > 0 {
		dAtA[i] = 0x12
		i++
		i = encodeVarintMsgDetail(dAtA, i, uint64(len(m.OsImage)))
		i += copy(dAtA[i:], m.OsImage)
	}
	if len(m.Arch) > 0 {
		dAtA[i] = 0x1a
		i++
		i = encodeVarintMsgDetail(dAtA, i, uint64(len(m.Arch)))
		i += copy(dAtA[i:], m.Arch)
	}
	if len(m.KernelVersion) > 0 {
		dAtA[i] = 0x22
		i++
		i = encodeVarintMsgDetail(dAtA, i, uint64(len(m.KernelVersion)))
		i += copy(dAtA[i:], m.KernelVersion)
	}
	if len(m.BootId) > 0 {
		dAtA[i] = 0x5a
		i++
		i = encodeVarintMsgDetail(dAtA, i, uint64(len(m.BootId)))
		i += copy(dAtA[i:], m.BootId)
	}
	if len(m.MachineId) > 0 {
		dAtA[i] = 0x62
		i++
		i = encodeVarintMsgDetail(dAtA, i, uint64(len(m.MachineId)))
		i += copy(dAtA[i:], m.MachineId)
	}
	if len(m.SystemUuid) > 0 {
		dAtA[i] = 0x6a
		i++
		i = encodeVarintMsgDetail(dAtA, i, uint64(len(m.SystemUuid)))
		i += copy(dAtA[i:], m.SystemUuid)
	}
	if m.RuntimeInfo != nil {
		dAtA[i] = 0xaa
		i++
		dAtA[i] = 0x1
		i++
		i = encodeVarintMsgDetail(dAtA, i, uint64(m.RuntimeInfo.Size()))
		n1, err := m.RuntimeInfo.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n1
	}
	return i, nil
}

func (m *NodeResources) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *NodeResources) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.CpuCount != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintMsgDetail(dAtA, i, uint64(m.CpuCount))
	}
	if m.MemoryBytes != 0 {
		dAtA[i] = 0x10
		i++
		i = encodeVarintMsgDetail(dAtA, i, uint64(m.MemoryBytes))
	}
	if m.StorageBytes != 0 {
		dAtA[i] = 0x18
		i++
		i = encodeVarintMsgDetail(dAtA, i, uint64(m.StorageBytes))
	}
	if m.PodCount != 0 {
		dAtA[i] = 0x20
		i++
		i = encodeVarintMsgDetail(dAtA, i, uint64(m.PodCount))
	}
	return i, nil
}

func (m *NodeConditions) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *NodeConditions) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Ready != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintMsgDetail(dAtA, i, uint64(m.Ready))
	}
	if m.Memory != 0 {
		dAtA[i] = 0x10
		i++
		i = encodeVarintMsgDetail(dAtA, i, uint64(m.Memory))
	}
	if m.Disk != 0 {
		dAtA[i] = 0x18
		i++
		i = encodeVarintMsgDetail(dAtA, i, uint64(m.Disk))
	}
	if m.Pid != 0 {
		dAtA[i] = 0x20
		i++
		i = encodeVarintMsgDetail(dAtA, i, uint64(m.Pid))
	}
	if m.Network != 0 {
		dAtA[i] = 0x28
		i++
		i = encodeVarintMsgDetail(dAtA, i, uint64(m.Network))
	}
	if m.Pod != 0 {
		dAtA[i] = 0x30
		i++
		i = encodeVarintMsgDetail(dAtA, i, uint64(m.Pod))
	}
	return i, nil
}

func (m *NodeStatus) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *NodeStatus) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.SystemInfo != nil {
		dAtA[i] = 0xa
		i++
		i = encodeVarintMsgDetail(dAtA, i, uint64(m.SystemInfo.Size()))
		n2, err := m.SystemInfo.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n2
	}
	if m.Capacity != nil {
		dAtA[i] = 0x12
		i++
		i = encodeVarintMsgDetail(dAtA, i, uint64(m.Capacity.Size()))
		n3, err := m.Capacity.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n3
	}
	if m.Allocatable != nil {
		dAtA[i] = 0x1a
		i++
		i = encodeVarintMsgDetail(dAtA, i, uint64(m.Allocatable.Size()))
		n4, err := m.Allocatable.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n4
	}
	if m.Conditions != nil {
		dAtA[i] = 0x22
		i++
		i = encodeVarintMsgDetail(dAtA, i, uint64(m.Conditions.Size()))
		n5, err := m.Conditions.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n5
	}
	return i, nil
}

func (m *PodStatus) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *PodStatus) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Uid) > 0 {
		dAtA[i] = 0xa
		i++
		i = encodeVarintMsgDetail(dAtA, i, uint64(len(m.Uid)))
		i += copy(dAtA[i:], m.Uid)
	}
	if len(m.ContainerStatuses) > 0 {
		for k, _ := range m.ContainerStatuses {
			dAtA[i] = 0x12
			i++
			v := m.ContainerStatuses[k]
			msgSize := 0
			if v != nil {
				msgSize = v.Size()
				msgSize += 1 + sovMsgDetail(uint64(msgSize))
			}
			mapSize := 1 + len(k) + sovMsgDetail(uint64(len(k))) + msgSize
			i = encodeVarintMsgDetail(dAtA, i, uint64(mapSize))
			dAtA[i] = 0xa
			i++
			i = encodeVarintMsgDetail(dAtA, i, uint64(len(k)))
			i += copy(dAtA[i:], k)
			if v != nil {
				dAtA[i] = 0x12
				i++
				i = encodeVarintMsgDetail(dAtA, i, uint64(v.Size()))
				n6, err := v.MarshalTo(dAtA[i:])
				if err != nil {
					return 0, err
				}
				i += n6
			}
		}
	}
	return i, nil
}

func (m *PodStatus_ContainerStatus) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *PodStatus_ContainerStatus) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.ContainerId) > 0 {
		dAtA[i] = 0xa
		i++
		i = encodeVarintMsgDetail(dAtA, i, uint64(len(m.ContainerId)))
		i += copy(dAtA[i:], m.ContainerId)
	}
	if len(m.ImageId) > 0 {
		dAtA[i] = 0x12
		i++
		i = encodeVarintMsgDetail(dAtA, i, uint64(len(m.ImageId)))
		i += copy(dAtA[i:], m.ImageId)
	}
	if m.CreatedAt != 0 {
		dAtA[i] = 0x20
		i++
		i = encodeVarintMsgDetail(dAtA, i, uint64(m.CreatedAt))
	}
	if m.StartedAt != 0 {
		dAtA[i] = 0x28
		i++
		i = encodeVarintMsgDetail(dAtA, i, uint64(m.StartedAt))
	}
	if m.FinishedAt != 0 {
		dAtA[i] = 0x30
		i++
		i = encodeVarintMsgDetail(dAtA, i, uint64(m.FinishedAt))
	}
	if m.ExitCode != 0 {
		dAtA[i] = 0x38
		i++
		i = encodeVarintMsgDetail(dAtA, i, uint64(m.ExitCode))
	}
	if m.RestartCount != 0 {
		dAtA[i] = 0x40
		i++
		i = encodeVarintMsgDetail(dAtA, i, uint64(m.RestartCount))
	}
	if len(m.Reason) > 0 {
		dAtA[i] = 0x5a
		i++
		i = encodeVarintMsgDetail(dAtA, i, uint64(len(m.Reason)))
		i += copy(dAtA[i:], m.Reason)
	}
	if len(m.Message) > 0 {
		dAtA[i] = 0x62
		i++
		i = encodeVarintMsgDetail(dAtA, i, uint64(len(m.Message)))
		i += copy(dAtA[i:], m.Message)
	}
	return i, nil
}

func (m *PodStatusList) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *PodStatusList) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Pods) > 0 {
		for _, msg := range m.Pods {
			dAtA[i] = 0xa
			i++
			i = encodeVarintMsgDetail(dAtA, i, uint64(msg.Size()))
			n, err := msg.MarshalTo(dAtA[i:])
			if err != nil {
				return 0, err
			}
			i += n
		}
	}
	return i, nil
}

func (m *Data) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Data) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Kind != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintMsgDetail(dAtA, i, uint64(m.Kind))
	}
	if len(m.Data) > 0 {
		dAtA[i] = 0x12
		i++
		i = encodeVarintMsgDetail(dAtA, i, uint64(len(m.Data)))
		i += copy(dAtA[i:], m.Data)
	}
	if m.Seq != 0 {
		dAtA[i] = 0x18
		i++
		i = encodeVarintMsgDetail(dAtA, i, uint64(m.Seq))
	}
	return i, nil
}

func (m *Error) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Error) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Kind != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintMsgDetail(dAtA, i, uint64(m.Kind))
	}
	if len(m.Description) > 0 {
		dAtA[i] = 0x12
		i++
		i = encodeVarintMsgDetail(dAtA, i, uint64(len(m.Description)))
		i += copy(dAtA[i:], m.Description)
	}
	return i, nil
}

func encodeVarintMsgDetail(dAtA []byte, offset int, v uint64) int {
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return offset + 1
}
func (m *ContainerRuntimeInfo) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Name)
	if l > 0 {
		n += 1 + l + sovMsgDetail(uint64(l))
	}
	l = len(m.Version)
	if l > 0 {
		n += 1 + l + sovMsgDetail(uint64(l))
	}
	return n
}

func (m *NodeSystemInfo) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Os)
	if l > 0 {
		n += 1 + l + sovMsgDetail(uint64(l))
	}
	l = len(m.OsImage)
	if l > 0 {
		n += 1 + l + sovMsgDetail(uint64(l))
	}
	l = len(m.Arch)
	if l > 0 {
		n += 1 + l + sovMsgDetail(uint64(l))
	}
	l = len(m.KernelVersion)
	if l > 0 {
		n += 1 + l + sovMsgDetail(uint64(l))
	}
	l = len(m.BootId)
	if l > 0 {
		n += 1 + l + sovMsgDetail(uint64(l))
	}
	l = len(m.MachineId)
	if l > 0 {
		n += 1 + l + sovMsgDetail(uint64(l))
	}
	l = len(m.SystemUuid)
	if l > 0 {
		n += 1 + l + sovMsgDetail(uint64(l))
	}
	if m.RuntimeInfo != nil {
		l = m.RuntimeInfo.Size()
		n += 2 + l + sovMsgDetail(uint64(l))
	}
	return n
}

func (m *NodeResources) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.CpuCount != 0 {
		n += 1 + sovMsgDetail(uint64(m.CpuCount))
	}
	if m.MemoryBytes != 0 {
		n += 1 + sovMsgDetail(uint64(m.MemoryBytes))
	}
	if m.StorageBytes != 0 {
		n += 1 + sovMsgDetail(uint64(m.StorageBytes))
	}
	if m.PodCount != 0 {
		n += 1 + sovMsgDetail(uint64(m.PodCount))
	}
	return n
}

func (m *NodeConditions) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Ready != 0 {
		n += 1 + sovMsgDetail(uint64(m.Ready))
	}
	if m.Memory != 0 {
		n += 1 + sovMsgDetail(uint64(m.Memory))
	}
	if m.Disk != 0 {
		n += 1 + sovMsgDetail(uint64(m.Disk))
	}
	if m.Pid != 0 {
		n += 1 + sovMsgDetail(uint64(m.Pid))
	}
	if m.Network != 0 {
		n += 1 + sovMsgDetail(uint64(m.Network))
	}
	if m.Pod != 0 {
		n += 1 + sovMsgDetail(uint64(m.Pod))
	}
	return n
}

func (m *NodeStatus) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.SystemInfo != nil {
		l = m.SystemInfo.Size()
		n += 1 + l + sovMsgDetail(uint64(l))
	}
	if m.Capacity != nil {
		l = m.Capacity.Size()
		n += 1 + l + sovMsgDetail(uint64(l))
	}
	if m.Allocatable != nil {
		l = m.Allocatable.Size()
		n += 1 + l + sovMsgDetail(uint64(l))
	}
	if m.Conditions != nil {
		l = m.Conditions.Size()
		n += 1 + l + sovMsgDetail(uint64(l))
	}
	return n
}

func (m *PodStatus) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Uid)
	if l > 0 {
		n += 1 + l + sovMsgDetail(uint64(l))
	}
	if len(m.ContainerStatuses) > 0 {
		for k, v := range m.ContainerStatuses {
			_ = k
			_ = v
			l = 0
			if v != nil {
				l = v.Size()
				l += 1 + sovMsgDetail(uint64(l))
			}
			mapEntrySize := 1 + len(k) + sovMsgDetail(uint64(len(k))) + l
			n += mapEntrySize + 1 + sovMsgDetail(uint64(mapEntrySize))
		}
	}
	return n
}

func (m *PodStatus_ContainerStatus) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.ContainerId)
	if l > 0 {
		n += 1 + l + sovMsgDetail(uint64(l))
	}
	l = len(m.ImageId)
	if l > 0 {
		n += 1 + l + sovMsgDetail(uint64(l))
	}
	if m.CreatedAt != 0 {
		n += 1 + sovMsgDetail(uint64(m.CreatedAt))
	}
	if m.StartedAt != 0 {
		n += 1 + sovMsgDetail(uint64(m.StartedAt))
	}
	if m.FinishedAt != 0 {
		n += 1 + sovMsgDetail(uint64(m.FinishedAt))
	}
	if m.ExitCode != 0 {
		n += 1 + sovMsgDetail(uint64(m.ExitCode))
	}
	if m.RestartCount != 0 {
		n += 1 + sovMsgDetail(uint64(m.RestartCount))
	}
	l = len(m.Reason)
	if l > 0 {
		n += 1 + l + sovMsgDetail(uint64(l))
	}
	l = len(m.Message)
	if l > 0 {
		n += 1 + l + sovMsgDetail(uint64(l))
	}
	return n
}

func (m *PodStatusList) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.Pods) > 0 {
		for _, e := range m.Pods {
			l = e.Size()
			n += 1 + l + sovMsgDetail(uint64(l))
		}
	}
	return n
}

func (m *Data) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Kind != 0 {
		n += 1 + sovMsgDetail(uint64(m.Kind))
	}
	l = len(m.Data)
	if l > 0 {
		n += 1 + l + sovMsgDetail(uint64(l))
	}
	if m.Seq != 0 {
		n += 1 + sovMsgDetail(uint64(m.Seq))
	}
	return n
}

func (m *Error) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Kind != 0 {
		n += 1 + sovMsgDetail(uint64(m.Kind))
	}
	l = len(m.Description)
	if l > 0 {
		n += 1 + l + sovMsgDetail(uint64(l))
	}
	return n
}

func sovMsgDetail(x uint64) (n int) {
	for {
		n++
		x >>= 7
		if x == 0 {
			break
		}
	}
	return n
}
func sozMsgDetail(x uint64) (n int) {
	return sovMsgDetail(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (this *ContainerRuntimeInfo) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&ContainerRuntimeInfo{`,
		`Name:` + fmt.Sprintf("%v", this.Name) + `,`,
		`Version:` + fmt.Sprintf("%v", this.Version) + `,`,
		`}`,
	}, "")
	return s
}
func (this *NodeSystemInfo) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&NodeSystemInfo{`,
		`Os:` + fmt.Sprintf("%v", this.Os) + `,`,
		`OsImage:` + fmt.Sprintf("%v", this.OsImage) + `,`,
		`Arch:` + fmt.Sprintf("%v", this.Arch) + `,`,
		`KernelVersion:` + fmt.Sprintf("%v", this.KernelVersion) + `,`,
		`BootId:` + fmt.Sprintf("%v", this.BootId) + `,`,
		`MachineId:` + fmt.Sprintf("%v", this.MachineId) + `,`,
		`SystemUuid:` + fmt.Sprintf("%v", this.SystemUuid) + `,`,
		`RuntimeInfo:` + strings.Replace(fmt.Sprintf("%v", this.RuntimeInfo), "ContainerRuntimeInfo", "ContainerRuntimeInfo", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *NodeResources) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&NodeResources{`,
		`CpuCount:` + fmt.Sprintf("%v", this.CpuCount) + `,`,
		`MemoryBytes:` + fmt.Sprintf("%v", this.MemoryBytes) + `,`,
		`StorageBytes:` + fmt.Sprintf("%v", this.StorageBytes) + `,`,
		`PodCount:` + fmt.Sprintf("%v", this.PodCount) + `,`,
		`}`,
	}, "")
	return s
}
func (this *NodeConditions) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&NodeConditions{`,
		`Ready:` + fmt.Sprintf("%v", this.Ready) + `,`,
		`Memory:` + fmt.Sprintf("%v", this.Memory) + `,`,
		`Disk:` + fmt.Sprintf("%v", this.Disk) + `,`,
		`Pid:` + fmt.Sprintf("%v", this.Pid) + `,`,
		`Network:` + fmt.Sprintf("%v", this.Network) + `,`,
		`Pod:` + fmt.Sprintf("%v", this.Pod) + `,`,
		`}`,
	}, "")
	return s
}
func (this *NodeStatus) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&NodeStatus{`,
		`SystemInfo:` + strings.Replace(fmt.Sprintf("%v", this.SystemInfo), "NodeSystemInfo", "NodeSystemInfo", 1) + `,`,
		`Capacity:` + strings.Replace(fmt.Sprintf("%v", this.Capacity), "NodeResources", "NodeResources", 1) + `,`,
		`Allocatable:` + strings.Replace(fmt.Sprintf("%v", this.Allocatable), "NodeResources", "NodeResources", 1) + `,`,
		`Conditions:` + strings.Replace(fmt.Sprintf("%v", this.Conditions), "NodeConditions", "NodeConditions", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *PodStatus) String() string {
	if this == nil {
		return "nil"
	}
	keysForContainerStatuses := make([]string, 0, len(this.ContainerStatuses))
	for k, _ := range this.ContainerStatuses {
		keysForContainerStatuses = append(keysForContainerStatuses, k)
	}
	github_com_gogo_protobuf_sortkeys.Strings(keysForContainerStatuses)
	mapStringForContainerStatuses := "map[string]*PodStatus_ContainerStatus{"
	for _, k := range keysForContainerStatuses {
		mapStringForContainerStatuses += fmt.Sprintf("%v: %v,", k, this.ContainerStatuses[k])
	}
	mapStringForContainerStatuses += "}"
	s := strings.Join([]string{`&PodStatus{`,
		`Uid:` + fmt.Sprintf("%v", this.Uid) + `,`,
		`ContainerStatuses:` + mapStringForContainerStatuses + `,`,
		`}`,
	}, "")
	return s
}
func (this *PodStatus_ContainerStatus) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&PodStatus_ContainerStatus{`,
		`ContainerId:` + fmt.Sprintf("%v", this.ContainerId) + `,`,
		`ImageId:` + fmt.Sprintf("%v", this.ImageId) + `,`,
		`CreatedAt:` + fmt.Sprintf("%v", this.CreatedAt) + `,`,
		`StartedAt:` + fmt.Sprintf("%v", this.StartedAt) + `,`,
		`FinishedAt:` + fmt.Sprintf("%v", this.FinishedAt) + `,`,
		`ExitCode:` + fmt.Sprintf("%v", this.ExitCode) + `,`,
		`RestartCount:` + fmt.Sprintf("%v", this.RestartCount) + `,`,
		`Reason:` + fmt.Sprintf("%v", this.Reason) + `,`,
		`Message:` + fmt.Sprintf("%v", this.Message) + `,`,
		`}`,
	}, "")
	return s
}
func (this *PodStatusList) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&PodStatusList{`,
		`Pods:` + strings.Replace(fmt.Sprintf("%v", this.Pods), "PodStatus", "PodStatus", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *Data) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&Data{`,
		`Kind:` + fmt.Sprintf("%v", this.Kind) + `,`,
		`Data:` + fmt.Sprintf("%v", this.Data) + `,`,
		`Seq:` + fmt.Sprintf("%v", this.Seq) + `,`,
		`}`,
	}, "")
	return s
}
func (this *Error) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&Error{`,
		`Kind:` + fmt.Sprintf("%v", this.Kind) + `,`,
		`Description:` + fmt.Sprintf("%v", this.Description) + `,`,
		`}`,
	}, "")
	return s
}
func valueToStringMsgDetail(v interface{}) string {
	rv := reflect.ValueOf(v)
	if rv.IsNil() {
		return "nil"
	}
	pv := reflect.Indirect(rv).Interface()
	return fmt.Sprintf("*%v", pv)
}
func (m *ContainerRuntimeInfo) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowMsgDetail
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ContainerRuntimeInfo: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ContainerRuntimeInfo: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Name", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMsgDetail
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthMsgDetail
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthMsgDetail
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Name = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Version", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMsgDetail
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthMsgDetail
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthMsgDetail
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Version = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipMsgDetail(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthMsgDetail
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthMsgDetail
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *NodeSystemInfo) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowMsgDetail
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: NodeSystemInfo: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: NodeSystemInfo: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Os", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMsgDetail
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthMsgDetail
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthMsgDetail
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Os = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field OsImage", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMsgDetail
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthMsgDetail
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthMsgDetail
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.OsImage = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Arch", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMsgDetail
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthMsgDetail
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthMsgDetail
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Arch = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field KernelVersion", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMsgDetail
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthMsgDetail
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthMsgDetail
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.KernelVersion = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 11:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field BootId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMsgDetail
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthMsgDetail
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthMsgDetail
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.BootId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 12:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field MachineId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMsgDetail
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthMsgDetail
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthMsgDetail
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.MachineId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 13:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field SystemUuid", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMsgDetail
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthMsgDetail
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthMsgDetail
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.SystemUuid = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 21:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field RuntimeInfo", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMsgDetail
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthMsgDetail
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthMsgDetail
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.RuntimeInfo == nil {
				m.RuntimeInfo = &ContainerRuntimeInfo{}
			}
			if err := m.RuntimeInfo.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipMsgDetail(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthMsgDetail
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthMsgDetail
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *NodeResources) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowMsgDetail
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: NodeResources: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: NodeResources: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field CpuCount", wireType)
			}
			m.CpuCount = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMsgDetail
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.CpuCount |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field MemoryBytes", wireType)
			}
			m.MemoryBytes = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMsgDetail
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.MemoryBytes |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field StorageBytes", wireType)
			}
			m.StorageBytes = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMsgDetail
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.StorageBytes |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field PodCount", wireType)
			}
			m.PodCount = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMsgDetail
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.PodCount |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipMsgDetail(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthMsgDetail
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthMsgDetail
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *NodeConditions) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowMsgDetail
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: NodeConditions: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: NodeConditions: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Ready", wireType)
			}
			m.Ready = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMsgDetail
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Ready |= NodeConditions_Condition(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Memory", wireType)
			}
			m.Memory = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMsgDetail
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Memory |= NodeConditions_Condition(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Disk", wireType)
			}
			m.Disk = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMsgDetail
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Disk |= NodeConditions_Condition(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Pid", wireType)
			}
			m.Pid = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMsgDetail
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Pid |= NodeConditions_Condition(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Network", wireType)
			}
			m.Network = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMsgDetail
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Network |= NodeConditions_Condition(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 6:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Pod", wireType)
			}
			m.Pod = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMsgDetail
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Pod |= NodeConditions_Condition(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipMsgDetail(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthMsgDetail
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthMsgDetail
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *NodeStatus) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowMsgDetail
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: NodeStatus: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: NodeStatus: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field SystemInfo", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMsgDetail
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthMsgDetail
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthMsgDetail
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.SystemInfo == nil {
				m.SystemInfo = &NodeSystemInfo{}
			}
			if err := m.SystemInfo.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Capacity", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMsgDetail
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthMsgDetail
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthMsgDetail
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Capacity == nil {
				m.Capacity = &NodeResources{}
			}
			if err := m.Capacity.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Allocatable", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMsgDetail
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthMsgDetail
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthMsgDetail
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Allocatable == nil {
				m.Allocatable = &NodeResources{}
			}
			if err := m.Allocatable.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Conditions", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMsgDetail
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthMsgDetail
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthMsgDetail
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Conditions == nil {
				m.Conditions = &NodeConditions{}
			}
			if err := m.Conditions.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipMsgDetail(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthMsgDetail
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthMsgDetail
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *PodStatus) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowMsgDetail
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: PodStatus: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: PodStatus: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Uid", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMsgDetail
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthMsgDetail
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthMsgDetail
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Uid = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ContainerStatuses", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMsgDetail
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthMsgDetail
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthMsgDetail
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.ContainerStatuses == nil {
				m.ContainerStatuses = make(map[string]*PodStatus_ContainerStatus)
			}
			var mapkey string
			var mapvalue *PodStatus_ContainerStatus
			for iNdEx < postIndex {
				entryPreIndex := iNdEx
				var wire uint64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowMsgDetail
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					wire |= uint64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				fieldNum := int32(wire >> 3)
				if fieldNum == 1 {
					var stringLenmapkey uint64
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowMsgDetail
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						stringLenmapkey |= uint64(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					intStringLenmapkey := int(stringLenmapkey)
					if intStringLenmapkey < 0 {
						return ErrInvalidLengthMsgDetail
					}
					postStringIndexmapkey := iNdEx + intStringLenmapkey
					if postStringIndexmapkey < 0 {
						return ErrInvalidLengthMsgDetail
					}
					if postStringIndexmapkey > l {
						return io.ErrUnexpectedEOF
					}
					mapkey = string(dAtA[iNdEx:postStringIndexmapkey])
					iNdEx = postStringIndexmapkey
				} else if fieldNum == 2 {
					var mapmsglen int
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowMsgDetail
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						mapmsglen |= int(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					if mapmsglen < 0 {
						return ErrInvalidLengthMsgDetail
					}
					postmsgIndex := iNdEx + mapmsglen
					if postmsgIndex < 0 {
						return ErrInvalidLengthMsgDetail
					}
					if postmsgIndex > l {
						return io.ErrUnexpectedEOF
					}
					mapvalue = &PodStatus_ContainerStatus{}
					if err := mapvalue.Unmarshal(dAtA[iNdEx:postmsgIndex]); err != nil {
						return err
					}
					iNdEx = postmsgIndex
				} else {
					iNdEx = entryPreIndex
					skippy, err := skipMsgDetail(dAtA[iNdEx:])
					if err != nil {
						return err
					}
					if skippy < 0 {
						return ErrInvalidLengthMsgDetail
					}
					if (iNdEx + skippy) > postIndex {
						return io.ErrUnexpectedEOF
					}
					iNdEx += skippy
				}
			}
			m.ContainerStatuses[mapkey] = mapvalue
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipMsgDetail(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthMsgDetail
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthMsgDetail
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *PodStatus_ContainerStatus) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowMsgDetail
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ContainerStatus: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ContainerStatus: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ContainerId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMsgDetail
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthMsgDetail
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthMsgDetail
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ContainerId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ImageId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMsgDetail
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthMsgDetail
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthMsgDetail
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ImageId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field CreatedAt", wireType)
			}
			m.CreatedAt = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMsgDetail
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.CreatedAt |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field StartedAt", wireType)
			}
			m.StartedAt = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMsgDetail
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.StartedAt |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 6:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field FinishedAt", wireType)
			}
			m.FinishedAt = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMsgDetail
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.FinishedAt |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 7:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ExitCode", wireType)
			}
			m.ExitCode = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMsgDetail
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ExitCode |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 8:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field RestartCount", wireType)
			}
			m.RestartCount = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMsgDetail
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.RestartCount |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 11:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Reason", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMsgDetail
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthMsgDetail
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthMsgDetail
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Reason = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 12:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Message", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMsgDetail
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthMsgDetail
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthMsgDetail
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Message = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipMsgDetail(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthMsgDetail
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthMsgDetail
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *PodStatusList) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowMsgDetail
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: PodStatusList: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: PodStatusList: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Pods", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMsgDetail
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthMsgDetail
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthMsgDetail
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Pods = append(m.Pods, &PodStatus{})
			if err := m.Pods[len(m.Pods)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipMsgDetail(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthMsgDetail
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthMsgDetail
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *Data) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowMsgDetail
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Data: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Data: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Kind", wireType)
			}
			m.Kind = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMsgDetail
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Kind |= Data_Kind(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Data", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMsgDetail
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthMsgDetail
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthMsgDetail
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Data = append(m.Data[:0], dAtA[iNdEx:postIndex]...)
			if m.Data == nil {
				m.Data = []byte{}
			}
			iNdEx = postIndex
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Seq", wireType)
			}
			m.Seq = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMsgDetail
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Seq |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipMsgDetail(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthMsgDetail
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthMsgDetail
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *Error) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowMsgDetail
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Error: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Error: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Kind", wireType)
			}
			m.Kind = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMsgDetail
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Kind |= Error_Kind(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Description", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMsgDetail
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthMsgDetail
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthMsgDetail
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Description = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipMsgDetail(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthMsgDetail
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthMsgDetail
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipMsgDetail(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowMsgDetail
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowMsgDetail
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
			return iNdEx, nil
		case 1:
			iNdEx += 8
			return iNdEx, nil
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowMsgDetail
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthMsgDetail
			}
			iNdEx += length
			if iNdEx < 0 {
				return 0, ErrInvalidLengthMsgDetail
			}
			return iNdEx, nil
		case 3:
			for {
				var innerWire uint64
				var start int = iNdEx
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return 0, ErrIntOverflowMsgDetail
					}
					if iNdEx >= l {
						return 0, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					innerWire |= (uint64(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				innerWireType := int(innerWire & 0x7)
				if innerWireType == 4 {
					break
				}
				next, err := skipMsgDetail(dAtA[start:])
				if err != nil {
					return 0, err
				}
				iNdEx = start + next
				if iNdEx < 0 {
					return 0, ErrInvalidLengthMsgDetail
				}
			}
			return iNdEx, nil
		case 4:
			return iNdEx, nil
		case 5:
			iNdEx += 4
			return iNdEx, nil
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
	}
	panic("unreachable")
}

var (
	ErrInvalidLengthMsgDetail = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowMsgDetail   = fmt.Errorf("proto: integer overflow")
)
