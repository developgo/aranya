/*
Copyright 2019 The arhat.dev Authors.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

syntax = "proto3";

package connectivity;

import "github.com/gogo/protobuf/gogoproto/gogo.proto";

option (gogoproto.marshaler_all) = true;
option (gogoproto.unmarshaler_all) = true;
option (gogoproto.sizer_all) = true;
option (gogoproto.messagename_all) = true;

enum RejectReason {
    RejectedByAlreadyConnected = 0;
    RejectedByPodStatusSyncError = 1;
    RejectedByNodeStatusSyncError = 2;
}

message RejectCmd {
    RejectReason reason = 1;
    string message = 2;
}

message NodeCmd {
    enum Action {
        GetInfoAll = 0;
        GetSystemInfo = 1;
        GetResources = 2;
        GetConditions = 3;
    }

    Action action = 1;
}

message PodCmd {
    enum Action {
        // We do not have Pod Update action, and we will always
        // recreate the pod when a update required,
        // also, any pod update action will be resolved in aranya to generate
        // Create and Delete action for remote device.
        //
        // This behavior can keep this project simple and easy to extend.
    
        // Create a new pod in device
        CreatePod = 0;
        // Delete a existing pod in device
        DeletePod = 1;
        // List all managed pod in device
        ListPods = 2;
    
        // Execute commands in existing container
        Exec = 11;
        // Attach to existing container
        Attach = 12;
        // Get container/node log
        Log = 13;
        // Port forward in pod
        PortForward = 14;
        // user input or application data to
        // usually this action happens in Exec, Attach, PortForward session
        Input = 15;
        // user tty resize
        // usually this action happens in Exec, Attach session when tty is enabled
        ResizeTty = 16;
    }

    // action type
    Action action = 1;

    // options for action
    oneof options {
        // used by create or update
        CreateOptions create_options = 11;
        // used by delete
        DeleteOptions delete_options = 12;
        // used by list
        ListOptions list_options = 13;
        // used by log
        LogOptions log_options = 14;
        // used by exec and attach
        ExecOptions exec_options = 15;
        // used by port forward
        PortForwardOptions port_forward_options = 16;
        // used in exec, attach, port_forward session
        InputOptions input_options = 17;
        // used in exec, attach session
        TtyResizeOptions resize_options = 18;
    }
}

message NamedData {
    map<string, bytes> data_map = 1;
}

message ContainerPort {
    string protocol = 1;
    int32 container_port = 2;
    int32 host_port = 3;
}

message SELinuxOptions {
    string type = 1;
    string level = 2;
    string role = 3;
    string user = 4;
}

message SecurityOptions {
    enum ProcMountKind {
        ProcMountDefault = 0;
        ProcMountUnmasked = 1;
    }

    bool privileged = 1;
    bool allow_new_privileges = 2;
    bool non_root = 3;
    bool read_only_rootfs = 4;

    int64 user = 5;
    int64 group = 6;

    repeated string caps_add = 7;
    repeated string caps_drop = 8;

    ProcMountKind proc_mount_kind = 9;

    SELinuxOptions selinux_options = 10;
}

message MountOptions {
    string mount_path = 1;
    string sub_path = 2;
    bool read_only = 3;
    // device type
    string type = 4;
    repeated string options = 5;
}

enum ImagePullPolicy {
    ImagePullAlways = 0;
    ImagePullIfNotPresent = 1;
    ImagePullNever = 2;
}

message ContainerSpec {
    // container image name to pull
    string image = 1;
    ImagePullPolicy image_pull_policy = 2;

    // Command (ENTRYPOINT in Dockerfile)
    repeated string command = 3;
    // Args (CMD in Dockerfile)
    repeated string args = 4;

    string working_dir = 5;
    bool stdin = 6;
    bool stdin_once = 7;
    bool tty = 8;

    // Contaienr environment variables
    //
    // key: env key
    // value: env value
    map<string, string> envs = 11;

    // Container voulme or device mounts
    //
    // key: volume or device name
    // value: mount options
    map<string, MountOptions> mounts = 12;

    //
    // resolved security opts in pod
    //
    SecurityOptions security = 21;
}

// replacement for cri/runtime/v1alpah2/.AuthConfig
message AuthConfig {
    string username = 1;
    string password = 2;

	string auth = 3;
	string server_address = 4;
	// IdentityToken is used to authenticate the user and get
	// an access token for the registry.
	string identity_token = 5;
	// RegistryToken is a bearer token to be sent to a registry
	string registry_token = 6;
}

enum RestartPolicy {
    RestartAlways = 0;
    RestartOnFailure = 1;
    RestartNever = 2;
}

message CreateOptions {
    // kubernetes metadata
    string pod_uid = 1;
    string namespace = 2;
    string name = 3;
    
    RestartPolicy restart_policy = 4;

    //
    // Relationships to host environment
    //
    bool host_ipc = 5;
    bool host_network = 6;
    bool host_pid = 7;
    string hostname = 8;

    // key: container name in the pod
    // value: container creation spec
    map<string, ContainerSpec> containers = 11;

    // key: image name
    // value: auth config
    // used to pull private images
    map<string, AuthConfig> image_pull_auth_config = 12;

    // Container ports is processed when creating the pause container
    //
    // key: port name
    //          the port name is in the format of `{container}/{port_name}`
    //          if the port name is missing in the corev1.Container, 
    //          it's index number in the will be used as port_name
    // value: port map and spec
    //          currently only ports with `host_port` specified will be exposed
    map<string, ContainerPort> ports = 13;

    //
    // Volumes and devices (in early days, they are the same)
    //

    // Volumes and devices' host path
    //
    // key: volume or device name
    // value: host path
    map<string, string> host_paths = 21;

    // Data to populate files in container
    //
    // key: volume name
    // value: data from {ConfigMap, Secret}
    map<string, NamedData> volume_data = 22;
}

message DeleteOptions {
    // pods to delete
    string pod_uid = 1;

    int64 grace_time = 10;
}

message ListOptions {
    // pod namespace
    string namespace = 1;
    // pod name
    string name = 2;
    // show all pods available
    bool all = 3;
}

message LogOptions {
    string pod_uid = 1;
    string container = 2;

    bool follow = 3;
    bool timestamp = 4;
    
    int64 since = 5;      // unix nano time
    int64 tail_lines = 6;
    int64 bytes_limit = 7;
}

message ExecOptions {
    string pod_uid = 1;
    string container = 2;
    repeated string command = 3;

    bool stdin = 4;
    bool stdout = 5;
    bool stderr = 6;
    bool tty = 7;
}

message PortForwardOptions {
    string pod_uid = 1;
    int32 port = 2;
    string protocol = 3;
}

message InputOptions {
    bytes data = 1;
}

message TtyResizeOptions {
    uint32 cols = 1;
    uint32 rows = 2;
}
