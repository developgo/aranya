// +build !ignore_autogenerated

// Code generated by openapi-gen. DO NOT EDIT.

// This file was autogenerated by openapi-gen. Do not edit it manually!

package v1alpha1

import (
	spec "github.com/go-openapi/spec"
	common "k8s.io/kube-openapi/pkg/common"
)

func GetOpenAPIDefinitions(ref common.ReferenceCallback) map[string]common.OpenAPIDefinition {
	return map[string]common.OpenAPIDefinition{
		"arhat.dev/aranya/pkg/apis/aranya/v1alpha1.EdgeDevice":       schema_pkg_apis_aranya_v1alpha1_EdgeDevice(ref),
		"arhat.dev/aranya/pkg/apis/aranya/v1alpha1.EdgeDeviceSpec":   schema_pkg_apis_aranya_v1alpha1_EdgeDeviceSpec(ref),
		"arhat.dev/aranya/pkg/apis/aranya/v1alpha1.EdgeDeviceStatus": schema_pkg_apis_aranya_v1alpha1_EdgeDeviceStatus(ref),
	}
}

func schema_pkg_apis_aranya_v1alpha1_EdgeDevice(ref common.ReferenceCallback) common.OpenAPIDefinition {
	return common.OpenAPIDefinition{
		Schema: spec.Schema{
			SchemaProps: spec.SchemaProps{
				Description: "EdgeDevice is the Schema for the edgedevices API",
				Properties: map[string]spec.Schema{
					"kind": {
						SchemaProps: spec.SchemaProps{
							Description: "Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/api-conventions.md#types-kinds",
							Type:        []string{"string"},
							Format:      "",
						},
					},
					"apiVersion": {
						SchemaProps: spec.SchemaProps{
							Description: "APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/api-conventions.md#resources",
							Type:        []string{"string"},
							Format:      "",
						},
					},
					"metadata": {
						SchemaProps: spec.SchemaProps{
							Ref: ref("k8s.io/apimachinery/pkg/apis/meta/v1.ObjectMeta"),
						},
					},
					"spec": {
						SchemaProps: spec.SchemaProps{
							Ref: ref("arhat.dev/aranya/pkg/apis/aranya/v1alpha1.EdgeDeviceSpec"),
						},
					},
					"status": {
						SchemaProps: spec.SchemaProps{
							Ref: ref("arhat.dev/aranya/pkg/apis/aranya/v1alpha1.EdgeDeviceStatus"),
						},
					},
				},
			},
		},
		Dependencies: []string{
			"arhat.dev/aranya/pkg/apis/aranya/v1alpha1.EdgeDeviceSpec", "arhat.dev/aranya/pkg/apis/aranya/v1alpha1.EdgeDeviceStatus", "k8s.io/apimachinery/pkg/apis/meta/v1.ObjectMeta"},
	}
}

func schema_pkg_apis_aranya_v1alpha1_EdgeDeviceSpec(ref common.ReferenceCallback) common.OpenAPIDefinition {
	return common.OpenAPIDefinition{
		Schema: spec.Schema{
			SchemaProps: spec.SchemaProps{
				Description: "EdgeDeviceSpec defines the desired state of EdgeDevice",
				Properties: map[string]spec.Schema{
					"unschedulable": {
						SchemaProps: spec.SchemaProps{
							Description: "Unschedulable controls device schedulability of new pods. By default, device is schedulable.",
							Type:        []string{"boolean"},
							Format:      "",
						},
					},
					"taints": {
						SchemaProps: spec.SchemaProps{
							Description: "If specified, the device's taints.",
							Type:        []string{"array"},
							Items: &spec.SchemaOrArray{
								Schema: &spec.Schema{
									SchemaProps: spec.SchemaProps{
										Ref: ref("k8s.io/api/core/v1.Taint"),
									},
								},
							},
						},
					},
					"connectivity": {
						SchemaProps: spec.SchemaProps{
							Description: "Connectivity designate the method by which this device connect to aranya server",
							Ref:         ref("arhat.dev/aranya/pkg/apis/aranya/v1alpha1.Connectivity"),
						},
					},
					"configSource": {
						SchemaProps: spec.SchemaProps{
							Description: "If specified, the source to get device configuration from The DynamicKubeletConfig feature gate must be enabled for the Kubelet to use this field",
							Ref:         ref("arhat.dev/aranya/pkg/apis/aranya/v1alpha1.DeviceConfigSource"),
						},
					},
				},
			},
		},
		Dependencies: []string{
			"arhat.dev/aranya/pkg/apis/aranya/v1alpha1.Connectivity", "arhat.dev/aranya/pkg/apis/aranya/v1alpha1.DeviceConfigSource", "k8s.io/api/core/v1.Taint"},
	}
}

func schema_pkg_apis_aranya_v1alpha1_EdgeDeviceStatus(ref common.ReferenceCallback) common.OpenAPIDefinition {
	return common.OpenAPIDefinition{
		Schema: spec.Schema{
			SchemaProps: spec.SchemaProps{
				Description: "EdgeDeviceStatus defines the observed state of EdgeDevice",
				Properties: map[string]spec.Schema{
					"capacity": {
						SchemaProps: spec.SchemaProps{
							Description: "Capacity represents the total resources of a device.",
							Type:        []string{"object"},
							AdditionalProperties: &spec.SchemaOrBool{
								Schema: &spec.Schema{
									SchemaProps: spec.SchemaProps{
										Ref: ref("k8s.io/apimachinery/pkg/api/resource.Quantity"),
									},
								},
							},
						},
					},
					"allocatable": {
						SchemaProps: spec.SchemaProps{
							Description: "Allocatable represents the resources of a device that are available for scheduling. Defaults to Capacity.",
							Type:        []string{"object"},
							AdditionalProperties: &spec.SchemaOrBool{
								Schema: &spec.Schema{
									SchemaProps: spec.SchemaProps{
										Ref: ref("k8s.io/apimachinery/pkg/api/resource.Quantity"),
									},
								},
							},
						},
					},
					"phase": {
						SchemaProps: spec.SchemaProps{
							Description: "NodePhase is the recently observed lifecycle phase of the device. The field is never populated, and now is deprecated.",
							Type:        []string{"string"},
							Format:      "",
						},
					},
					"conditions": {
						VendorExtensible: spec.VendorExtensible{
							Extensions: spec.Extensions{
								"x-kubernetes-patch-merge-key": "type",
								"x-kubernetes-patch-strategy":  "merge",
							},
						},
						SchemaProps: spec.SchemaProps{
							Description: "Conditions is an array of current observed device conditions.",
							Type:        []string{"array"},
							Items: &spec.SchemaOrArray{
								Schema: &spec.Schema{
									SchemaProps: spec.SchemaProps{
										Ref: ref("arhat.dev/aranya/pkg/apis/aranya/v1alpha1.DeviceCondition"),
									},
								},
							},
						},
					},
					"networks": {
						VendorExtensible: spec.VendorExtensible{
							Extensions: spec.Extensions{
								"x-kubernetes-patch-merge-key": "type",
								"x-kubernetes-patch-strategy":  "merge",
							},
						},
						SchemaProps: spec.SchemaProps{
							Description: "List of network reachable from the device.",
							Type:        []string{"array"},
							Items: &spec.SchemaOrArray{
								Schema: &spec.Schema{
									SchemaProps: spec.SchemaProps{
										Ref: ref("arhat.dev/aranya/pkg/apis/aranya/v1alpha1.Network"),
									},
								},
							},
						},
					},
					"deviceInfo": {
						SchemaProps: spec.SchemaProps{
							Description: "Set of ids/uuids to uniquely identify the device.",
							Ref:         ref("arhat.dev/aranya/pkg/apis/aranya/v1alpha1.DeviceSystemInfo"),
						},
					},
					"images": {
						SchemaProps: spec.SchemaProps{
							Description: "List of container images on this device",
							Type:        []string{"array"},
							Items: &spec.SchemaOrArray{
								Schema: &spec.Schema{
									SchemaProps: spec.SchemaProps{
										Ref: ref("k8s.io/api/core/v1.ContainerImage"),
									},
								},
							},
						},
					},
					"volumesInUse": {
						SchemaProps: spec.SchemaProps{
							Description: "List of attachable volumes in use (mounted) by the device.",
							Type:        []string{"array"},
							Items: &spec.SchemaOrArray{
								Schema: &spec.Schema{
									SchemaProps: spec.SchemaProps{
										Type:   []string{"string"},
										Format: "",
									},
								},
							},
						},
					},
					"volumesAttached": {
						SchemaProps: spec.SchemaProps{
							Description: "List of volumes that are attached to the device.",
							Type:        []string{"array"},
							Items: &spec.SchemaOrArray{
								Schema: &spec.Schema{
									SchemaProps: spec.SchemaProps{
										Ref: ref("k8s.io/api/core/v1.AttachedVolume"),
									},
								},
							},
						},
					},
					"config": {
						SchemaProps: spec.SchemaProps{
							Description: "Status of the config assigned to the device via the dynamic Kubelet config feature.",
							Ref:         ref("arhat.dev/aranya/pkg/apis/aranya/v1alpha1.DeviceConfigSource"),
						},
					},
				},
			},
		},
		Dependencies: []string{
			"arhat.dev/aranya/pkg/apis/aranya/v1alpha1.DeviceCondition", "arhat.dev/aranya/pkg/apis/aranya/v1alpha1.DeviceConfigSource", "arhat.dev/aranya/pkg/apis/aranya/v1alpha1.DeviceSystemInfo", "arhat.dev/aranya/pkg/apis/aranya/v1alpha1.Network", "k8s.io/api/core/v1.AttachedVolume", "k8s.io/api/core/v1.ContainerImage", "k8s.io/apimachinery/pkg/api/resource.Quantity"},
	}
}
